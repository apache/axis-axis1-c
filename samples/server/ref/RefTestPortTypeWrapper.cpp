// Copyright 2003-2004 The Apache Software Foundation.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Web Service Wrapper implementations
 */

#include "RefTestPortTypeWrapper.h"

extern int Axis_DeSerialize_intType(intType* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_intType(intType *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_intType(intType* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_intType(intType* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_intType();

RefTestPortTypeWrapper::RefTestPortTypeWrapper()
{
	pWs = new RefTestPortType();
}

RefTestPortTypeWrapper::~RefTestPortTypeWrapper()
{
	delete pWs;
}

/*implementation of WrapperClassHandler interface*/
void RefTestPortTypeWrapper::onFault(void *pMsg)
{
	pWs->onFault();
}

int RefTestPortTypeWrapper::init()
{
	pWs->init();
	return AXIS_SUCCESS;
}

int RefTestPortTypeWrapper::fini()
{
	pWs->fini();
	return AXIS_SUCCESS;
}


/*
 * This method invokes the right service method 
 */
int RefTestPortTypeWrapper::invoke(void *pMsg)
{
	IMessageData* mc = (IMessageData*)pMsg;
	const AxisChar *method = mc->getOperationName();
	if (0 == strcmp(method, "echoInt"))
		return echoInt(mc);
	else return AXIS_FAIL;
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method 
 */
int RefTestPortTypeWrapper::echoInt(void* pMsg)
{
	IMessageData* mc = (IMessageData*)pMsg;
	int nStatus;
	IWrapperSoapSerializer* pIWSSZ = NULL;
	mc->getSoapSerializer(&pIWSSZ);
	if (!pIWSSZ) return AXIS_FAIL;
	IWrapperSoapDeSerializer* pIWSDZ = NULL;
	mc->getSoapDeSerializer(&pIWSDZ);
	if (!pIWSDZ) return AXIS_FAIL;
	/* check whether we have got correct message */
	if (AXIS_SUCCESS != pIWSDZ->checkMessageBody("echoInt", "http://soapinterop.org/")) return AXIS_FAIL;
	pIWSSZ->createSoapMethod("echoIntResponse", "http://soapinterop.org/");
	intType *v0 = (intType*)pIWSDZ->getCmplxObject((void*)Axis_DeSerialize_intType
		, (void*)Axis_Create_intType, (void*)Axis_Delete_intType
		, "inputIntType", Axis_URI_intType);
	if (AXIS_SUCCESS != (nStatus = pIWSDZ->getStatus())) return nStatus;
	try
	{
		intType* ret = pWs->echoInt(v0);
		return pIWSSZ->addOutputCmplxParam(ret, (void*)Axis_Serialize_intType, (void*)Axis_Delete_intType, "echoIntReturn", Axis_URI_intType);
	}
	catch(...){
	}
}

