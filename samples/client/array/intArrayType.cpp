// Copyright 2003-2004 The Apache Software Foundation.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains functions to manipulate complex type intArrayType
 */

#include "intArrayType.hpp"
#include <axis/AxisWrapperAPI.hpp>

/*
 * This static method serialize a intArrayType type of object
 */
int Axis_Serialize_intArrayType(intArrayType* param, IWrapperSoapSerializer* pSZ, bool bArray = false)
{
	if (bArray)
	{
		pSZ->serialize("<", Axis_TypeName_intArrayType, ">", NULL);
	}
	else
	{
		const AxisChar* sPrefix = pSZ->getNamespacePrefix(Axis_URI_intArrayType);
		pSZ->serialize("<", Axis_TypeName_intArrayType, " xsi:type=\"", sPrefix, ":",
			Axis_TypeName_intArrayType, "\" xmlns:", sPrefix, "=\"",
			Axis_URI_intArrayType, "\">", NULL);
	}

	pSZ->serializeBasicArray((Axis_Array*)(&param->intItem),XSD_INT, "intItem");

	pSZ->serialize("</", Axis_TypeName_intArrayType, ">", NULL);
	return AXIS_SUCCESS;
}

/*
 * This static method deserialize a intArrayType type of object
 */
int Axis_DeSerialize_intArrayType(intArrayType* param, IWrapperSoapDeSerializer* pIWSDZ)
{
	param->intItem = (xsd__int_Array&)pIWSDZ->getBasicArray(XSD_INT, "intItem",0);
	return pIWSDZ->getStatus();
}
void* Axis_Create_intArrayType(intArrayType* pObj, bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
	{
		if (pObj)
		{
			intArrayType* pNew = new intArrayType[nSize];
			memcpy(pNew, pObj, sizeof(intArrayType)*nSize/2);
			memset(pObj, 0, sizeof(intArrayType)*nSize/2);
			delete [] pObj;
			return pNew;
		}
		else
		{
			return new intArrayType[nSize];
		}
	}
	else
		return new intArrayType;
}

/*
 * This static method delete a intArrayType type of object
 */
void Axis_Delete_intArrayType(intArrayType* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/*
 * This static method gives the size of intArrayType type of object
 */
int Axis_GetSize_intArrayType()
{
	return sizeof(intArrayType);
}

intArrayType::intArrayType()
{
	/*do not allocate memory to any pointer members here
	 because deserializer will allocate memory anyway. */
	intItem.m_Array = 0;
	intItem.m_Size = 0;
}

intArrayType::~intArrayType()
{
	/*delete any pointer and array members here*/
	delete [] ((xsd__int*)intItem.m_Array);
}
