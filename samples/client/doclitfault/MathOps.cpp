/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "MathOps.hpp"

#include <axis/AxisWrapperAPI.hpp>

extern int Axis_DeSerialize_DivByZeroStruct(DivByZeroStruct* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_DivByZeroStruct(DivByZeroStruct *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_DivByZeroStruct(DivByZeroStruct* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_DivByZeroStruct(DivByZeroStruct* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_DivByZeroStruct();

MathOps::MathOps(const char* pcEndpointUri, AXIS_PROTOCOL_TYPE eProtocol):Stub(pcEndpointUri, eProtocol)
{
}

MathOps::MathOps()
:Stub(" ", APTHTTP1_1)
{
	m_pCall->setEndpointURI("http://localhost/axis/MathOpsDL");
}

MathOps::~MathOps()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service methoddiv
 */
xsd__int MathOps::div(xsd__int Value0, xsd__int Value1)
{
	xsd__int Ret = 0;
	const char* pcCmplxFaultName;
	try
	{	if (AXIS_SUCCESS != m_pCall->initialize(CPP_DOC_PROVIDER)) return Ret;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "MathOpsDL#div");
	m_pCall->setSOAPVersion(SOAP_VER_1_1);
	m_pCall->setOperation("divRequest", "http://localhost/axis/MathOps/types");
	includeSecure();
	applyUserPreferences();
	char cPrefixAndParamName0[19];
	sprintf( cPrefixAndParamName0, "%s:intParam1", getNamespacePrefix("http://localhost/axis/MathOps/types"));
	m_pCall->addParameter((void*)&Value0, cPrefixAndParamName0, XSD_INT);
	char cPrefixAndParamName1[19];
	sprintf( cPrefixAndParamName1, "%s:intParam2", getNamespacePrefix("http://localhost/axis/MathOps/types"));
	m_pCall->addParameter((void*)&Value1, cPrefixAndParamName1, XSD_INT);
	if (AXIS_SUCCESS == m_pCall->invoke())
	{
		if(AXIS_SUCCESS == m_pCall->checkMessage("divResponse", "http://localhost/axis/MathOps/types"))
		{
			Ret = m_pCall->getElementAsInt("_return", 0);
		}
	}
	
	m_pCall->unInitialize();
	return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw MathOpsDL_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://localhost/axis/MathOpsDL" );
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName().c_str();
			if(0 == strcmp("DivByZero", pcCmplxFaultName))
			{
				DivByZeroStruct* pFaultDetail = NULL;
				pFaultDetail = (DivByZeroStruct*)pSoapFault->
					getCmplxFaultObject((void*) Axis_DeSerialize_DivByZeroStruct,
					(void*) Axis_Create_DivByZeroStruct,
					(void*) Axis_Delete_DivByZeroStruct,"DivByZero", 0);
				pSoapFault->setCmplxFaultObject(pFaultDetail);
	
	m_pCall->unInitialize();
				throw MathOpsDL_AxisClientException(pSoapFault);
			}
			else
			{
	
	m_pCall->unInitialize();
				  throw MathOpsDL_AxisClientException(pSoapFault);
			}
		}
		else throw;
	}
}

/*Methods for supporting SecureChannel*/

void MathOps::SetSecure( char * pszArguments, ...)
{
	char **	ppszArgPtr = &pszArguments;
	int		iArgIndex = 0;

	while( *ppszArgPtr != NULL)
	{
		sArguments[iArgIndex] = *ppszArgPtr;

		iArgIndex++;
		ppszArgPtr++;
	}
}

void MathOps::includeSecure()
{
	m_pCall->setTransportProperty( SECURE_PROPERTIES, (const char *) &sArguments);
}
