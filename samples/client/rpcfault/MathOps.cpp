// Copyright 2003-2004 The Apache Software Foundation.
// (c) Copyright IBM Corp. 2004, 2005 All Rights Reserved
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "MathOps.hpp"

#include <axis/AxisWrapperAPI.hpp>

using namespace std;

 extern int Axis_DeSerialize_DivByZeroStruct(DivByZeroStruct* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_DivByZeroStruct(DivByZeroStruct *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_DivByZeroStruct(DivByZeroStruct* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_DivByZeroStruct(DivByZeroStruct* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_DivByZeroStruct();

MathOps::MathOps(const char* pchEndpointUri, AXIS_PROTOCOL_TYPE eProtocol)
:Stub(pchEndpointUri, eProtocol)
{
}

MathOps::MathOps()
:Stub(" ", APTHTTP1_1)
{
	m_pCall->setEndpointURI("http://localhost/axis/MathOps");
}

MathOps::~MathOps()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method div
 */
xsd__int MathOps::div(xsd__int Value0, xsd__int Value1)
{
	xsd__int Ret = 0;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return Ret;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "MathOps#div");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("div", "http://soapinterop.org/wsdl");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "int0", XSD_INT);
		m_pCall->addParameter((void*)&Value1, "int1", XSD_INT);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("divResponse", "http://soapinterop.org/wsdl"))
			{
				Ret = m_pCall->getElementAsInt("addReturn", 0);
			}
		}
	m_pCall->unInitialize();
		return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost/axis/MathOps" );
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("DivByZero", pcCmplxFaultName))
			{
				DivByZeroStruct* pFaultDetail = 
					(DivByZeroStruct*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_DivByZeroStruct,
						(void*) Axis_Create_DivByZeroStruct,
						(void*) Axis_Delete_DivByZeroStruct,
						"DivByZero",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
	}
}

