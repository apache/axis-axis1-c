/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains implementations of the Calculator Exception class of the web service.
 */

#include "Calculator_AxisClientException.hpp"

#include <axis/AxisWrapperAPI.hpp>

Calculator_AxisClientException::Calculator_AxisClientException()
{
/* This only serves the purpose of indicating that the 
 * service has thrown an excpetion 
 */ 
	m_iExceptionCode = AXISC_SERVICE_THROWN_EXCEPTION; 
	processException(m_iExceptionCode); 
}

Calculator_AxisClientException::Calculator_AxisClientException(ISoapFault* pFault)
{
	m_iExceptionCode = AXISC_SERVICE_THROWN_EXCEPTION;
	m_pISoapFault = pFault;
	processException(pFault);}

Calculator_AxisClientException::Calculator_AxisClientException(int iExceptionCode)
{

	m_iExceptionCode = iExceptionCode;
	processException (iExceptionCode);
}

Calculator_AxisClientException::Calculator_AxisClientException(exception* e)
{
	processException (e);
}

Calculator_AxisClientException::Calculator_AxisClientException(exception* e,int iExceptionCode)
{

	processException (e, iExceptionCode);
}

Calculator_AxisClientException::Calculator_AxisClientException(string sMessage)
{
	 m_sMessage =sMessage;
}

Calculator_AxisClientException::~Calculator_AxisClientException() throw () 
{
	m_sMessage ="";
}

void Calculator_AxisClientException:: processException(exception* e, int iExceptionCode)
{
	m_sMessage = getMessage (e) + getMessage (iExceptionCode);
}

void Calculator_AxisClientException::processException (ISoapFault* pFault)
{
	/*User can do something like deserializing the struct into a string*/
}

void Calculator_AxisClientException::processException(exception* e)
{
	m_sMessage = getMessage (e);
}

void Calculator_AxisClientException::processException(int iExceptionCode)
{
	m_sMessage = getMessage (iExceptionCode);
}

const string Calculator_AxisClientException::getMessage (exception* objException)
{
	string sMessage = objException->what();
	return sMessage;
}

const string Calculator_AxisClientException::getMessage (int iExceptionCode)
{
	string sMessage;
	switch(iExceptionCode)
	{
		case AXISC_SERVICE_THROWN_EXCEPTION:
		sMessage = "The Calculator service has thrown an exception. see details";
		break;
		default:
		sMessage = "Unknown Exception has occured in the Calculator service";
	}
return sMessage;
}

const char* Calculator_AxisClientException::what() throw ()
{
	return m_sMessage.c_str ();
}

const int Calculator_AxisClientException::getExceptionCode(){
	return m_iExceptionCode;
}

const ISoapFault* Calculator_AxisClientException::getFault(){
	return m_pISoapFault;
}

