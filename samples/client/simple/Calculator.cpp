/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "Calculator.hpp"

#include <axis/AxisWrapperAPI.hpp>

using namespace std;

 Calculator::Calculator(const char* pchEndpointUri, AXIS_PROTOCOL_TYPE eProtocol)
:Stub(pchEndpointUri, eProtocol)
{
}

Calculator::Calculator()
:Stub(" ", APTHTTP1_1)
{
	m_pCall->setEndpointURI("http://localhost/axis/Calculator");
}

Calculator::~Calculator()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method add
 */
xsd__int Calculator::add(xsd__int Value0, xsd__int Value1)
{
	xsd__int Ret = 0;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return Ret;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "Calculator#add");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("add", "http://localhost/axis/Calculator");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "in0", XSD_INT);
		m_pCall->addParameter((void*)&Value1, "in1", XSD_INT);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("addResponse", "http://localhost/axis/Calculator"))
			{
				Ret = m_pCall->getElementAsInt("addReturn", 0);
			}
		}
	
	m_pCall->unInitialize();
		return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://localhost/axis/Calculator" );
		if(pSoapFault)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method sub
 */
xsd__int Calculator::sub(xsd__int Value0, xsd__int Value1)
{
	xsd__int Ret = 0;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return Ret;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "Calculator#sub");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("sub", "http://localhost/axis/Calculator");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "in0", XSD_INT);
		m_pCall->addParameter((void*)&Value1, "in1", XSD_INT);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("subResponse", "http://localhost/axis/Calculator"))
			{
				Ret = m_pCall->getElementAsInt("subReturn", 0);
			}
		}
	
	m_pCall->unInitialize();
		return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://localhost/axis/Calculator" );
		if(pSoapFault)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method mul
 */
xsd__int Calculator::mul(xsd__int Value0, xsd__int Value1)
{
	xsd__int Ret = 0;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return Ret;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "Calculator#mul");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("mul", "http://localhost/axis/Calculator");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "in0", XSD_INT);
		m_pCall->addParameter((void*)&Value1, "in1", XSD_INT);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("mulResponse", "http://localhost/axis/Calculator"))
			{
				Ret = m_pCall->getElementAsInt("addReturn", 0);
			}
		}
	
	m_pCall->unInitialize();
		return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://localhost/axis/Calculator" );
		if(pSoapFault)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method div
 */
xsd__int Calculator::div(xsd__int Value0, xsd__int Value1)
{
	xsd__int Ret = 0;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return Ret;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "Calculator#div");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("div", "http://localhost/axis/Calculator");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "in0", XSD_INT);
		m_pCall->addParameter((void*)&Value1, "in1", XSD_INT);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("divResponse", "http://localhost/axis/Calculator"))
			{
				Ret = m_pCall->getElementAsInt("addReturn", 0);
			}
		}
	
	m_pCall->unInitialize();
		return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://localhost/axis/Calculator" );
		if(pSoapFault)
		{
	
	m_pCall->unInitialize();
			throw Calculator_AxisClientException(pSoapFault);
		}
		else throw;
	}
}

/*int Calculator::getFaultDetail(char** ppcDetail)
{
	return m_pCall->getFaultDetail(ppcDetail);
}
*/
