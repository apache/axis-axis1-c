<?xml version="1.0" ?>
<project name="discovery" default="default">
  <description>
  Build file for discovery; endpoint location/discovery application
  that uses Multicast IP to find endpoints in a LAN.
  
  Libraries Used in the application (add them to lib/)
    axis.jar              CVS head
    castor-0.9.4.3.jar    http://castor.exolab.org/
    commons-logging 1.0.3 http://jakarta.apache.org
    log4j-1.2.7.jar       http://jakarta.apache.org (optional)
  +probably an XML parser if not working on Java1.4
  
  Libraries used at build time
    junit.jar   3.8.1     junit.org
    servlet.jar 2.3       java.sun.com

  Extras used in the build process
    checkstyle    sourceforge.net
    Docbook DTDs  docbook.org
  
  
</description>

  <property file="build.properties"/>
  <property environment="env"/>
  <property name ="build.dir" location="build/" />
  <property name ="classes.dir"
      location="${build.dir}/classes" />
  <property name ="src.dir"
      location="src" />
  <property name ="lib.dir"
      location="lib" />
  <property name ="dist.dir"
      location="dist" />
  <property name="doc.dir" location="doc"/>
  <property name="javadoc.dir" location="${doc.dir}/javadoc"/>
  <property name="jar.filename"
        value="axis-discovery.jar"/>

  <property name ="jar.file"
      location="${dist.dir}/${jar.filename}" />

  <property name="axis.home" location="..\..\java"/>
  <property name="axis.dist.dir" location="${axis.home}/build/lib"/>

  <property name="castor.src.dir"
      location="${build.dir}/castor/src"/>

  <property name="castor.touchfile" location="${castor.src.dir}/castor.built"/>
  <property name="castor.package"
      value="org.apache.axis.discovery.xml"/>
  <property name="castor.dist.dir"
      location="${lib.dir}"/>
  <property name="xml.schema.file"
      location="xml/message.xsd"/>

  <!-- when running castor we want all in its classpath -->
  <path id="castor.execute.path">
      <fileset dir="${castor.dist.dir}" includes="**/*.jar"/>
  </path>

  <path id="compile.classpath">
    <fileset dir="${lib.dir}" includes="**/*.jar"/>
    <fileset dir="${axis.dist.dir}" includes="**/*.jar"/>
  </path>

  <path id="execute.classpath">
    <fileset dir="${lib.dir}" includes="**/*.jar"/>
  </path>

  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="clean" description="clean up" >
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${javadoc.dir}" />
  </target>

  <target name="compile" depends="init,castor">
    <depend srcdir="${src.dir}"
      destdir="${classes.dir}"
      cache="${build.dir}/depends"
      closure="yes"/>
    <javac
      debug="true"
      debuglevel="lines,vars,source"
      includeAntRuntime="false"
      destdir="${classes.dir}"
      target="1.2"
      classpathref="compile.classpath"
      >
      <src path="${src.dir}"/>
      <src path="${castor.src.dir}"/>
    </javac>

    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}"
        includes="**/*.xml,**/*.dtd,**/*.xsd,**/*.properties" />
    </copy>
  </target>

  <target name="dist" depends="compile"
    description="create a distribution">
    <jar destfile="${jar.file}">
      <zipfileset dir="${classes.dir}" includes="org/**/*"/>
    </jar>
  </target>

  <target name="test" depends="compile"
    description="run unit tests">
    <junit printsummary="withOutAndErr" fork="no" haltonfailure="yes">
      <classpath>
        <path refid="execute.classpath"/>
        <pathelement location="${classes.dir}"/>
      </classpath>
      <batchtest >
        <fileset dir="${src.dir}">
          <include name="**/*Test.java" />
          <exclude name="**/Net*Test.java" unless="online" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- build the Javadocs -->
  <target name="javadocs"  description="make the java docs" >
    <mkdir dir="${javadoc.dir}"/>
    <javadoc author="false"
       destdir="${javadoc.dir}"
       packagenames="org.*"
       use="true"
       version="true"
       windowtitle="Axis-Discovery"
       package="true"
       >
       <sourcepath>
         <pathelement location="src"/>
       </sourcepath>
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

  <target name="server" depends="dist"
    description="run the server">
    <java classname="org.apache.axis.discovery.server.DiscoveryServer"
        fork="true" failonerror="true">
      <classpath>
        <path refid="execute.classpath"/>
        <pathelement location="${jar.file}"/>
      </classpath>
      <arg file="doc/discovery.properties"/>
    </java>
  </target>

  <target name="client" depends="dist"
      description="run the client">
    <property name="uri" value="service:axis-discovery"/>
    <java classname="org.apache.axis.discovery.client.Client" 
      fork="true" failonerror="true">
      <classpath>
        <path refid="execute.classpath"/>
        <pathelement location="${jar.file}"/>
      </classpath>
      <arg value="${uri}"/>
    </java>
  </target>

  <target name="default" depends="dist"/>
  <target name="all" depends="dist,test,javadocs"/>

  <property name="checkstyle.project" value="discovery"/>

  <property name="checkstyle.src.dir" location="src"/>
  <property name="checkstyle.dest.dir" location="${build.dir}/checkstyle/${checkstyle.project}"/>
  <property name="checkstyle-noframes.xsl"
            location="xml/checkstyle-noframes.xsl"/>

  <!-- look for checkstyle; fail gracefully -->
  <target name="probe_checkstyle">
    <!-- classpathref="checkstyle.classpath" -->
    <available property="checkstyle.found"
      resource="checkstyletask.properties"
      />
    <fail unless="checkstyle.found">
      Unable to find the checkstyle jar on the classpath
    </fail>
    <taskdef resource="checkstyletask.properties" />
  </target>

 <target name="checkstyle" depends="init,probe_checkstyle"
    description="Check the style of a project">
    <echo message="Checking style of ${checkstyle.project}"/>
    <mkdir dir="${checkstyle.dest.dir}"/>
    <property name="report.stem" value="checkstyle-${checkstyle.project}" />
    <property name="results.xml" value="${report.stem}.xml" />
    <property name="resultsfile.xml"
      location="${checkstyle.dest.dir}/${results.xml}" />
    <property name="resultsfile.html"
      location="${checkstyle.dest.dir}/${report.stem}.html" />
    <checkstyle failOnViolation="${checkstyle.failonerror}"
                maxLineLen="80"
                allowNoAuthor="true"
                allowProtected="true"
                ignoreImports="true"
                javadocScope="nothing"
                memberPattern="^[a-z_][a-zA-Z0-9]*$"
                cacheFile="${checkstyle.dest.dir}/checkstyle.cache">
      <formatter type="plain"/>
      <formatter type="xml" toFile="${resultsfile.xml}"/>
      <fileset dir="${checkstyle.src.dir}" includes="**/*.java"/>
    </checkstyle>

    <style basedir="${checkstyle.dest.dir}" destdir="${checkstyle.dest.dir}"
           includes="${results.xml}"
           style="${checkstyle-noframes.xsl}"/>
     <echo>
      Style checked, results are in ${resultsfile.html}
     </echo>
  </target>


    <!-- poll to see if castor files need rebuilding -->
    <target name="check-castor" depends="init">
        <uptodate property="castor.uptodate"
            targetfile="${castor.touchfile}">
            <srcfiles dir="xml" includes="**/*.xsd"/>
        </uptodate>
    </target>

    <!--
    create java classes that map to our XSD description of an XFF file
  -->
    <target name="castor" depends="check-castor" unless="castor.uptodate">
        <property name="castor.generator"
            value="org.exolab.castor.builder.SourceGenerator"/>
        <java classname="${castor.generator}"
            fork="true"
            failonerror="true"
            classpathref="castor.execute.path">
            <arg value="-i"/>
            <arg file="${xml.schema.file}"/>
            <arg value="-package"/>
            <arg value="${castor.package}"/>
            <arg value="-dest"/>
            <arg file="${castor.src.dir}"/>
            <arg value="-types"/>
            <arg value="j2"/>
            <arg value="-f"/>
        </java>
        <touch file="${castor.touchfile}"/>
    </target>

    <!-- deploy to catalina -->
    <target name="deploy-catalina" depends="dist"
        description="deploy to axis on tomcat 4.x">
        <fail unless="env.CATALINA_HOME"/>
        <property name="webapp.name" value="axis" />
        <property name="deploy.webapp.dir"
            location="${env.CATALINA_HOME}/webapps/${webapp.name}" />
        <property name="deploy.lib.dir"
            location="${deploy.webapp.dir}/WEB-INF/lib" />
        <copy todir="${deploy.webapp.dir}">
            <fileset dir="web" includes="**/*" />
        </copy>
        <copy todir="${deploy.lib.dir}">
          <fileset dir="${lib.dir}" includes="castor*.jar"/>
          <fileset dir="${dist.dir}" includes="${jar.filename}"/>
        </copy>
    </target>

  
      <!-- docbook stuff -->
  <property name="fop.jar" location="${fop.home}/build/fop.jar"/>
  <property name="docbook.fo.xsl" 
    location="${docbook.home}/fo/docbook.xsl"/> 
  <property name="docbook.html.xsl" 
    location="${docbook.home}/html/docbook.xsl"/> 

  <target name="probe-docbook-dependencies">
    <condition property="fop.found">
      <and>
        <isset property="fop.home"/>
        <available file="${fop.jar}"/>
      </and>
    </condition>
    <echo level="verbose">fop.found=${fop.found} at ${fop.jar}</echo> 
    <condition property="docbook.found">
      <and>
        <isset property="docbook.home"/>
        <available file="${docbook.fo.xsl}"/>
        <available file="${docbook.html.xsl}"/>
        <isset property="fop.found"/>
      </and>
    </condition>
    <echo level="verbose">docbook.found=${docbook.found}</echo>
    
    <fail unless="docbook.found">Docbook is missing</fail>
  </target>

  
  <target name="init-docbook" 
      depends="probe-docbook-dependencies">
    <taskdef name="fop" 
      classname="org.apache.fop.tools.anttasks.Fop" >
      <classpath>
        <pathelement location="${fop.jar}"/>
        <fileset dir="${fop.home}/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
  </target>
  

  <property name="paper" value="ws-discovery"/>
  <property name="paper.src" location="${doc.dir}/${paper}.dbk"/>
  <property name="paper.fo" location="${build.dir}/doc/${paper}.fo"/>
  <property name="paper.pdf" location="${build.dir}/doc/${paper}.pdf" />
  <property name="paper.html" location="${build.dir}/doc/${paper}.html" />
  
  <target name="doc-pdf" depends="init-docbook"
          description="Produces the PDF version of the paper">
    <xslt style="${docbook.fo.xsl}" 
      in="${paper.src}" out="${paper.fo}" />
  <java 
    classname="org.apache.fop.apps.Fop"
    fork="true"
    failonerror="true"
    >
    <arg value="-q"/>
    <arg value="${paper.fo}"/>
    <arg value="-pdf"/>
    <arg file="${paper.pdf}"/>
    <classpath>
      <pathelement location="${fop.home}/build/fop.jar"/>
    <fileset dir="${fop.home}/lib">
      <include name="**/*.jar"/>
    </fileset>
    </classpath>
  </java>
  
<!--     <exec executable="cmd.exe" os="Windows XP">
      <arg line="/c java -Djava.ext.dirs=${tools}\lib\fop-0.20.3 
          -jar ${tools}\lib\fop-0.20.3.jar -q temp/${paper}.fo -pdf ${paper}.pdf" />
    </exec>    
 --> 
 </target>
  
  <target name="doc-html" depends="init-docbook"
          description="Produces the HTML version of the paper">
    <xslt style="${docbook.html.xsl}" in="${paper.src}" out="${paper.html}" />
  </target>
    
  <target name="doc" depends="doc-html,doc-pdf"/>  
</project>
