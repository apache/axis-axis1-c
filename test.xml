<project name="test" default="testSuite">

	<import file="${basedir}/build/buildInitialize.xml"/>
	<import file="${basedir}/build/testInitialize.xml"/>
	<import file="${basedir}/build/buildTest.xml"/>
	<import file="${basedir}/build/validateTest.xml"/>
	<import file="${basedir}/build/buildHandler.xml"/>
	<import file="${basedir}/build/executeTest.xml"/>
	<import file="${basedir}/build/buildMonitor.xml"/>


	<!--
	  Default target that set all the required framework to build, run and report on the tests
	  -->
	<target name="testSuite" depends="initialize, initializeTest, compileMonitorUtility, initializeLogFile, runTests, displayAllResults"
	 description="Build and Run all tests"/>

	<!--
	  Loop through all the test xml properties files in the tests
	  list and call runTest target
	  -->
	<target name="runTests" depends="setTestList">
		<foreach target="runTest" param="test_property" inheritall="true">
			<path refid="test_properties"/>
		</foreach>
	</target>

	<!--
	  Set the list of tests to run to either all tests, an individual test, or a selection of tests
	  -->
	<target name="setTestList" depends="setListType,setIndividual,setFromList,setAll"/>

	<target name="setListType">
		<condition property="allTest">
			<and>
				<not>
					<isset property="test.name"/>
				</not>
				<not>
					<isset property="test.list"/>
				</not>
			</and>
		</condition>
	</target>

	<!--
	  Create a list of all the tests
	  -->
	<target name="setAll" if="allTest">
		<echo message="setAll ${dir.autotests}/tests"/>
		<path id="test_properties">
			<fileset dir="${dir.autotests}/tests" includes="*.xml"/>
		</path>
	</target>

	<!--
	  Create a list of just 1 test from command line parameter -Dtest.name=
	  -->
	<target name="setIndividual" if="test.name">
		<echo message="setIndividual ${test.name}"/>
		<path id="test_properties">
			<fileset dir="${dir.autotests}/tests" includes="${test.name}.xml"/>
		</path>
	</target>

	<!--
	  Create a list of tests from a properties file unless an individual test has been specified too
	  -->
	<target name="setFromList" if="test.list" unless="test.name">
		<echo message="setFromList ${test.list}"/>
		<path id="test_properties">
			<fileset dir="${dir.autotests}/tests" includesfile="${test.list}"/>
		</path>
	</target>

	<!--
	  For the specified test_property test load the properties files and derive
	  any other required properties, compile the test client, set the endpoint
	  if required, run the test, and validate if successful.
	  * setPropertiesForTest is in testInitialize.xml
	  * validateTest is in validateTest.xml
	  -->
	<target name="runTest" depends="setPropertiesForTest,cleanTest,buildTest,executeTestRun,validateTest"/>

	<target name="cleanTest">
		<delete dir="${dir.test.generated}/${client.lang}/${testName}"/>
	</target>

	<!--
	  Build test
	  -->
	<target name="buildTest" depends="setPropertiesForThisTest, compileTestClient, validateClientCompilation, createConfigurationFile, compileHandlers"/>

	<target name="setPropertiesForThisTest" depends="checkIfRequestFile">
		<property name="test.directory" value="${dir.test.generated}/${client.lang}/${testName}"/>
		<property name="expected.file" value="${test.directory}/${testName}.expected"/>
		<property name="r_expected.file" value="${test.directory}/${testName}Request.expected"/>
		<property name="results.stdout" value="${test.directory}/${testName}.out"/>
		<property name="results.stderr" value="${test.directory}/${testName}.err"/>
	</target>

	<target name="checkIfRequestFile" if="testExpectedRequest">
		<available file="${dir.autotests}/output/${testExpectedRequest}" property="requestFileExists"/>
	</target>

	<target name="compileTestClient">
		<antcall target="compileClient" inheritall="true">
			<param name="wsdl.test" value="${dir.autotests}/wsdls/${testWsdl}"/>
			<param name="client.code" value="${dir.autotests}/client/${client.lang}/${testCode}"/>
		</antcall>
	</target>

	<target name="executeTestRun">
		<antcall target="executeTest" inheritall="true">
			<param name="test.directory" value="${dir.test.generated}/${client.lang}/${testName}"/>
		</antcall>
	</target>

	<!--
	  When the test run has finished display the results file
	  -->
	<target name="displayAllResults">
		<loadfile property="results" srcFile="${results.log}"/>
		<echo message="${results}"/>
	</target>


</project>
