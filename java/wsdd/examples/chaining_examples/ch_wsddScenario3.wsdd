<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XML Spy v3.5 NT (http://www.xmlspy.com) by Steve Graham (IBM) -->
<deployments name="wsddScenario3" xmlns="http://xml.apache.org/axis/wsdd" xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance" xsi:schemaLocation="http://xml.apache.org/axis/wsdd
C:\xml-axis\java\wsdd\WSDD.xsd">
	<documentation>
    A simple serviceDeployment descriptor is used to describe the service.
    The type is not needed either, as it reflects the default choice (simpleTargetedChain).
    This defines a simple input chain of 2 handlers, a simple output chain of 2 handlers.
    This shows use of parm to configure options on inputHandler2.
    
    This shows the appearance of fault flow, and hence will generate a faultable handler
    around the invocation of the simpleTargetedChain representing the service.
  	</documentation>
	<serviceConfiguration name="urn:wsddScenario3-service1" type="org.apache.axis.SimpleTargetedChain">
		<serviceDeployment>
			<provider java:className="samples.wsdd.wsddScenario3" xmlns:java="http://xml.apache.org/axis/providers/java"/>
		</serviceDeployment>
		<flow flowType="request" type="org.apache.axis.SimpleChain">
			<documentation src="urn:unused">The input chain does not need to define type, as this is default
    when more than one handler is specified within the flow
    			</documentation>
			<handler id="inputHandler1" type="samples.handlers.testHandler1"/>
			<handler id="inputHandler2" type="samples.handlers.testHandler1">
				<parameter name="parm1">inputHandler2</parameter>
			</handler>
		</flow>
		<flow flowType="response">
			<documentation src="urn:unused">The even though no type is specified, the default chain type is taken
      because more than one handler is specified
    			</documentation>
			<handler id="outputHandler1" type="samples.handlers.testHandler2"/>
			<handler id="outputHandler2" type="samples.handlers.testHandler2"/>
		</flow>
		<flow flowType="fault">
			<documentation>The appearance of one or more fault flows will generate a faultableHandler
      			 wrappered around the serviceHandler.  Test handler 3 and 4 will be run if any faults
       		happen within the input chain, pivot or output chain.
    			</documentation>
			<handler id="faultHandler1" type="samples.handlers.testHandler3"/>
			<handler id="faultHandler2" type="samples.handlers.testHandler4"/>
		</flow>
	</serviceConfiguration>
</deployments>
