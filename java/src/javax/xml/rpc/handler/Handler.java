/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 2001 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Axis" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package javax.xml.rpc.handler;

import java.util.Map;

import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFault;

/**
 * A handler provides a mechanism for processing of service
 * context, plugging in additional RPC processing behavior and
 * enhancing functionality of a JAX-RPC runtime system.
 * <p>A JAX-RPC handler is required to implement the
 * <code>javax.xml.rpc.handler.Handler</code> interface.
 */
public interface Handler {

    /**
     * The handle method performs the actual processing work for
     * a handler. An implementation class for the Handler interface
     * is required to provide a default constructor.
     *  @param   context MessageContext parameter provides access to
     *            the message context (for example: SOAP message
     *            that carries an RPC request) that is processed
     *            by a handler.
     *  @throws  JAXRPCException if any handler specific processing
     *            error happens
     *  @throws  SOAPFault if SOAP fault is generated by this handler
     */
    public abstract void handle(MessageContext context)
        throws JAXRPCException, SOAPFault;

    /**
     * The init method to enable the Handler instance to initialize
     * itself. The init method passes the handler configuration
     * properties as a Map instance. These configuration properties
     * are used to configure the Handler (for example: setup access
     * to an external resource or service) during initialization.
     *  @param   config Configuration parameters for initialization of
     *          handler
     *  @throws  JAXRPCException If initialization of the handler fails
     */
    public abstract void init(Map config) throws JAXRPCException;

    /**
     * The destroy method indicates the end of lifecycle for a Handler
     * instance. An Handler implementation class should release any
     * resources that it had acquired over its lifecycle. The JAX-RPC
     * runtime system invokes the destroy method, when the Handler
     * instance is no longer needed.
     * @throws  JAXRPCException  If any error during destroy
     */
    public abstract void destroy() throws JAXRPCException;
}
