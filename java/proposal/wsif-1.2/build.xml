<?xml version="1.0"?>

<!-- ==================================================================

   Build file for WSIF

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org
   A JAXP-compliant DOM parser.
     - Xerces, from http://xml.apache.org, works fine.
   WSDL4J
   Apache Soap 2.2

Optional additions:
   SoapRMI from http://www.extreme.indiana.edu/soap/

Build Instructions:
   To build, run

     java org.apache.tools.ant.Main <target>

   on the directory where this file is located with the target you want.

Main targets:

 - compile  -> creates the "wsif.jar" package in "./build/lib"
 - javadocs -> creates the javadocs in "./build/javadocs"
 - bindist  -> creates the complete binary distribution
 - srcdist  -> creates the complete src distribution
 - proddist -> creates the distribution containing files to be used in products

Author:
  Aleksander Slominski <aslom@us.ibm.com>
  Matthew J. Duftler <duftler@us.ibm.com>
  Jeremy Hughes <Jeremy.Hughes@uk.ibm.com>
  
==================================================================== -->

<project default="compile" basedir=".">

  <target name="init">
    <property name="Name" value="WSIF"/>
    <property name="name" value="wsif"/>
    <property name="dynamic.name" value="wsif-dynamic"/>
    <property name="Name" value="wsif"/>
    <property name="wsif.version" value="1.2"/>
    <property name="year-from" value="2001"/>
    <property name="year-to" value="2002"/>

    <property name="build.compiler" value="classic"/>
    <property name="debug" value="off"/>

    <property name="src.dir" value="src"/>
    <property name="docs.dir" value="./doc"/>
    <property name="samples.dir" value="./samples"/>
    <property name="generated.dir" value="./generated"/>
    <property name="alphaworks.dir" value="./alphaworks"/>

    <property name="packages"
              value="com.ibm.wsif.*"/>

    <property name="build.file" value="build.xml"/>

    <property name="build.dir" value="./build"/>
    <property name="build.dest" value="./build/classes"/>
    <property name="dynamic.dest" value="./build/classes"/>
    <property name="build.lib" value="./build/lib"/>
    <property name="build.samples" value="./build/samples"/>
    <property name="build.generated" value="./build/samples/generated"/>
    <property name="build.javadocs" value="./build/javadocs"/>

    <property name="jar" value="${build.dir}/lib/${name}.jar"/>
    <property name="jar_complete" value="${build.dir}/lib/${name}-all-${wsif.version}.jar"/>
    <property name="wsdl4j_jar" value="lib/wsdl4j.jar"/>


    <property name="dist.dir" value="${build.dir}/${name}-${wsif.version}"/>
    <property name="dist.bin.file"
              value="build/${name}-bin-${wsif.version}.zip"/>
    <property name="dist.alphaworks.dir"
              value="${build.dir}/${name}-alphaworks-${wsif.version}"/>
    <property name="dist.alphaworks.file"
              value="${build.dir}/${name}-alphaworks-${wsif.version}.zip"/>
    <property name="dist.src.file"
              value="${build.dir}/${name}-src-${wsif.version}.zip"/>
    <property name="dist.product.file"
              value="${build.dir}/${name}-product-${wsif.version}.zip"/>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>

    <uptodate property="javac.notRequired"
              targetfile="${jar}">
      <srcfiles dir="${src.dir}">
        <patternset refid="javac.source.files"/>
      </srcfiles>
    </uptodate>

    <uptodate property="javadoc.required"
              targetfile="${jar}">
      <srcfiles dir="${build.dir}" includes="**/*.html"/>
    </uptodate>
    <available property="soaprmi.present" classname="soaprmi.Remote" />

  </target>

  <target name="checkSoapRMI" unless="soaprmi.present">
    <echo message="Warning: SoapRMI dependencies were not resolved."/>
  </target>

  <target name="checkDependencies" depends="prepare" unless="javac.notRequired">
    <antcall target="checkSoapRMI"/>
  </target>

  <!-- =================================================================== -->
  <!-- Source files to be compiled                                         -->
  <!-- =================================================================== -->

  <patternset id="dynamic.source.files">
    <include name="**/wsif/**/*.java"/>
    <include name="**/wsdl/**/*.java"/>
    <include name="**/jrom/**/*.java"/>
    <exclude name="**/compiler/**/*.java"/>
    <exclude name="**/wsif/**/*SoapRMI.java"/>
  </patternset>

  <patternset id="soaprmi.source.files">
    <include name="**/wsif/**/*SoapRMI.java"/>
  </patternset>

  <patternset id="compiler.source.files">
    <include name="**/compiler/**/*.java"/>
  </patternset>

  <patternset id="javac.source.files">
    <include name="**/*.java"/>
  </patternset>

  <patternset id="samples.source.files">
    <include name="**/*.java"/>
    <exclude name="**/*addressbook_*/**"/>
    <exclude name="**/*weather*/**"/>
  </patternset>
  
  <!-- =================================================================== -->
  <!-- Compiles all (clean + compile + samples + dynamic)                  -->
  <!-- =================================================================== -->
  <target name="all" depends="clean,compile,compiler,link"/>

  <target name="compile" depends="dynamic,soaprmi,samples"/>


  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="dynamic" depends="checkDependencies">
    <mkdir dir="${dynamic.dest}"/>
    <javac srcdir="${src.dir}" destdir="${dynamic.dest}" debug="${debug}">
      <patternset refid="dynamic.source.files"/>
    </javac>
  </target>

  <target name="soaprmi" depends="dynamic" if="soaprmi.present">
    <javac srcdir="${src.dir}" destdir="${dynamic.dest}" debug="${debug}">
      <patternset refid="soaprmi.source.files"/>
    </javac>
  </target>


  <!-- =================================================================== -->
  <!-- Create compiler classes                                             -->
  <!-- =================================================================== -->
  <target name="compiler" depends="prepare">
    <mkdir dir="${dynamic.dest}"/>
    <javac srcdir="${src.dir}" destdir="${dynamic.dest}" debug="${debug}">
      <patternset refid="compiler.source.files"/>
    </javac>

  </target>



  <!-- =================================================================== -->
  <!-- Create WSIF JAR                                                     -->
  <!-- =================================================================== -->
  <target name="link" depends="dynamic, compiler">

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${jar}" basedir="${src.dir}"
         includes="**/*.properties,**/META-INF/services/*" />
    <jar jarfile="${jar}" basedir="${build.dest}" update="true" />

    <uptodate property="javadoc.required"
              targetfile="${jar}">
      <srcfiles dir="${build.dir}" includes="**/*.html"/>
    </uptodate>
  
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples                                                -->
  <!-- =================================================================== -->
  <target name="generated" depends="dynamic">
    <mkdir dir="${build.generated}"/>
    <javac srcdir="generated" destdir="${build.generated}"
           classpath="${dynamic.dest}" debug="${debug}">
    </javac>

    <copy todir="${build.generated}">
      <fileset dir="${generated.dir}"/>
    </copy>
  </target>

  <target name="samples" depends="dynamic, generated">
    <mkdir dir="${build.samples}"/>
    <javac srcdir="samples" destdir="${build.samples}" 
           classpath="${dynamic.dest}:${build.generated}" debug="${debug}">
      <patternset refid="samples.source.files"/>
    </javac>

    <copy todir="${build.samples}">
      <fileset dir="${samples.dir}">
       <exclude name="**/*addressbook_*/**"/>
       <exclude name="**/*weather*/**"/>      
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             public="true"
             windowtitle="${Name} ${wsif.version} API"
             doctitle="${Name} ${wsif.version}"
             bottom="Copyright &#169; ${year-from}, ${year-to} IBM. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation if necessary                          -->
  <!-- =================================================================== -->
  <target name="javadocsIfRequired" if="javadoc.required" depends="prepare">
    <antcall target="javadocs"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the binary distribution  - with src                         -->
  <!-- =================================================================== -->
  <target name="prepare-dist" depends="compile, link, javadocsIfRequired, samples">
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/doc"/>
    <mkdir dir="${dist.dir}/doc/api"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/samples"/>

    <copy todir="${dist.dir}/doc/api">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${dist.dir}/samples">
      <fileset dir="${build.samples}">
        <include name="**"/>
        <exclude name="**/.#*"/>
        <exclude name="**/addressbook_*/**"/>
        <exclude name="**/weather*/**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/doc">
      <fileset dir="${docs.dir}">
        <include name="*.txt"/>
        <include name="*.html"/>
      </fileset>
    </copy>
    <copy file="README.html" tofile="${dist.dir}/README.html"/>
    <!--copy file="LICENSE.txt" tofile="${dist.dir}/LICENSE.txt"/-->
<!--
    <copy file="ReleaseNotes.html" tofile="${dist.dir}/ReleaseNotes.html"/>
-->
  </target>
  
  <!-- ================================================================= -->
  <!-- Creates the binary distribution                                   -->
  <!-- ================================================================= -->
  <target name="bindist" depends="prepare-dist">
    <copy todir="${dist.dir}/lib" file="${jar}"/>
    <copy todir="${dist.dir}/lib" file="${wsdl4j_jar}"/>
    <zip zipfile="${dist.bin.file}" basedir="${build.dir}"
       includes="${name}-${wsif.version}/**"/>
    
    <!-- now create the product distribution zip file -->
    <zip zipfile="${dist.product.file}" basedir="${dist.dir}"
       includes="lib/**.jar"/>
  </target>


  <!-- ================================================================= -->
  <!-- Creates the distribution for alphaworks                           -->
  <!-- ================================================================= -->
  <target name="alphaworks" depends="bindist">
    <mkdir dir="${dist.alphaworks.dir}"/>
    <copy todir="${dist.alphaworks.dir}">
      <fileset dir="${docs.dir}">
        <include name="*.txt"/>
      </fileset>
    </copy>
    <copy todir="${dist.alphaworks.dir}" file="${dist.bin.file}"/>

    <zip zipfile="${dist.alphaworks.file}" basedir="${dist.alphaworks.dir}/"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                     -->
  <!-- =================================================================== -->
  <target name="srcdist" depends="prepare">
    <delete dir="${dist.dir}"/>

    <copy todir="${dist.dir}/src">
      <fileset dir="${src.dir}">
          <include name="com/**"/>
          <include name="META-INF/**"/>
          <exclude name="**/.#*"/>
      </fileset>
    </copy>

    <copy file="${build.file}" tofile="${dist.dir}/${build.file}"/>

    <zip zipfile="${dist.src.file}" basedir="${build.dir}"
       includes="${name}-${wsif.version}/**"/>

  </target>

  <!-- =================================================================== -->
  <!-- Creates the product distribution                                    -->
  <!-- =================================================================== -->
  <target name="proddist" depends="bindist">
    <zip zipfile="${dist.product.file}" basedir="."
       includes="${wsdl4j_jar}"/>
    <zip zipfile="${dist.product.file}" basedir="${build.dir}"
       update="true" includes="lib/${name}.jar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>
</project>
