<?xml version="1.0"?>

<!-- ===================================================================

   Build file for Axis

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org

Optional components:
   SOAP Attachment support enablement:
     activation.jar from http://java.sun.com/products/javabeans/glasgow/jaf.html
     mailapi.jar    from http://java.sun.com/products/javamail/
   Security support enablement:
     xmlsec.jar from fresh build of CVS from http://xml.apache.org/security/
     Other support jars from http://cvs.apache.org/viewcvs.cgi/xml-security/libs/

Build Instructions:
   To build, run

     java org.apache.tools.ant.Main <target>

   on the directory where this file is located with the target you want.

Most useful targets:

 - compile  -> creates the "axis.jar" package in "./build/lib"
 - javadocs -> creates the javadocs in "./build/javadocs"
 - dist     -> creates the complete binary distribution
 - srcdist  -> creates the complete src distribution
 - functional-tests -> attempts to build Ant task and then run client-server functional test

Custom post-compilation work:

   If you desire to do some extra work as a part of the build after the
   axis.jar is assembled, simply create an ant buildfile called
   "post-compile.xml" in this directory.  The build will automatically
   notice this and run it at the appropriate time.  This is handy for
   updating the jar file in a running server, for instance.

Authors:
  Sam Ruby <rubys@us.ibm.com>
  Matthew J. Duftler <duftler@us.ibm.com>
  Glen Daniels <gdaniels@macromedia.com>

Copyright:
  Copyright (c) 2001 Apache Software Foundation.

==================================================================== -->

<project default="compile" basedir=".">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>
  
  <property name="axis.version" value="beta1"/>

  <property name="name" value="axis"/>
  <property name="Name" value="Axis"/>
  <property name="year" value="2001"/>

  <property name="jaxrpc" value="jaxrpc"/>

  <!-- debug flag for ant javac, values are "on" and "off" -->
  <property name="debug" value="on"/>  

  <property name="deprecation" value="true"/>

  <property name="src.dir" value="./src"/>
  <property name="docs.dir" value="./docs"/>
  <property name="samples.dir" value="./samples"/>
  <property name="test.dir" value="./test"/>
  <property name="lib.dir" value="./lib"/>

  <property name="wsdl4j.jar" value="lib/wsdl4j.jar"/>
  <property name="commons-logging.jar" value="lib/commons-logging.jar"/>
  <property name="log4j-core.jar" value="lib/log4j-core.jar"/>
  <property name="tt-bytecode.jar" value="lib/tt-bytecode.jar"/>

  <property name="regexp.jar" value="test/lib/jakarta-oro-2.0.5.jar"/>

  <property name="junit.jar" value="lib/junit.jar"/>

  <property name="packages" value="org.*,javax.*"/>

  <property name="build.file" value="build.xml"/>

  <property name="build.dir" value="build"/>
  <property name="build.dest" value="build/classes"/>
  <property name="build.lib" value="build/lib"/>
  <property name="build.samples" value="build/classes/samples"/>
  <property name="build.javadocs" value="build/javadocs"/>
  <property name="build.webapp" value="build/webapps/axis"/>

  <property name="webapp" value="webapps/axis"/>

  <property name="dist.dir" value="axis-1_0"/>

  <property name="test.functional.usefile" value="true"/>

  <!-- =================================================================== -->
  <!-- Determine what dependencies are present                             -->
  <!-- =================================================================== -->
  <path id="classpath">
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${regexp.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${excalibur.jar}"/>
    <pathelement location="${j2ee.jar}"/>
    <pathelement location="${java.home}/../lib/tools.jar"/>
    <fileset dir="lib">
     <include name="*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}"/>
  </path>

  <target name="setenv">
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>

    <available property="servlet.present"
      classname="javax.servlet.Servlet"
      classpathref="classpath"/>

    <available property="regexp.present"
      classname="org.apache.oro.text.regex.Pattern"
      classpathref="classpath"/>

    <available property="junit.present"
      classname="junit.framework.TestCase"
      classpathref="classpath"/>

    <available property="wsdl4j.present"
      classname="javax.wsdl.Definition"
      classpathref="classpath"/>

    <available property="commons-logging.present"
      classname="org.apache.commons.logging.Log"
      classpathref="classpath"/>

    <available property="log4j.present"
      classname="org.apache.log4j.Category"
      classpathref="classpath"/>

    <available property="tt-bytecode.present"
      classname="com.techtrader.modules.tools.bytecode.BCClass"
      classpathref="classpath"/>

    <available property="serp.present"
      classname="serp.bytecode.Project"
      classpathref="classpath"/>

    <available property="activation.present"
      classname="javax.activation.DataHandler"
      classpathref="classpath"/>

    <available property="security.present"
      classname="org.apache.xml.security.Init"
      classpathref="classpath"/>

    <available property="mailapi.present"
      classname="javax.mail.internet.MimeMessage"
      classpathref="classpath"/>

    <condition property="attachments.present" >
      <and>
        <available classname="javax.activation.DataHandler" classpathref="classpath" />
        <available classname="javax.mail.internet.MimeMessage" classpathref="classpath" />
      </and>
    </condition>

    <available property="post-compile.present" file="post-compile.xml" />

    <property environment="env"/>
    <condition property="debug" value="on">
    <and>
      <equals arg1="on" arg2="${env.debug}"/>
    </and>
    </condition>


    <echo message="--- Build environment for ${Name} ---" />
    <echo message="--- Flags (Note: If the {property name} is displayed, "/>
    <echo message="           then the component is not present)" />
    <echo message=""/>
    <echo message="=== Required Libraries ===" />
    <echo message="wsdl4j.present=${wsdl4j.present}" />
    <echo message="commons-logging.present=${commons-logging.present}" />
    <echo message="log4j.present=${log4j.present}" />
    <echo message="tt-bytecode.present=${tt-bytecode.present}" />
    <echo message=""/>
    <echo message="--- Optional Libraries ---" />
    <echo message="servlet.present=${servlet.present}" />
    <echo message="regexp.present=${regexp.present}" />
    <echo message="junit.present=${junit.present}" />
    <echo message="activation.present=${activation.present}" />
    <echo message="mailapi.present=${mailapi.present}" />
    <echo message="attachments.present=${attachments.present}" />
    <echo message="security.present=${security.present}" />
    <echo message=""/>
    <echo message="--- Property values ---" />
    <echo message="debug=${debug}" />
    <echo message="deprecation=${deprecation}" />
    <!-- Set environment variable axis_nojavadocs=true  to never generate javadocs. Case sensative! -->
    <echo message="axis_nojavadocs=${env.axis_nojavadocs}"/>

    <uptodate property="javadoc.notoutofdate"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>

    <condition property="axis_nojavadocs" value="true">
      <equals arg1="true" arg2="${env.axis_nojavadocs}"/>
    </condition>
    <condition property="axis_nojavadocs" value="false">
      <equals arg1="${axis_nojavadocs}" arg2="$${axis_nojavadocs}"/>
    </condition>

    <condition property="javadoc.notrequired" value="true">
    <or>
      <equals arg1="${javadoc.notoutofdate}" arg2="true"/>
      <equals arg1="true" arg2="${axis_nojavadocs}"/>
    </or>
    </condition>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="setenv">
    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
      <exclude name="**/old/**/*" />
      <exclude name="**/bak/**"/>
      <exclude name="**/org/apache/axis/attachments/AttachmentsImpl.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/AttachmentPart.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/AttachmentUtils.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/MimeUtils.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/ManagedMemoryDataSource.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/MultiPartRelatedInputStream.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/BoundaryDelimitedStream.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/configuration/ServletEngineConfigurationFactory.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerSerializer.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerDeserializerFactory.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerSerializerFactory.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerDeserializer.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/handlers/MD5AttachHandler.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/transport/http/AdminServlet.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/http/AxisHttpSession.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/http/AxisServlet.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/server/JNDIAxisServerFactory.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/security/servlet/*" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/utils/bytecode/TechTrader*" unless="tt-bytecode.present"/>
      <exclude name="**/org/apache/axis/utils/bytecode/Serp*" unless="serp.present"/>
      <exclude name="**/javax/xml/soap/*.java" unless="attachments.present"/>
      <exclude name="**/javax/xml/rpc/handler/soap/*.java" unless="attachments.present"/>
      <exclude name="**/*TestSuite.java" unless="junit.present"/>
    </javac>
    <copy file="${src.dir}/org/apache/axis/server/server-config.wsdd"
          toDir="${build.dest}/org/apache/axis/server"/>
    <copy file="${src.dir}/org/apache/axis/client/client-config.wsdd"
          toDir="${build.dest}/org/apache/axis/client"/>
    <copy file="${src.dir}/log4j.properties"
          toDir="${build.dest}"/>
    <copy file="${src.dir}/org/apache/axis/utils/axisNLS.properties"
          toDir="${build.dest}/org/apache/axis/utils"/>

    <tstamp>
      <format property="build.time" pattern="MMM dd, yyyy (hh:mm:ss z)"/>
    </tstamp>
    <replace file="${build.dest}/org/apache/axis/utils/axisNLS.properties"
             token="#today#" value="${build.time}"/>
    <replace file="${build.dest}/org/apache/axis/utils/axisNLS.properties"
             token="#axisVersion#" value="${axis.version}"/>
  
    <jar jarfile="${build.lib}/${name}.jar" basedir="${build.dest}" >
      <include name="org/**" />
      <include name="log4j.properties"/>
    </jar>
    <jar jarfile="${build.lib}/${jaxrpc}.jar" basedir="${build.dest}" >
      <include name="javax/**"/>
    </jar>
    <copy file="${wsdl4j.jar}" toDir="${build.lib}"/>
    <copy file="${commons-logging.jar}" toDir="${build.lib}"/>
    <copy file="${log4j-core.jar}" toDir="${build.lib}"/>
    <copy file="${tt-bytecode.jar}" toDir="${build.lib}"/>
    <antcall target="post-compile"/>
  </target>

  <!-- =================================================================== -->
  <!-- Custom post-compilation step                                        -->
  <!-- =================================================================== -->
  <target name="post-compile" if="post-compile.present">
   <ant antfile="post-compile.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples                                                -->
  <!-- =================================================================== -->
  <target name="samples" depends="compile">

  <!-- The interop echo sample depends on the wsdl2java task -->    
    <javac srcdir="." destdir="${build.dest}"
           debug="${debug}">
      <classpath>
        <pathelement location="${build.lib}/${name}.jar"/>
        <pathelement location="${build.lib}/${jaxrpc}.jar"/>
        <path refid="classpath"/>
      </classpath>
      <include name="test/wsdl/*.java" />
    </javac>

    <taskdef name="wsdl2java"
           classname="test.wsdl.Wsdl2javaAntTask">
             <classpath refid="test-classpath" />
    </taskdef>

    <!-- Create java files for the echo sample -->
    <wsdl2java url="samples/echo/InteropTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="no"
               noimports="no"
               verbose="no"
               typeMappingVersion="1.1"
               testcase="no">
        <mapping namespace="http://soapinterop.org/" package="samples.echo"/>
        <mapping namespace="http://soapinterop.org/xsd" package="samples.echo"/>
    </wsdl2java>

    <!-- Compile the echo sample generated java files -->
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="${debug}">
      <classpath refid="test-classpath" />
      <include name="samples/echo/**.java" />
    </javac>

    <!-- AddressBook Sample -->
    <wsdl2java url="samples/addr/AddressBook.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               typeMappingVersion="1.1"
               testcase="no">
        <mapping namespace="urn:AddressFetcher2" package="samples.addr"/>
    </wsdl2java>
    
    <!-- Compile the echo sample generated java files -->
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="${debug}">
      <classpath refid="test-classpath" />
      <include name="samples/addr/**.java" />
    </javac>


    <!-- Compile the sample code -->
    <javac srcdir="." destdir="${build.dest}"
           debug="${debug}">
      <classpath>
        <pathelement location="${build.lib}/${name}.jar"/>
        <pathelement location="${build.lib}/${jaxrpc}.jar"/>
        <path refid="classpath"/>
      </classpath>
      <include name="samples/**/*.java" />
      <exclude name="samples/**/*SMTP*.java" unless="smtp.present" />
      <exclude name="**/old/**/*.java" />
      <exclude name="samples/userguide/example2/Calculator.java"/>
<!--      <exclude name="samples/addr/*.java" /> -->
      <exclude name="samples/addr/AddressBookTestCase.java" unless= "junit.present"/>
      <exclude name="samples/userguide/example6/Main.java" />
      <exclude name="samples/userguide/example6/*Impl.java" />
      <exclude name="samples/userguide/example6/*TestCase.java" />
      <exclude name="samples/attachments/**/*.java" unless="attachments.present" />
      <exclude name="samples/security/**/*.java" unless="security.present"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the JUnit testcases -->
  <!-- =================================================================== -->

  <path id="test-classpath">
    <pathelement location="${build.dest}" />
    <path refid="classpath"/>
  </path>

  <target name="buildTest" if="junit.present" depends="compile,samples">
    <echo message="junit package found ..."/>
    <!-- Start by building the testcases -->
    <javac srcdir="." destdir="${build.dest}"
           debug="${debug}">
      <classpath>
        <pathelement location="${build.lib}/${name}.jar"/>
        <pathelement location="${build.lib}/${jaxrpc}.jar"/>
        <path refid="classpath"/>
      </classpath>
      <include name="test/**/*.java" />
      <exclude name="test/lib/*.java"/>
      <exclude name="test/inout/*.java" />
      <exclude name="test/wsdl/*/*.java" />
      <exclude name="test/wsdl/interop3/groupE/**/*.java" />
      <exclude name="test/wsdl/interop3/**/*.java" />
      <exclude name="test/wsdl/Wsdl2javaTestSuite.java" unless="servlet.present"/>
      <exclude name="test/md5attach/*.java" unless="attachments.present"/>
      <exclude name="test/functional/TestAttachmentsSample.java" unless="attachments.present"/>
    </javac>
    <copy file="test/wsdd/testStructure1.wsdd" toDir="${build.dest}/test/wsdd"/>
  </target>


  <!-- =================================================================== -->
  <!-- Runs the JUnit package testcases -->
  <!-- =================================================================== -->
  <target name="junit" if="junit.present" depends="samples,buildTest">
    <mkdir dir="${basedir}/test-reports" />
    <junit printsummary="yes" haltonfailure="yes" fork="yes">
      <classpath refid="test-classpath" />
      <formatter type="xml" />
      <batchtest todir="test-reports">
        <fileset dir="${build.dir}/classes">
          <!-- Convention: each package that's being tested
                has its own test class collecting all the tests -->
          <include name="**/PackageTests.class" />
          <!-- <include name="**/test/*TestSuite.class"/> -->
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Functional tests, no dependencies (for no-build testing)            -->
  <!-- =================================================================== -->
  <target name="functional-tests-only" depends="setenv">

    <!-- The Axis Ant task must be built (into ANT_HOME/lib)... -->
    <ant antfile="test/build_ant.xml" />

    <!--
    ...and then the functional tests can be run.  If this step yields a
    "can't find class test.functional.ant.RunAxisFunctionalTestsTask",
    verify that your Ant classpath contains ANT_HOME/lib.
    -->

  </target>

  <!-- =================================================================== -->
  <!-- Functional tests, no server (for testing under debugger)            -->
  <!-- =================================================================== -->
  <target name="functional-tests-noserver" depends="buildTest, samples">
    <ant antfile="test/build_functional_tests.xml" target="junit-functional-noserver">
      <property name="test.functional.usefile" value="${test.functional.usefile}"/>
    </ant>

  </target>

  <!-- =================================================================== -->
  <!-- Functional tests, with server                                       -->
  <!-- =================================================================== -->
  <target name="functional-tests" depends="buildTest, samples">
    <ant antfile="test/build_functional_tests.xml">
      <property name="test.functional.usefile" value="${test.functional.usefile}"/>
    </ant>
  </target>

  <!-- All tests -->
  <target name="all-tests" depends="junit, functional-tests">
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="setenv" unless="javadoc.notrequired">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             classpathref="classpath"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Apache XML Project. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Build/Test EVERYTHING from scratch!                                 -->
  <!-- =================================================================== -->
  <target name="all" depends="dist, functional-tests"/>

  <!-- =================================================================== -->
  <!-- Creates a war file for testing                                      -->
  <!-- =================================================================== -->
  <target name="war" depends="compile, samples" >
    <mkdir dir="${build.webapp}"/>
    <copy todir="${build.webapp}">
      <fileset dir="${webapp}"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/lib">
      <fileset dir="${build.lib}"/>
    </copy>
    <copy todir="${build.webapp}/samples">
      <fileset dir="./samples"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/classes/samples">
      <fileset dir="${build.samples}"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF">
      <fileset dir="${samples.dir}/stock">
        <include name="*.lst"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${build.webapp}" includes="**/CVS"/>
    </delete>
    <jar jarfile="${build.dir}/${name}.war" basedir="${build.webapp}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the binary distribution                                     -->
  <!-- =================================================================== -->
  <target name="javadocsdist" depends="javadocs" unless="javadoc.notrequired">
    <mkdir dir="${dist.dir}/docs"/>
    <mkdir dir="${dist.dir}/docs/apiDocs"/>
    <copy todir="${dist.dir}/docs/apiDocs">
      <fileset dir="${build.javadocs}"/>
    </copy>
  </target>
  <target name="dist" depends="compile, javadocsdist, samples, junit" >
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/samples"/>
    <mkdir dir="${dist.dir}/webapps/axis"/>

    <copy todir="${dist.dir}/lib">
      <fileset dir="${build.lib}"/>
    </copy>
    <copy todir="${dist.dir}/samples">
      <fileset dir="${build.samples}"/>
      <fileset dir="./samples"/>
    </copy>
    <copy todir="${dist.dir}/docs">
      <fileset dir="${docs.dir}"/>
    </copy>
    <copy todir="${dist.dir}/webapps/axis">
      <fileset dir="${webapp}"/>
    </copy>
    <copy todir="${dist.dir}/webapps/axis/WEB-INF">
      <fileset dir="${samples.dir}/stock">
        <include name="*.lst"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/webapps/axis/WEB-INF/lib">
      <fileset dir="${build.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/webapps/axis/WEB-INF/classes/samples">
      <fileset dir="${build.samples}"/>
    </copy>

    <copy file="../LICENSE" tofile="${dist.dir}/LICENSE"/>
    <copy file="README" tofile="${dist.dir}/README"/>
    <copy file="release-notes.html" tofile="${dist.dir}/release-notes.html"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                     -->
  <!-- =================================================================== -->
  <target name="srcdist" depends="javadocs" >
    <copy todir="${dist.dir}">
      <fileset dir=".">
        <include name="build.xml"/>
        <include name="README"/>
        <include name="docs/**"/>
        <include name="lib/**"/>
        <include name="samples/**"/>
        <include name="src/**"/>
        <include name="test/**"/>
        <include name="webapps/**"/>

        <exclude name="**/CVS/**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/docs/apiDocs">
      <fileset dir="${build.javadocs}"/>
    </copy>
    <copy file="../LICENSE" tofile="${dist.dir}/LICENSE"/>
  </target>

  <!-- =================================================================== -->
  <!-- Interop 3                                                           -->
  <!-- =================================================================== -->
  <target name="interop3" depends="buildTest">
    <ant dir="test/wsdl/interop3/import1"/>
    <ant dir="test/wsdl/interop3/import2"/>
    <ant dir="test/wsdl/interop3/import3"/>
    <ant dir="test/wsdl/interop3/compound1"/>
    <ant dir="test/wsdl/interop3/compound2"/>
    <ant dir="test/wsdl/interop3/docLit"/>
    <ant dir="test/wsdl/interop3/docLitParam"/>
    <ant dir="test/wsdl/interop3/rpcEnc"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="client-config.wsdd"/>
    <delete file="server-config.wsdd"/>
    <delete file="webapps/axis/WEB-INF/server-config.wsdd"/>
    <delete>
      <fileset dir="webapps/axis" includes="**/*.class" />
    </delete>
    <delete dir="test-reports"/>
    <delete file="TEST-test.functional.FunctionalTests.txt"/>
  </target>
</project>
