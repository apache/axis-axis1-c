<?xml version="1.0"?>

<!-- ===================================================================

   Build file for Axis

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org
   xml-xerces from http://xml.apache.org
   JavaMail from http://java.sun.com/products/javamail/
   Java Activation Framework
       from http://java.sun.com/products/beans/glasgow/jaf.html

Optional additions:

   http://www.alphaworks.ibm.com/tech/xmitoolkit
   http://oss.software.ibm.com/developerworks/opensource/pop3/index.html
   http://oss.software.ibm.com/developerworks/opensource/smtp/index.html
   http://java.sun.com/products/jsse/
   
Build Instructions:
   To build, run

     java org.apache.tools.ant.Main <target>

   on the directory where this file is located with the target you want.

Most useful targets:

 - compile  -> creates the "axis.jar" package in "./build/lib"
 - javadocs -> creates the javadocs in "./build/javadocs"
 - dist     -> creates the complete binary distribution
 - srcdist  -> creates the complete src distribution

Authors:
  Sam Ruby <rubys@us.ibm.com>
  Matthew J. Duftler <duftler@us.ibm.com>


Copyright:
  Copyright (c) 2000 Apache Software Foundation.

==================================================================== -->

<project default="compile" basedir=".">

  <target name="init">
    <property name="name" value="axis"/>
    <property name="Name" value="Axis"/>
    <property name="version" value="2.0"/>
    <property name="year" value="2000"/>

    <property name="build.compiler" value="classic"/>
    <property name="debug" value="off"/>

    <property name="src.dir" value="./src"/>
    <property name="docs.dir" value="./docs"/>
    <property name="samples.dir" value="./samples"/>

    <property name="packages" value="org.*"/>

    <property name="build.file" value="build.xml"/>

    <property name="build.dir" value="./build"/>
    <property name="build.dest" value="./build/classes"/>
    <property name="build.lib" value="./build/lib"/>
    <property name="build.samples" value="./build/samples"/>
    <property name="build.javadocs" value="./build/javadocs"/>

    <property name="webapps" value="./webapps"/>

    <property name="dist.dir" value="./axis-1_0"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <available property="bsf.present" classname="com.ibm.bsf.BSFManager" />
    <available property="xmi.present" classname="com.ibm.xmi.job.Job" />
    <available property="pop3.present" 
      classname="com.ibm.network.mail.pop3.event.StatusListener" />
    <available property="smtp.present" 
      classname="com.ibm.network.mail.smtp.protocol.CoreProtocolBean" />
    <available property="ejb.present" classname="javax.ejb.SessionBean" />
    <available property="ssl.present" classname="javax.net.ssl.SSLSocket" />

    <uptodate property="javac.notRequired"
              targetfile="${build.lib}/${name}.jar">
      <srcfiles dir="${src.dir}">
        <patternset refid="javac.source.files"/>
      </srcfiles>
    </uptodate>

    <uptodate property="javadoc.required"
              targetfile="${build.lib}/${name}.jar">
      <srcfiles dir="${build.dir}" includes="**/*.html"/>
    </uptodate>

    <antcall target="checkDependencies"/>
  </target>

  <!-- =================================================================== -->
  <!-- Warn the user about items not being compiled                        -->
  <!-- =================================================================== -->
  <target name="checkBSF" unless="bsf.present">
    <echo message="Warning: BSF dependencies were not resolved."/>
  </target>
  <target name="checkXMI" unless="xmi.present">
    <echo message="Warning: XMI dependencies were not resolved."/>
  </target>
  <target name="checkPOP3" unless="pop3.present">
    <echo message="Warning: POP3 dependencies were not resolved."/>
  </target>
  <target name="checkSMTP" unless="smtp.present">
    <echo message="Warning: SMTP dependencies were not resolved."/>
  </target>
  <target name="checkEJB" unless="ejb.present">
    <echo message="Warning: EJB dependencies were not resolved."/>
  </target>
  <target name="checkSSL" unless="ssl.present">
    <echo message="Warning: SSL dependencies were not resolved."/>
  </target>
  <target name="checkDependencies" unless="javac.notRequired">
    <antcall target="checkBSF"/>
    <antcall target="checkXMI"/>
    <antcall target="checkPOP3"/>
    <antcall target="checkSMTP"/>
    <antcall target="checkEJB"/>
    <antcall target="checkSSL"/>
  </target>

  <!-- =================================================================== -->
  <!-- Source files to be compiled                                         -->
  <!-- =================================================================== -->
  <patternset id="javac.source.files">
    <exclude name="**/InvokeBSF.java" unless="bsf.present" />
    <exclude name="**/XMI*.java" unless="xmi.present" />
    <exclude name="**/*SMTP*.java" unless="smtp.present" />
    <exclude name="**/*SMTP*.java" unless="pop3.present" />
    <exclude name="**/POP*.java" unless="smtp.present" />
    <exclude name="**/POP*.java" unless="pop3.present" />
    <exclude name="**/*EJB*.java" unless="ejb.present" />
    <exclude name="**/SSLUtils.java" unless="ssl.present" />
    <exclude name="**/old/**/*.java" />
  </patternset>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare">
    <mkdir dir="${build.dest}"/>
    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}">
      <patternset refid="javac.source.files"/>
    </javac>

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/${name}.jar" basedir="${build.dest}" />

    <uptodate property="javadoc.required"
              targetfile="${build.lib}/${name}.jar">
      <srcfiles dir="${build.dir}" includes="**/*.html"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples                                                -->
  <!-- =================================================================== -->
  <target name="samples" depends="compile">
    <javac srcdir="." destdir="${build.dir}" 
           classpath="${build.lib}/${name}.jar" debug="${debug}">
      <include name="samples/**/*.java" />
      <exclude name="samples/**/*SMTP*.java" unless="smtp.present" />
      <exclude name="**/old/**/*.java" />
    </javac>
    <copy todir="${build.samples}">
      <fileset dir="${samples.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the test tool(s)                                           -->
  <!-- =================================================================== -->
  <target name="testtools" depends="compile">
    <javac srcdir="." destdir="${build.dir}" debug="${debug}">
      <include name="test/**/*.java" />
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Apache XML Project. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation if necessary                          -->
  <!-- =================================================================== -->
  <target name="javadocsIfRequired" if="javadoc.required" depends="prepare">
    <antcall target="javadocs"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the binary distribution                                            -->
  <!-- =================================================================== -->
  <!-- target name="dist" depends="compile, javadocsIfRequired, samples" -->
  <target name="dist" depends="compile, javadocsIfRequired ">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/docs"/>
    <mkdir dir="${dist.dir}/docs/apiDocs"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/samples"/>
    <mkdir dir="${dist.dir}/webapps"/>

    <copy todir="${dist.dir}/docs/apiDocs">
      <fileset dir="${build.javadocs}"/>
    </copy>
    <copy todir="${dist.dir}/lib">
      <fileset dir="${build.lib}"/>
    </copy>
    <!--
    <copy todir="${dist.dir}/samples">
      <fileset dir="${build.samples}"/>
    </copy>
    -->
    <copy todir="${dist.dir}/docs">
      <fileset dir="${docs.dir}"/>
    </copy>
    <!--
    <copy todir="${dist.dir}/webapps">
      <fileset dir="${webapps}"/>
    </copy>
    -->

    <copy file="LICENSE" tofile="${dist.dir}/LICENSE"/>
    <copy file="README" tofile="${dist.dir}/README"/>
    <copy file="ReleaseNotes.html" tofile="${dist.dir}/ReleaseNotes.html"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                            -->
  <!-- =================================================================== -->
  <target name="srcdist" depends="init">
    <copy todir="${dist.dir}/src">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy file="LICENSE" tofile="${dist.dir}/LICENSE"/>
    <copy file="${build.file}" tofile="${dist.dir}/${build.file}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>
</project>
