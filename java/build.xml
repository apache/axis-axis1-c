<?xml version="1.0"?>

<!-- ===================================================================

   Build file for Axis

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org
   xml-xerces  from http://xml.apache.org
   
Build Instructions:
   To build, run

     java org.apache.tools.ant.Main <target>

   on the directory where this file is located with the target you want.

Most useful targets:

 - compile  -> creates the "axis.jar" package in "./build/lib"
 - javadocs -> creates the javadocs in "./build/javadocs"
 - dist     -> creates the complete binary distribution
 - srcdist  -> creates the complete src distribution

Custom post-compilation work:

   If you desire to do some extra work as a part of the build after the
   axis.jar is assembled, simply create an ant buildfile called
   "post-compile.xml" in this directory.  The build will automatically
   notice this and run it at the appropriate time.  This is handy for
   updating the jar file in a running server, for instance.

Authors:
  Sam Ruby <rubys@us.ibm.com>
  Matthew J. Duftler <duftler@us.ibm.com>
  Glen Daniels <gdaniels@macromedia.com>

Copyright:
  Copyright (c) 2001 Apache Software Foundation.

==================================================================== -->

<project default="compile" basedir=".">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>

  <property name="name" value="axis"/>
  <property name="Name" value="Axis"/>
  <property name="year" value="2001"/>

  <property name="debug" value="true"/>
  <property name="deprecation" value="true"/>

  <property name="src.dir" value="./src"/>
  <property name="docs.dir" value="./docs"/>
  <property name="samples.dir" value="./samples"/>

  <property name="packages" value="org.*"/>

  <property name="build.file" value="build.xml"/>

  <property name="build.dir" value="./build"/>
  <property name="build.dest" value="./build/classes"/>
  <property name="build.lib" value="./build/lib"/>
  <property name="build.samples" value="./build/classes/samples"/>
  <property name="build.javadocs" value="./build/javadocs"/>
  <property name="build.webapp" value="./build/webapps/axis"/>

  <property name="webapp" value="./webapps/axis"/>

  <property name="dist.dir" value="./axis-1_0"/>

  <!-- =================================================================== -->
  <!-- Determine what dependencies are present                             -->
  <!-- =================================================================== -->
  <path id="classpath">
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <target name="setenv">
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>

    <available property="xerces.present"
      classname="org.apache.xml.serialize.XMLSerializer"
      classpathref="classpath"/>

    <available property="servlet.present"
      classname="javax.servlet.Servlet"
      classpathref="classpath"/>

    <available property="junit.present" 
      classname="junit.framework.TestCase"
      classpathref="classpath"/>

    <available property="post-compile.present" file="post-compile.xml" />

    <echo message="--- Build environment for ${Name} ---" />
    <echo message="--- Flags (Note: If the {property name} is displayed, "/>
    <echo message="           then the component is not present)" />
    <echo message=""/>
    <echo message="--- Required Libraries ---" />
    <echo message="xerces.present=${xerces.present}" />
    <echo message=""/>
    <echo message="--- Optional Libraries ---" />
    <echo message="servlet.present=${servlet.present}" />
    <echo message="junit.present=${junit.present}" />
    <echo message=""/>
    <echo message="--- Property values" />
    <echo message="debug=${debug}" />
    <echo message="deprecation=${deprecation}" />

    <uptodate property="javadoc.notrequired"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="setenv">
    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
      <exclude name="**/old/**/*" />
      <exclude name="org/apache/axis/handlers/HTTP*" unless="servlet.present"/>
      <exclude name="org/apache/axis/transport/http/*" unless="servlet.present"/>
    </javac>
    <jar jarfile="${build.lib}/${name}.jar" basedir="${build.dest}" >
      <include name="org/**" />
    </jar>
    <antcall target="post-compile"/>
  </target>

  <!-- =================================================================== -->
  <!-- Custom post-compilation step                                        -->
  <!-- =================================================================== -->
  <target name="post-compile" if="post-compile.present">
   <ant antfile="post-compile.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples                                                -->
  <!-- =================================================================== -->
  <target name="samples" depends="compile">
    <javac srcdir="." destdir="${build.dest}" 
           classpath="${build.lib}/${name}.jar" debug="${debug}">
      <include name="samples/**/*.java" />
      <exclude name="samples/**/*SMTP*.java" unless="smtp.present" />
      <exclude name="**/old/**/*.java" />
    </javac>
    <copy todir="${build.samples}">
      <fileset dir="${samples.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the JUnit testcases -->
  <!-- =================================================================== -->

  <path id="test-classpath">
    <!-- build.dir for test classes and build.dest for classes to test -->
    <pathelement location="${build.dir}" />
    <pathelement location="${build.dest}" />
    <pathelement path="${java.class.path}" />
  </path>

  <target name="buildTest" if="junit.present" depends="compile">
    <echo message="junit package found ..."/>

    <!-- Tests are packaged as test.*, so source dir is main dir -->
    <javac srcdir="${basedir}"
      destdir="${build.dir}"
      debug="on"> <!-- set debug on since it helps with line numbers when unit tests fail. -->
      <include name="test/**/*.java" />
      <classpath refid="test-classpath" />
    </javac>
  </target>


  <!-- =================================================================== -->
  <!-- Runs the JUnit testcases -->
  <!-- =================================================================== -->
  <target name="junit" if="junit.present" depends="buildTest">
    <mkdir dir="${basedir}/test-reports" />
    <junit printsummary="yes" haltonfailure="no" fork="yes">
      <classpath refid="test-classpath" />
      <formatter type="xml" />
      <batchtest todir="test-reports">
        <fileset dir="${build.dir}">
          <!-- Convention: each package that's being tested
                has its own test class collecting all the tests -->
          <include name="**/PackageTests.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->

  <target name="javadocs" depends="setenv" unless="javadoc.notrequired">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Apache XML Project. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the binary distribution                                     -->
  <!-- =================================================================== -->
  <target name="dist" depends="compile, junit, samples, javadocs" >
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/docs"/>
    <mkdir dir="${dist.dir}/docs/apiDocs"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/samples"/>
    <mkdir dir="${dist.dir}/webapps/axis"/>

    <copy todir="${dist.dir}/docs/apiDocs">
      <fileset dir="${build.javadocs}"/>
    </copy>
    <copy todir="${dist.dir}/lib">
      <fileset dir="${build.lib}"/>
    </copy>
    <copy todir="${dist.dir}/samples">
      <fileset dir="${build.samples}"/>
    </copy>
    <copy todir="${dist.dir}/docs">
      <fileset dir="${docs.dir}"/>
    </copy>
    <copy todir="${dist.dir}/webapps/axis">
      <fileset dir="${webapp}"/>
    </copy>
    <copy file="${build.lib}/axis.jar"
          todir="${dist.dir}/webapps/axis/WEB-INF/lib"/>
    <copy todir="${dist.dir}/webapps/axis/WEB-INF/classes/samples">
      <fileset dir="${build.samples}"/>
    </copy>

    <copy file="../LICENSE" tofile="${dist.dir}/LICENSE"/>
    <copy file="README" tofile="${dist.dir}/README"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                     -->
  <!-- =================================================================== -->
  <target name="srcdist">
    <copy todir="${dist.dir}/src">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy file="LICENSE" tofile="${dist.dir}/LICENSE"/>
    <copy file="${build.file}" tofile="${dist.dir}/${build.file}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>
</project>
