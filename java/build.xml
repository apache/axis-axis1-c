<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY properties SYSTEM "file:xmls/properties.xml">
        <!ENTITY paths  SYSTEM "file:xmls/path_refs.xml">
        <!ENTITY taskdefs SYSTEM "file:xmls/taskdefs.xml">
        <!ENTITY targets SYSTEM "file:xmls/targets.xml">
]>

<project default="compile" basedir=".">
<!-- =================================================================== -->
<description>
   Build file for Axis

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org

Optional components:
   SOAP Attachment support enablement:
     activation.jar     from http://java.sun.com/products/javabeans/glasgow/jaf.html
     mailapi.jar        from http://java.sun.com/products/javamail/
     JimiProClasses.zip from http://java.sun.com/products/jimi/
   Security support enablement:
     xmlsec.jar from fresh build of CVS from http://xml.apache.org/security/
     Other support jars from http://cvs.apache.org/viewcvs.cgi/xml-security/libs/

Build Instructions:
   To build, run

     ant "target"

   on the directory where this file is located with the target you want.

Most useful targets:

 - compile  : creates the "axis.jar" package in "./build/lib"
 - javadocs : creates the javadocs in "./build/javadocs"
 - dist     : creates the complete binary distribution
 - srcdist  : creates the complete src distribution
 - functional-tests : attempts to build Ant task and then run
              client-server functional test
 - war      : create the web application as a WAR file
 - clean    : clean up files and directories


Custom post-compilation work:

   If you desire to do some extra work as a part of the build after the
   axis.jar is assembled, simply create an ant buildfile called
   "post-compile.xml" in this directory.  The build will automatically
   notice this and run it at the appropriate time.  This is handy for
   updating the jar file in a running server, for instance.

Authors:
  Sam Ruby  rubys@us.ibm.com
  Matthew J. Duftler duftler@us.ibm.com
  Glen Daniels gdaniels@macromedia.com

Copyright:
  Copyright (c) 2001-2002 Apache Software Foundation.
</description>
<!-- ==================================================================== -->

<!-- Include the Generic XML files -->
  &properties;
  &paths;
  &taskdefs;
  &targets;

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="printEnv" unless="compile.built">
    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
      <exclude name="**/old/**/*" />
      <exclude name="**/bak/**"/>
      <exclude name="**/org/apache/axis/components/net/JSSE*.java" unless="jsse.present"/>
      <exclude name="**/org/apache/axis/components/net/Fake*.java" unless="jsse.present"/>
      <exclude name="**/org/apache/axis/components/image/JimiIO.java" unless="jimi.present"/>
	  <exclude name="**/org/apache/axis/components/image/MerlinIO.java" unless="merlinio.present"/>
      <exclude name="**/org/apache/axis/attachments/AttachmentsImpl.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/AttachmentPart.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/AttachmentUtils.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/MimeUtils.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/ManagedMemoryDataSource.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/MultiPartRelatedInputStream.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/BoundaryDelimitedStream.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/ImageDataSource.java" unless="jimiAndAttachments.present"/>
      <exclude name="**/org/apache/axis/attachments/MimeMultipartDataSource.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/attachments/PlainTextDataSource.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/configuration/ServletEngineConfigurationFactory.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerSerializer.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerDeserializerFactory.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerSerializerFactory.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/encoding/ser/JAFDataHandlerDeserializer.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/handlers/MD5AttachHandler.java" unless="attachments.present"/>
      <exclude name="**/org/apache/axis/transport/http/AdminServlet.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/http/AxisHttpSession.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/http/AxisServlet.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/http/AxisServletBase.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/http/ServletEndpointContextImpl.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/configuration/EngineConfigurationFactoryServlet.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/transport/http/CommonsHTTPSender.java" unless="commons-httpclient.present"/>
      <exclude name="**/org/apache/axis/server/JNDIAxisServerFactory.java" unless="servlet.present"/>
      <exclude name="**/org/apache/axis/security/servlet/*" unless="servlet.present"/>
      <exclude name="**/javax/xml/soap/*.java" unless="attachments.present"/>
      <exclude name="**/javax/xml/rpc/handler/soap/*.java" unless="attachments.present"/>
      <exclude name="**/javax/xml/rpc/server/Servlet*.java" unless="servlet.present"/>
      <exclude name="**/*TestSuite.java" unless="junit.present"/>
    </javac>
    <copy file="${src.dir}/org/apache/axis/server/server-config.wsdd"
          toDir="${build.dest}/org/apache/axis/server"/>
    <copy file="${src.dir}/org/apache/axis/client/client-config.wsdd"
          toDir="${build.dest}/org/apache/axis/client"/>
    <copy file="${src.dir}/log4j.properties"
          toDir="${build.dest}"/>
    <copy file="${src.dir}/simplelog.properties"
          toDir="${build.dest}"/>
    <copy file="${src.dir}/org/apache/axis/utils/axisNLS.properties"
          toDir="${build.dest}/org/apache/axis/utils"/>

    <tstamp>
      <format property="build.time" pattern="MMM dd, yyyy (hh:mm:ss z)"/>
    </tstamp>
    <replace file="${build.dest}/org/apache/axis/utils/axisNLS.properties"
             token="#today#" value="${build.time}"/>
    <replace file="${build.dest}/org/apache/axis/utils/axisNLS.properties"
             token="#axisVersion#" value="${axis.version}"/>

    <jar jarfile="${build.lib}/${name}.jar" basedir="${build.dest}" >
      <include name="org/**" />
      <include name="log4j.properties"/>
      <include name="simplelog.properties"/>
    </jar>
    <jar jarfile="${build.lib}/${jaxrpc}.jar" basedir="${build.dest}" >
      <include name="javax/**"/>
      <exclude name="javax/xml/soap/**"/>
    </jar>
    <jar jarfile="${build.lib}/${saaj}.jar" basedir="${build.dest}" >
      <include name="javax/xml/soap/**"/>
    </jar>
    <copy file="${wsdl4j.jar}" toDir="${build.lib}"/>
    <copy file="${commons-logging.jar}" toDir="${build.lib}"/>
    <copy file="${commons-discovery.jar}" toDir="${build.lib}"/>
    <copy file="${log4j-core.jar}" toDir="${build.lib}"/>

<!-- stub in my task generations -->
    <ant antfile="buildPreTestTaskdefs.xml" />

     <!--  Build the new org.apache.axis.tools.ant stuff -->
     <ant antfile="tools/build.xml" />
     <ant antfile="tools/build.xml" target="test"/>

     <antcall target="post-compile"/>
     <property name="compile.built" value="yes"/>
     <echo message="Compile property set ${compile.built}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Custom post-compilation step                                        -->
  <!-- =================================================================== -->
  <target name="post-compile" if="post-compile.present">
   <ant antfile="post-compile.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples                                                -->
  <!-- =================================================================== -->
  <target name="samples" depends="compile" unless="samples.built"
    description="build the samples">
    <!--
    <exec executable="ant">
      <arg line="-buildfile ${axis.home}/buildSamples.xml compile"/>
    </exec> 
    -->
      <ant antfile="${axis.home}/buildSamples.xml" target="compile"/>
      <property name="samples.built" value="yes"/>
      <echo message="Samples property set ${samples.built}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the JUnit testcases -->
  <!-- =================================================================== -->

  <path id="test-classpath">
    <pathelement location="${build.dest}" />
    <path refid="classpath"/>
  </path>

  <target name="buildTest" depends="compile" if="junit.present" unless="tests.built">
    <echo message="junit package found ..."/>
      <ant antfile="${axis.home}/buildTest.xml" target="compile"/>
    <!--
    <exec executable="ant">
      <arg line="-buildfile ${axis.home}/buildTest.xml compile"/>
    </exec>
    -->
    <property name="tests.built" value="yes"/>
    <echo message="Tests property set ${tests.built}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles applets                                                    -->
  <!-- =================================================================== -->

  <target name="applets" depends="compile">
    <javac srcdir="${axis.home}/webapps/axis"
      destdir="${axis.home}/webapps/axis"
      debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
      <include name="*.java"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the JUnit package testcases -->
  <!-- =================================================================== -->
  <target name="junit" depends="buildTest" if="junit.present" >
    <mkdir dir="${test.functional.reportdir}" />
    <ant antfile="${axis.home}/buildTest.xml" target="junit"/>
  </target>

  <!-- =================================================================== -->
  <!-- Functional tests, no dependencies (for no-build testing)            -->
  <!-- =================================================================== -->
  <target name="functional-tests-only" depends="printEnv"
    description="functional tests without a rebuild; the Axis Ant task must be in ANT_HOME/lib"
    >

    <!-- The Axis Ant task must be built (into ANT_HOME/lib)... -->
    <ant antfile="test/build_functional_tests.xml" target="functional-tests-only"/>

    <!--
    ...and then the functional tests can be run.  If this step yields a
    "can't find class test.functional.ant.RunAxisFunctionalTestsTask",
    verify that your Ant classpath contains ANT_HOME/lib.
    -->

  </target>

  <target name="functional-tests-secure-only" depends="printEnv"
    description="functional secure tests without a rebuild;"
    >
    <ant antfile="test/build_functional_tests.xml" target="functional-tests-secure-only"/>
  </target>


  <!-- =================================================================== -->
  <!-- Functional tests, no server (for testing under debugger)            -->
  <!-- =================================================================== -->
  <target name="functional-tests-noserver" depends="compile, buildTest"
    description="functional tests, no server">
    <ant antfile="test/build_functional_tests.xml" target="junit-functional-noserver">
      <property name="test.functional.usefile" value="${test.functional.usefile}"/>
    </ant>

  </target>

  <target name="componentTest" depends="compile, buildTest">
     <ant antfile="${axis.home}/buildTest.xml" target="componentTest"/>
  </target>

  <!-- =================================================================== -->
  <!-- Functional tests, with server                                       -->
  <!-- =================================================================== -->
  <target name="functional-tests" depends="buildTest" description="functional tests">
    <ant antfile="${axis.home}/buildTest.xml" target="functional-tests"/>
  </target>

  <!-- Security only tests, with full dependencies -->
  <target name="secure-tests" depends="compile, buildTest, junit, functional-tests-secure-only">
  </target>

  <!-- All tests -->
  <target name="all-tests" depends="junit, functional-tests">
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="printEnv" unless="javadoc.notrequired"
      description="create javadocs">

    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             classpathref="classpath"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Apache XML Project. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Build/Test EVERYTHING from scratch!                                 -->
  <!-- =================================================================== -->
  <target name="all" depends="dist, functional-tests"
      description="do everything: distribution build and functional tests"
    />

  <!-- =================================================================== -->
  <!-- Creates a war file for testing                                      -->
  <!-- =================================================================== -->
  <target name="war" depends="compile, samples, applets"
      description="Create the web application" >
    <mkdir dir="${build.webapp}"/>
    <copy todir="${build.webapp}">
      <fileset dir="${webapp}"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${build.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <copy todir="${build.webapp}/samples">
      <fileset dir="./samples"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF/classes/samples">
      <fileset dir="${build.samples}"/>
    </copy>
    <copy todir="${build.webapp}/WEB-INF">
      <fileset dir="${samples.dir}/stock">
        <include name="*.lst"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${build.webapp}" includes="**/CVS"/>
    </delete>
    <jar jarfile="${build.dir}/${name}.war" basedir="${build.webapp}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the binary distribution                                     -->
  <!-- =================================================================== -->
  <target name="javadocsdist" depends="javadocs" unless="javadoc.notrequired">
    <mkdir dir="${dist.dir}/docs"/>
    <mkdir dir="${dist.dir}/docs/apiDocs"/>
    <copy todir="${dist.dir}/docs/apiDocs">
      <fileset dir="${build.javadocs}"/>
    </copy>
  </target>

  <target name="dist" depends="compile, javadocsdist, samples, buildTest, junit"
    description="create the full binary distribution">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/samples"/>
    <mkdir dir="${dist.dir}/webapps/axis"/>

    <copy todir="${dist.dir}/lib">
      <fileset dir="${build.lib}"/>
    </copy>
    <copy todir="${dist.dir}/samples">
      <fileset dir="${build.samples}"/>
      <fileset dir="./samples"/>
    </copy>
    <copy todir="${dist.dir}/docs">
      <fileset dir="${docs.dir}"/>
    </copy>
    <copy todir="${dist.dir}/webapps/axis">
      <fileset dir="${webapp}"/>
    </copy>
    <copy todir="${dist.dir}/webapps/axis/WEB-INF">
      <fileset dir="${samples.dir}/stock">
        <include name="*.lst"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/webapps/axis/WEB-INF/lib">
      <fileset dir="${build.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/webapps/axis/WEB-INF/classes/samples">
      <fileset dir="${build.samples}"/>
    </copy>
    <!--
    <copy file="../LICENSE" tofile="${dist.dir}/LICENSE"/>
    -->
    <copy file="README" tofile="${dist.dir}/README"/>
    <copy file="release-notes.html" tofile="${dist.dir}/release-notes.html"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                     -->
  <!-- =================================================================== -->
  <target name="srcdist" depends="javadocs"
      description="Create the source distribution">
    <copy todir="${dist.dir}">
      <fileset dir=".">
        <include name="*.xml"/>
        <include name="*.html"/>
        <include name="README"/>
        <include name="docs/**"/>
        <include name="lib/**"/>
        <include name="samples/**"/>
        <include name="src/**"/>
        <include name="test/**"/>
        <include name="tools/**"/>
        <include name="webapps/**"/>
        <include name="xmls/**"/>

        <exclude name="**/CVS/**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/docs/apiDocs">
      <fileset dir="${build.javadocs}"/>
    </copy>
    <copy file="../LICENSE" tofile="${dist.dir}/LICENSE"/>
  </target>

  <!-- =================================================================== -->
  <!-- Interop 3                                                           -->
  <!-- =================================================================== -->
  <target name="interop3" depends="buildTest"
      description="run the round3 interop tests">
    <ant dir="test/wsdl/interop3/import1"/>
    <ant dir="test/wsdl/interop3/import2"/>
    <ant dir="test/wsdl/interop3/import3"/>
    <ant dir="test/wsdl/interop3/compound1"/>
    <ant dir="test/wsdl/interop3/compound2"/>
    <ant dir="test/wsdl/interop3/docLit"/>
    <ant dir="test/wsdl/interop3/docLitParam"/>
    <ant dir="test/wsdl/interop3/rpcEnc"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean"
      description="clean up, build, dist and much of the axis servlet">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="client-config.wsdd"/>
    <delete file="server-config.wsdd"/>
    <delete file="webapps/axis/WEB-INF/server-config.wsdd"/>
    <delete>
      <fileset dir="webapps/axis" includes="**/*.class" />
    </delete>
    <delete dir="test-reports"/>
    <delete file="TEST-test.functional.FunctionalTests.txt"/>
    <delete file="GetQuote.wsdl"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Check the style of the Axis source                                 -->
  <!-- =================================================================== -->
  <target name="checkstyle" 
    description="Check the style of the Axis source" >
    <ant dir="." target="checkstyle"
      antfile="xmls/checkstyle.xml"
      inheritall="true" 
      inheritrefs="true"
      >
      <property name="checkstyle.project"
        value="axis" />
      <property name="checkstyle.src.dir"
        location="${axis.home}/src" />
    </ant>
    </target>
</project>
