  <target name="echoThem">
        <basename property="fileName" file="${file}"/>
        <dirname property="dirName" file="${file}"/>
        <echo message="Dir: ${dirName} File: ${fileName}"/>
  </target>

  <target name="buildThem">
        <echo message="${file}"/>
        <ant antfile="${file}" target="compile"/>
  </target>

  <target name="runThem">
        <ant antfile="${file}" target="run" >
           <property name="batch" value="true"/>
        </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Determine what dependencies are present                             -->
  <!-- =================================================================== -->

  <target name="setenv">

    <condition property="ant.good">
      <and>
        <contains string="${ant.version}" substring="Apache Ant version"/>
      </and>
    </condition>

    <available property="servlet.present"
      classname="javax.servlet.Servlet"
      classpathref="classpath"/>

    <available property="regexp.present"
      classname="org.apache.oro.text.regex.Pattern"
      classpathref="classpath"/>

    <available property="junit.present"
      classname="junit.framework.TestCase"
      classpathref="classpath"/>

    <available property="wsdl4j.present"
      classname="javax.wsdl.Definition"
      classpathref="classpath"/>

    <available property="commons-logging.present"
      classname="org.apache.commons.logging.Log"
      classpathref="classpath"/>

    <available property="commons-httpclient.present"
      classname="org.apache.commons.httpclient.HttpConnection"
      classpathref="classpath"/>

    <available property="log4j.present"
      classname="org.apache.log4j.Category"
      classpathref="classpath"/>

    <available property="tt-bytecode.present"
      classname="com.techtrader.modules.tools.bytecode.BCClass"
      classpathref="classpath"/>

    <available property="serp.present"
      classname="serp.bytecode.Project"
      classpathref="classpath"/>

    <available property="bcel.present"
      classname="org.apache.bcel.classfile.JavaClass"
      classpathref="classpath"/>

    <available property="activation.present"
      classname="javax.activation.DataHandler"
      classpathref="classpath"/>

    <available property="security.present"
      classname="org.apache.xml.security.Init"
      classpathref="classpath"/>

    <available property="mailapi.present"
      classname="javax.mail.internet.MimeMessage"
      classpathref="classpath"/>

    <condition property="jsse.present" >
      <and>
        <available classname="com.sun.net.ssl.X509TrustManager" classpathref="classpath" />
        <available classname="javax.net.SocketFactory" classpathref="classpath" />
      </and>
    </condition>

    <condition property="attachments.present" >
      <and>
        <available classname="javax.activation.DataHandler" classpathref="classpath" />
        <available classname="javax.mail.internet.MimeMessage" classpathref="classpath" />
      </and>
    </condition>

    <available property="post-compile.present" file="post-compile.xml" />

    <property environment="env"/>
    <condition property="debug" value="on">
    <and>
      <equals arg1="on" arg2="${env.debug}"/>
    </and>
    </condition>

  </target>

  <target name="printEnv" depends="setenv" >

    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>

    <echo message="-----------------------------------------------------------------"/>
    <echo message="       Build environment for ${Name} ${axis.version} [${year}]   "/>
    <echo message="-----------------------------------------------------------------"/>
    <echo message="Building with ${ant.version}"/>
    <echo message="using build file ${ant.file}"/>
    <echo message="Java ${java.version} located at ${java.home} "/>
    <echo message="-----------------------------------------------------------------"/>

    <echo message="--- Flags (Note: If the {property name} is displayed, "/>
    <echo message="           then the component is not present)" />
    <echo message=""/>

    <echo message="build.dir = ${build.dir}"/>
    <echo message="build.dest = ${build.dest}"/>
    <echo message=""/>
    <echo message="=== Required Libraries ===" />
    <echo message="wsdl4j.present=${wsdl4j.present}" />
    <echo message="commons-logging.present=${commons-logging.present}" />
    <echo message="log4j.present=${log4j.present}" />
    <echo message="tt-bytecode.present=${tt-bytecode.present}" />
    <echo message="activation.present=${activation.present}" />
    <echo message=""/>
    <echo message="--- Optional Libraries ---" />
    <echo message="servlet.present=${servlet.present}" />
    <echo message="regexp.present=${regexp.present}" />
    <echo message="junit.present=${junit.present}" />
    <echo message="mailapi.present=${mailapi.present}" />
    <echo message="attachments.present=${attachments.present}" />
    <echo message="security.present=${security.present}" />
    <echo message="jsse.present=${jsse.present}" />
    <echo message="commons-httpclient.present=${commons-httpclient.present}" />
    <echo message=""/>
    <echo message="--- Property values ---" />
    <echo message="debug=${debug}" />
    <echo message="deprecation=${deprecation}" />
    <!-- Set environment variable axis_nojavadocs=true  to never generate javadocs. Case sensative! -->
    <echo message="axis_nojavadocs=${env.axis_nojavadocs}"/>

    <echo message="" />
    <echo message="-- Test Environment for AXIS ---"/>
    <echo message="" />
    <echo message="test.functional.remote = ${test.functional.remote}" />
    <echo message="test.functional.local = ${test.functional.local}" />
    <echo message="test.functional.both = ${test.functional.both}" />
    <echo message="test.functional.reportdir = ${test.functional.reportdir}" />
    <echo message="test.functional.SimpleAxisPort = ${test.functional.SimpleAxisPort}" />
    <echo message="test.functional.fail = ${test.functional.fail}" />
    <echo message="" />

    <uptodate property="javadoc.notoutofdate"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>

    <condition property="axis_nojavadocs" value="true">
      <equals arg1="true" arg2="${env.axis_nojavadocs}"/>
    </condition>
    <condition property="axis_nojavadocs" value="false">
      <equals arg1="${axis_nojavadocs}" arg2="$${axis_nojavadocs}"/>
    </condition>

    <uptodate property="javadoc.notrequired"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>

 </target>


  <!-- =================================================================== -->
  <!-- Launches the functional test TCP server -->
  <!-- =================================================================== -->
  <target name="start-functional-test-tcp-server" if="junit.present">
    <echo message="Starting test tcp server."/>
    <java classname="samples.transport.tcp.TCPListener" fork="yes" dir="${axis.home}/build">
      <arg line="-p 8088" /> <!-- arbitrary port -->
      <classpath refid="classpath" />
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Launches the functional test HTTP server -->
  <!-- =================================================================== -->
  <target name="start-functional-test-http-server" if="junit.present">
    <echo message="Starting test http server."/>
    <java classname="org.apache.axis.transport.http.SimpleAxisServer" fork="yes" dir="${axis.home}/build">
        <!-- Uncomment this to use Jikes instead of Javac for compiling JWS Files
        <jvmarg value="-Daxis.Compiler=org.apache.axis.components.compiler.Jikes"/>
        -->
        <jvmarg value="-Daxis.wsdlgen.intfnamespace=http://localhost:${test.functional.ServicePort}"/>
        <jvmarg value="-Daxis.wsdlgen.serv.loc.url=http://localhost:${test.functional.ServicePort}"/>
        <arg line="-p ${test.functional.SimpleAxisPort}" />  <!-- arbitrary port -->
      <classpath refid="classpath" />
    </java>

  </target>

  <!-- =================================================================== -->
  <!-- Stops the functional test HTTP server -->
  <!-- =================================================================== -->
  <target name="stop-functional-test-http-server" if="junit.present" depends="stop-signature-signing-and-verification">
    <echo message="Stopping test http server."/>
    <java classname="org.apache.axis.client.AdminClient" fork="yes">
      <classpath refid="classpath" />
      <arg line="quit"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Stops the functional test HTTP server when testing digital signature -->
  <!-- =================================================================== -->
  <target name="stop-functional-test-http-server-secure" if="junit.present" depends="stop-signature-signing-and-verification">
    <echo message="Stopping test http server."/>
    <java classname="org.apache.axis.client.AdminClient" fork="yes">
      <classpath refid="classpath" />
      <arg line="quit"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Start Signature Signing and Verification -->
  <!-- =================================================================== -->
  <target name="start-signature-signing-and-verification" if="security.present">
    <!-- Enable transparent Signing of SOAP Messages sent
        from the client and Server-side Signature Verification.
    -->
    <java classname="org.apache.axis.client.AdminClient" fork="yes">
      <classpath refid="classpath" />
      <arg line="samples/security/serversecuritydeploy.wsdd"/>
    </java>
    <java classname="org.apache.axis.utils.Admin" fork="yes">
      <classpath refid="classpath" />
      <arg value="client"/>
      <arg value="samples/security/clientsecuritydeploy.wsdd"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Stop Signature Signing and Verification -->
  <!-- =================================================================== -->
  <target name="stop-signature-signing-and-verification" if="security.present">
    <!-- Disable transparent Signing of SOAP Messages sent
        from the client and Server-side Signature Verification.
    -->
    <java classname="org.apache.axis.client.AdminClient" fork="yes">
      <classpath refid="classpath" />
      <arg line="samples/security/serversecurityundeploy.wsdd"/>
    </java>
    <java classname="org.apache.axis.utils.Admin" fork="yes">
      <classpath refid="classpath" />
      <arg value="client"/>
      <arg value="samples/security/clientsecurityundeploy.wsdd"/>
    </java>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the JUnit functional test -->
  <!-- =================================================================== -->
  <target name="component-junit-functional-prepare" if="junit.present">
          <mkdir dir="${axis.home}/${test.functional.reportdir}" />
          <path id="deploy.xml.files">
                <fileset dir="${build.dir}">
                  <include name="work/${componentName}/**/deploy.wsdd"/>
		  <include name="${extraServices}/deploy.wsdd" />
                </fileset>
          </path>

          <path id="undeploy.xml.files">
                <fileset dir="${build.dir}">
                  <include name="work/${componentName}/**/undeploy.wsdd"/>
                  <include name="${extraServices}/undeploy.wsdd" />
                </fileset>
          </path>

          <property name="deploy.xml.property" refid="deploy.xml.files"/>
          <property name="undeploy.xml.property" refid="undeploy.xml.files"/>
  </target>
  

<target name="component-junit-functional" if="junit.present" depends="component-junit-functional-prepare,start-signature-signing-and-verification">
    <java classname="org.apache.axis.client.AdminClient" fork="yes">
      <classpath refid="classpath" />
      <arg line="${deploy.xml.property}"/>
    </java>

   <junit dir="." printsummary="yes" haltonfailure="${test.functional.fail}" fork="yes">
      <classpath refid="classpath" />
      <formatter type="xml" usefile="${test.functional.usefile}"/>
      <batchtest todir="${test.functional.reportdir}">
        <fileset dir="${build.dest}">
           <include name="${componentName}/*TestCase.class" />
           <include name="${componentName}/**/*TestCase.class" />
        </fileset>
      </batchtest>
   </junit>

    <java classname="org.apache.axis.client.AdminClient" fork="yes">
      <classpath refid="classpath" />
      <arg line="${undeploy.xml.property}"/>
    </java>

</target>

<target name="execute-Component"  depends="setenv" >
    <runaxisfunctionaltests
      url="http://localhost:8088"
      startTarget1="start-functional-test-tcp-server"
      startTarget2="start-functional-test-http-server"
      testTarget="component-junit-functional"
      stopTarget="stop-functional-test-http-server" />
</target>
