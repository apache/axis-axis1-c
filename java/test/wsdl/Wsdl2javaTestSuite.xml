<?xml version="1.0"?>

<project name="Wsdl2javaTestSuite" default="main">

  <path id="test-classpath">
    <pathelement location="${build.dest}" />
    <pathelement path="${java.class.path}" />
    <pathelement location="${java.home}/../lib/tools.jar"/>
    <fileset dir="lib">
     <include name="*.jar"/>
    </fileset>
  </path>

  <taskdef name="wsdl2java"
           classname="test.wsdl.Wsdl2javaAntTask">
      <classpath refid="test-classpath" />
  </taskdef>

  <taskdef name="java2wsdl"
           classname="test.wsdl.Java2WsdlAntTask">
      <classpath refid="test-classpath" />
  </taskdef>

  <target name="main">
    <!-- Use this to check the classpath if the ANT Task fails... -->
    <!--
    <property name="test-classpath.property" refid="test-classpath"/>
    <echo message="Classpath for wsdl2java task : ${test-classpath.property}"/>
    -->
    <echo message="Running WSDL2Java and Java2WSDL Emitters"/>

    <!-- Omit Test -->
    <wsdl2java url="test/wsdl/omit/omit.wsdl"
               output="build/work"
               serverSide="yes">
    </wsdl2java>

    <!-- WidgetPrice Java to WSDL Samples -->
    <java2wsdl output="build/work/samples/userguide/example6/WidgetPrice.wsdl"
               className= "samples.userguide.example6.WidgetPrice"
               namespace="urn:Example6"
               location="http://localhost:8080/axis/services/WidgetPrice">
        <mapping namespace="urn:Example6" package="samples.userguide.example6"/>
    </java2wsdl>
   <wsdl2java url="build/work/samples/userguide/example6/WidgetPrice.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="yes">
        <mapping namespace="urn:Example6" package="samples.userguide.example6"/>
    </wsdl2java>

    <!-- Multiple-binding test with different literal usage -->
    <wsdl2java url="test/wsdl/multibinding/multibinding.wsdl"
               output="build/work"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
    </wsdl2java>

    <!-- MultiRef Test -->
    <wsdl2java url="test/wsdl/multiref/MultiRefTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="urn:MultiRefTest2" package="test.wsdl.multiref"/>
    </wsdl2java>

    <!-- AddressBook roundtrip example that does not implement SEI -->
    <!-- Summary -->
    <!-- Bootstrap the process by creating java classes from the original wsdl -->
    <!-- Compile the classes plus the provided Impl class -->
    <!--   The Impl class is supposed to simulate a server-side EJB -->
    <!--   It does not implement the SEI and it contains some additional throw clauses -->
    <!-- Run Java2WSDL on the Impl class to ensure a valid wsdl is generated -->
    <!-- Run WSDL2Java on the new wsdl to ensure valid java artifacts are generated -->
    <!--   This will ensure that java classes are not generated for NullPointerException -->
    <!-- Copy back over the original Impl and test classes.  -->
    <!--   They will be compiled and run as part of the test. -->
    <delete dir="${build.dir}/classes/test/wsdl/addrNoImplSEI"/>
    <delete dir="${build.dir}/work/test/wsdl/addrNoImplSEI"/>
    <wsdl2java url="test/wsdl/addrNoImplSEI/AddressBook.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="no"
               noimports="no"
               verbose="no"
               typeMappingVersion="1.1"
               testcase="no">
        <mapping namespace="urn:AddrNoImplSEI" package="test.wsdl.addrNoImplSEI"/>
    </wsdl2java>

    <!-- Copy over original classes -->
    <copy todir="${build.dir}/work/test/wsdl/addrNoImplSEI" overwrite="yes">
      <fileset dir="${test.dir}/wsdl/addrNoImplSEI">
        <include name="*.java"/>
      </fileset>
    </copy>

    <!-- Compile the Web Service -->
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="${debug}">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/addrNoImplSEI/**.java" />
      <exclude name="test/wsdl/addrNoImplSEI/*TestCase.java" />
      <exclude name="test/wsdl/addrNoImplSEI/Main.java" />
    </javac>

    <!-- Now run java to wsdl to make sure we don't have any strange artifacts -->
    <java2wsdl output="build/work/test/wsdl/addrNoImplSEI/AddressBook.wsdl"
               className= "test.wsdl.addrNoImplSEI.AddressBookNoImplSEISoapBindingImpl"
               useInheritedMethods="false"
               portTypeName="AddressBookNoImplSEI"
               namespace="http://addrNoImplSEI.wsdl.test"
               location="http://localhost:8080/axis/services/AddressBookNoImplSEI">
        <mapping namespace="urn:AddrNoImplSEI" package="test.wsdl.addrNoImplSEI"/>
    </java2wsdl>

    <!-- Now run wsdl to java to make sure we don't have any strange artifacts -->
    <wsdl2java url="build/work/test/wsdl/addrNoImplSEI/AddressBook.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="no"
               noimports="no"
               verbose="no"
               typeMappingVersion="1.1"
               testcase="no">
        <mapping namespace="urn:AddrNoImplSEI" package="test.wsdl.addrNoImplSEI"/>
    </wsdl2java>
    <!-- Copy over original classes -->
    <copy todir="${build.dir}/work/test/wsdl/addrNoImplSEI" overwrite="yes">
      <fileset dir="${test.dir}/wsdl/addrNoImplSEI">
        <include name="*.java"/>
      </fileset>
    </copy>

    <!-- Operation style test (oneway, request/response, -->
    <!-- solicit/response, notification -->
    <wsdl2java url="test/wsdl/opStyles/opStyles.wsdl"
               output="build/work"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
    </wsdl2java>

    <!-- RefAttr Test -->
    <wsdl2java url="test/wsdl/refattr/refattr.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="urn:ref.types.test" package="test.wsdl.refattr"/>
        <mapping namespace="urn:ref.types" package="test.wsdl.refattr"/>
    </wsdl2java>

    <!-- Roundtrip Test -->
    <!-- To test Java Value Types, copy over the base and subclasses -->
    <delete dir="${build.dir}/classes/test/wsdl/roundtrip"/>
    <delete dir="${build.dir}/work/test/wsdl/roundtrip"/>
    <copy todir="${build.dir}/work/test/wsdl/roundtrip" overwrite="yes">
      <fileset dir="${test.dir}/wsdl/roundtrip">
        <include name="RoundtripPortType.java"/>
        <include name="Investment.java"/>
        <include name="StockInvestment.java"/>
        <include name="BondInvestment.java"/>
        <include name="PreferredStockInvestment.java"/>
        <include name="CallOptions.java"/>
        <include name="InvalidTickerSymbol.java"/>
        <include name="InvalidTradeExchange.java"/>
        <include name="InvalidCompanyId.java"/>
      </fileset>
    </copy>
    <copy todir="${build.dir}/work/test/wsdl/roundtrip/holders" overwrite="yes">
      <fileset dir="${test.dir}/wsdl/roundtrip/holders">
        <include name="BondInvestmentHolder.java"/>
     </fileset>
    </copy>
    <!-- Compile the Web Service -->
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="${debug}">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/roundtrip/**.java" />
      <exclude name="test/wsdl/roundtrip/*TestCase.java" />
      <exclude name="test/wsdl/roundtrip/*Impl.java" />
    </javac>

    <!-- The following invocation of java2wsdl simply tests whether the 
         split wsdl function works.  The generated wsdl files are not used. -->
    
    <java2wsdl output="build/work/test/wsdl/roundtrip/RoundtripIntf.wsdl"
               outputImpl="build/work/test/wsdl/roundtrip/RoundtripImpl.wsdl"
               className= "test.wsdl.roundtrip.RoundtripPortType"
               useInheritedMethods="false"
               namespace="http://roundtrip.wsdl.test"
               namespaceImpl="http://roundtrip.wsdl.test"
               location="http://localhost:8080/axis/services/RoundtripTest"
               locationImport="file://build/work/test/wsdl/roundtrip/RoundtripIntf.wsdl">
        <mapping namespace="http://roundtrip.wsdl.test" package="test.wsdl.roundtrip"/>
    </java2wsdl>

    <!-- Now create the real WSDL file -->
    <java2wsdl output="build/work/test/wsdl/roundtrip/Roundtrip.wsdl"
               className= "test.wsdl.roundtrip.RoundtripPortType"
               useInheritedMethods="false"
               namespace="http://roundtrip.wsdl.test"
               location="http://localhost:8080/axis/services/RoundtripTest">
        <mapping namespace="http://roundtrip.wsdl.test" package="test.wsdl.roundtrip"/>
    </java2wsdl>


    <!-- Delete the intermediate files so we recreate over a clean slate -->
    <delete dir="${build.dir}/classes/test/wsdl/roundtrip"/>
    <!-- Recreate Java files from the new WSDL -->
    <wsdl2java url="build/work/test/wsdl/roundtrip/Roundtrip.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="http://roundtrip.wsdl.test" package="test.wsdl.roundtrip"/>
    </wsdl2java>
    <!-- Sequence Test -->
    <!-- Generate Java From WSDL -->
    <wsdl2java url="test/wsdl/sequence/SequenceTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="urn:SequenceTest2" package="test.wsdl.sequence"/>
    </wsdl2java>
    <!-- Copy modified files to work directory -->
    <copy todir="${build.dir}/work/test/wsdl/sequence" overwrite="yes">
      <fileset dir="${test.dir}/wsdl/sequence">
        <include name="SequenceInfo.java"/>
      </fileset>
    </copy>
    <!-- Compile Java -->
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="${debug}">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/sequence/**.java" />
      <exclude name="test/wsdl/sequence/*TestCase.java" />
      <exclude name="test/wsdl/sequence/*Impl.java" />
    </javac>
    <!-- Now create a WSDL file from the Java classes -->
    <java2wsdl output="build/work/test/wsdl/sequence/SequenceTest.wsdl"
               className= "test.wsdl.sequence.SequenceTestPortType"
               implClass= "test.wsdl.sequence.SequenceTestSoapBindingSkeleton"
               namespace="urn:SequenceTest2"
               location="http://localhost:8080/axis/services/SequenceTest">
        <mapping namespace="urn:SequenceTest2" package="test.wsdl.sequence"/>
    </java2wsdl>
    <!-- Delete the intermediate files so we recreate over a clean slate -->
    <delete dir="${build.dir}/classes/test/wsdl/sequence"/>
    <!-- Recreate Java files from the new WSDL -->
    <wsdl2java url="build/work/test/wsdl/sequence/SequenceTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="urn:SequenceTest2" package="test.wsdl.sequence"/>
    </wsdl2java>

    <!-- ArrayTest Test -->
    <wsdl2java url="test/wsdl/arrays/ArrayTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="urn:ArrayTest2" package="test.wsdl.arrays"/>
    </wsdl2java>

    <!-- Inheritance Test -->
    <!-- Bootstrap to generate Java From WSDL to get stubs/skeletons -->
    <wsdl2java url="test/wsdl/inheritance/InheritanceTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="urn:InheritanceTest2" package="test.wsdl.inheritance"/>
    </wsdl2java>
    <!-- To test inheritance, the InheritancePortType is changed to use inheritance -->
    <copy todir="${build.dir}/work/test/wsdl/inheritance" overwrite="yes">
      <fileset dir="${test.dir}/wsdl/inheritance">
        <include name="InheritancePortType.java"/>
        <include name="StockQuoteProvider.java"/>
      </fileset>
    </copy>
    <!-- Compile the Web Service -->
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="${debug}">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/inheritance/**.java" />
      <exclude name="test/wsdl/inheritance/*TestCase.java" />
      <exclude name="test/wsdl/inheritance/*Impl.java" />
    </javac>
    <!-- Now create the WSDL file specifying useInheritedMethods -->
    <java2wsdl output="build/work/test/wsdl/inheritance/InheritanceTest.wsdl"
               className= "test.wsdl.inheritance.InheritancePortType"
               namespace="urn:InheritanceTest2"
               useInheritedMethods="true"
               location="http://localhost:8080/axis/services/InheritanceTest">
        <mapping namespace="urn:InheritanceTest2" package="test.wsdl.inheritance"/>
    </java2wsdl>
    <!-- Delete the intermediate files so we recreate over a clean slate -->
    <delete dir="${build.dir}/classes/test/wsdl/inheritance"/>
    <!-- Recreate Java files from the new WSDL -->
    <wsdl2java url="build/work/test/wsdl/inheritance/InheritanceTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="urn:InheritanceTest2" package="test.wsdl.inheritance"/>
    </wsdl2java>

    <!-- inheritance test (cont): Test the stopClass and exclude switches -->
    <!-- Compile class files -->
    <javac srcdir="${test.dir}/wsdl/inheritance" destdir="${build.dest}" debug="${debug}">
        <include name="Baby*.java"/>
        <include name="Child*.java"/>
        <include name="Parent*.java"/>
    </javac>
    <!-- Generate the WSDL file that the test will validate.-->
    <!-- We do not run WSDL2Java for this test -->
    <java2wsdl output="build/work/test/wsdl/inheritance/StopExclude.wsdl"
               className= "test.wsdl.inheritance.Baby"
               namespace="urn:InheritanceTest3"
               useInheritedMethods="true"
               stopClasses="test.wsdl.inheritance.Parent,test.wsdl.inheritance.Parent_bean"
               exclude="baby_excluded,child_excluded"
               location="http://localhost:8080/axis/services/StopExcludeTest">
        <mapping namespace="urn:InheritanceTest3" package="test.wsdl.inheritance"/>
    </java2wsdl>


    <!-- MArrayTests Test -->
    <wsdl2java url="test/wsdl/marrays/MArrayTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
        <mapping namespace="urn:MArrayTests" package="test.wsdl.marrays"/>
    </wsdl2java>

    <!-- MArrayTests Test -->
    <wsdl2java url="test/wsdl/marrays/MArrayTest.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
        <mapping namespace="urn:MArrayTests" package="test.wsdl.marrays"/>
    </wsdl2java>

    <!-- Nested Structure Test -->
    <wsdl2java url="test/wsdl/nested/Nested.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
        <mapping namespace="urn:Nested" package="test.wsdl.nested"/>
    </wsdl2java>

    <!-- Nested Structure Test -->
    <wsdl2java url="test/wsdl/datatypes/DataTypes.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
        <mapping namespace="urn:dataTypes" package="test.wsdl.datatypes"/>
    </wsdl2java>

    <!-- Wrapped Sample Test -->
    <wsdl2java url="test/wsdl/wrapped/CityBBB.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
        <mapping namespace="urn:CityBBB" package="test.wsdl.wrapped"/>
    </wsdl2java>

    <!-- Extensibility Sample Test -->
    <wsdl2java url="test/wsdl/extensibility/QueryTypes.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="no"
               skeletonDeploy="no"
               testcase="no">
        <mapping namespace="urn:QueryTypes" package="test.wsdl.extensibility"/>
    </wsdl2java>
    <wsdl2java url="test/wsdl/extensibility/ExtensibilityQuery.wsdl"
               output="build/work"
               deployscope="session"
               serverSide="yes"
               skeletonDeploy="yes"
               testcase="yes">
        <mapping namespace="urn:ExtensibilityQuery" package="test.wsdl.extensibility"/>
    </wsdl2java>

    <!-- Import Test 1:  some namespace->package mappings from the -->
    <!--                 command line, some generated, some from   -->
    <!--                 NStoPkg.properties.                       -->
    <wsdl2java url="test/wsdl/_import/Import.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="yes">
        <mapping namespace="urn:import" package="test.wsdl.import"/>
        <mapping namespace="urn:importBinding1" package="test.wsdl.import.binding1"/>
        <mapping namespace="urn:importBinding2" package="test.wsdl.import.binding2"/>
    </wsdl2java>

    <!-- Import Test 2:  all namespace->package mappings from the -->
    <!--                 command line.                            -->
    <wsdl2java url="test/wsdl/_import/Import.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="yes">
        <mapping namespace="urn:import" package="test.import2"/>
        <mapping namespace="urn:importBinding1" package="test.import2.binding1"/>
        <mapping namespace="urn:importBinding2" package="test.import2.binding2"/>
        <mapping namespace="urn:types.import.test" package="test.import2.types"/>
        <mapping namespace="urn:iface.import.test" package="test.import2.iface"/>
        <mapping namespace="urn:messages.import.test" package="test.import2.messages"/>
    </wsdl2java>

    <!-- Import Test 3:  all namespace->package mappings from the -->
    <!--                 command line.  Make sure an xsd:import   -->
    <!--                 statement inside a schema inside a type  -->
    <!--                 works properly.                          -->
    <wsdl2java url="test/wsdl/_import/ImportMessagesXSDImport.wsdl"
               output="build/work"
               noimports="no">
        <mapping namespace="urn:types.import.test" package="test.import.test3"/>
    </wsdl2java>

    <!-- Another import test:  relative references via ../.. -->
    <wsdl2java url="test/wsdl/import2/service1/service2/testimport.wsdl"
               output="build/work"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no">
        <mapping namespace="http://test.globus.org/importtest" package="test.wsdl.import2"/>
        <mapping namespace="http://test.globus.org/interface" package="test.wsdl.import2.interface"/>
        <mapping namespace="http://test.globus.org/types" package="test.wsdl.import2.types"/>
    </wsdl2java>

    <!-- InOut Sample -->
    <wsdl2java url="test/wsdl/inout/inout.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="http://www.apache.org/inout" package="test.wsdl.inout"/>
    </wsdl2java>

    <!-- SOAPBuilders Interoperability Lab "Round 1" -->
    <!--     http://www.xmethods.net/ilab/           -->
    <wsdl2java url="http://www.xmethods.net/tmodels/InteropTest.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="http://soapinterop.org/" package="net.xmethods"/>
        <mapping namespace="http://soapinterop.org/xsd" package="net.xmethods"/>
    </wsdl2java>

    <!-- SOAPBuilders Interoperability Lab "Round 2" -->
    <!--     http://www.whitemesa.com/interop.htm    -->
    <wsdl2java url="http://www.whitemesa.com/interop/InteropTest.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="http://soapinterop.org/" package="interop.test"/>
        <mapping namespace="http://soapinterop.org/xsd" package="interop.test"/>
    </wsdl2java>
    <wsdl2java url="http://www.whitemesa.com/interop/InteropTestB.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="http://soapinterop.org/" package="interop.testb"/>
        <mapping namespace="http://soapinterop.org/xsd" package="interop.testb"/>
    </wsdl2java>

    <!-- More information at: http://www.whitemesa.net/  -->
<!--    <wsdl2java url="http://www.whitemesa.com/wsdl/std/echoheadersvc.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="http://soapinterop.org/" package="interop.echoheadersvc"/>
        <mapping namespace="http://soapinterop.org/xsd" package="interop.echoheadersvc"/>
    </wsdl2java>
-->
    <!-- http://www.mssoapinterop.org/stk/roundBC.htm -->
    <wsdl2java url="http://mssoapinterop.org/stk/InteropB.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               skeletonDeploy="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="http://soapinterop.org/" package="mssoapinterop.interopb"/>
        <mapping namespace="http://soapinterop.org/xsd" package="mssoapinterop.interopb"/>
    </wsdl2java>

    <wsdl2java url="http://mssoapinterop.org/stk/InteropBtyped.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="http://soapinterop.org/" package="mssoapinterop.interopbtyped"/>
        <mapping namespace="http://soapinterop.org/xsd" package="mssoapinterop.interopbtyped"/>
    </wsdl2java>

    <wsdl2java url="http://mssoapinterop.org/stk/InteropC.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="http://soapinterop.org" package="mssoapinterop.interopc"/>
        <mapping namespace="http://soapinterop.org/" package="mssoapinterop.interopc"/>
        <mapping namespace="http://soapinterop.org/xsd" package="mssoapinterop.interopc"/>
    </wsdl2java>

    <!-- SOAP Builder's round III web services          -->
    <!-- interoperability testing:  import1             -->
    <!-- (see http://www.whitemesa.com/r3/plan.html)    -->
    <!-- Step 1.  Start with predefined WSDL            -->
    <!-- Step 2.  Generate client from predefined WSDL  -->
    <!-- Step 3.  Test generated client against         -->
    <!--          pre-built server                      -->
    <!-- Step 4.  Generate server from predefined WSDL  -->
    <!-- Step 5.  Test generated client against         -->
    <!--          generated server                      -->
    <!-- Step 6.  Generate second client from           -->
    <!--          generated server's WSDL (some clients -->
    <!--          can do this dynamically)              -->
    <!-- Step 7.  Test second generated client against  -->
    <!--          generated server                      -->
    <!-- Step 8.  Test second generated client against  -->
    <!--          pre-built server                      -->

    <!-- Steps 1, 2 and 4: -->
    <wsdl2java url="http://www.whitemesa.com/r3/import1.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/" package="test.wsdl.interop3.import1"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import1.definitions"/>
    </wsdl2java>
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="on">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/interop3/import1/*.java" />
    </javac>

    <!-- Step 3:  see test/wsdl/interop3/Import1TestCase.java -->
    <!-- Step 5:  see test/wsdl/interop3/Import1TestCase.java -->

    <!-- Step 6:  -->
    <java2wsdl output="build/work/test/wsdl/interop3/import1.wsdl"
               className= "test.wsdl.interop3.import1.definitions.SoapInteropImport1PortType"
               namespace="http://soapinterop.org/definitions/"
               implClass="test.wsdl.interop3.import1.SoapInteropImport1BindingImpl"
           location="http://localhost:8080/axis/services/SoapInteropImport1Port">
        <mapping namespace="http://soapinterop.org/" package="test.wsdl.interop3.import1"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import1.definitions"/>
    </java2wsdl>
    <wsdl2java url="build/work/test/wsdl/interop3/import1.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/" package="test.wsdl.interop3.import1.step6"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import1.step6.definitions"/>
    </wsdl2java>

    <!-- Step 7:  see test/wsdl/interop3/Import1TestCase.java -->
    <!-- Step 8:  see test/wsdl/interop3/Import1TestCase.java -->


    <!-- SOAP Builder's round III web services -->
    <!-- interoperability testing:  import2    -->

    <!-- Steps 1, 2 and 4: -->
    <wsdl2java url="http://www.whitemesa.com/r3/import2.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/main/" package="test.wsdl.interop3.import2"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import2.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.import2.xsd"/>
    </wsdl2java>
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="on">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/interop3/import2/*.java" />
    </javac>

    <!-- Step 3:  see test/wsdl/interop3/Import2TestCase.java -->
    <!-- Step 5:  see test/wsdl/interop3/Import2TestCase.java -->

    <!-- Step 6:  -->
    <java2wsdl output="build/work/test/wsdl/interop3/import2.wsdl"
               className= "test.wsdl.interop3.import2.definitions.SoapInteropImport2PortType"
               namespace="http://soapinterop.org/definitions/"
               implClass="test.wsdl.interop3.import2.SoapInteropImport2BindingImpl"
           location="http://localhost:8080/axis/services/SoapInteropImport2Port">
        <mapping namespace="http://soapinterop.org/main/" package="test.wsdl.interop3.import2"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import2.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.import2.xsd"/>
    </java2wsdl>
    <wsdl2java url="build/work/test/wsdl/interop3/import2.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/main/" package="test.wsdl.interop3.import2.step6"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import2.step6.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.import2.step6.xsd"/>
    </wsdl2java>

    <!-- Step 7:  see test/wsdl/interop3/Import2TestCase.java -->
    <!-- Step 8:  see test/wsdl/interop3/Import2TestCase.java -->


    <!-- SOAP Builder's round III web services       -->
    <!-- interoperability testing:  absolute import2 -->

    <!-- Steps 1, 2 and 4: -->
    <wsdl2java url="http://www.dolphinharbor.org/services/R3Import2/service.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/main/" package="test.wsdl.interop3.absimport2"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.absimport2.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.absimport2.xsd"/>
    </wsdl2java>
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="on">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/interop3/absimport2/*.java" />
    </javac>

    <!-- Step 3:  see test/wsdl/interop3/Import2TestCase.java -->
    <!-- Step 5:  see test/wsdl/interop3/Import2TestCase.java -->

    <!-- Step 6:  -->
 <!-- Commented out by scheu...not working
    <java2wsdl output="build/work/test/wsdl/interop3/absimport2.wsdl"
               className= "test.wsdl.interop3.absimport2.definitions.SoapInteropImport2PortType"
               namespace="http://soapinterop.org/definitions/"
           location="http://localhost:8080/axis/services/SoapInteropImport2Port">
        <mapping namespace="http://soapinterop.org/main/" package="test.wsdl.interop3.absimport2"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.absimport2.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.absimport2.xsd"/>
    </java2wsdl>
    <wsdl2java url="build/work/test/wsdl/interop3/absimport2.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/main/" package="test.wsdl.interop3.absimport2.step6"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.absimport2.step6.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.absimport2.step6.xsd"/>
    </wsdl2java>
-->
    <!-- Step 7:  see test/wsdl/interop3/Import2TestCase.java -->
    <!-- Step 8:  see test/wsdl/interop3/Import2TestCase.java -->


    <!-- SOAP Builder's round III web services -->
    <!-- interoperability testing:  import3    -->

    <!-- Steps 1, 2 and 4: -->
    <wsdl2java url="http://www.whitemesa.com/r3/import3.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/main2/" package="test.wsdl.interop3.import3"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import3.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.import3.xsd"/>
        <mapping namespace="http://soapinterop.org/xsd2" package="test.wsdl.interop3.import3.xsd2"/>
    </wsdl2java>
    <javac srcdir="${build.dir}/work" destdir="${build.dest}" debug="on">
      <classpath refid="test-classpath" />
      <include name="test/wsdl/interop3/import3/*.java" />
    </javac>

    <!-- Step 3:  see test/wsdl/interop3/Import3TestCase.java -->
    <!-- Step 5:  see test/wsdl/interop3/Import3TestCase.java -->

    <!-- Step 6:  -->
    <java2wsdl output="build/work/test/wsdl/interop3/import3.wsdl"
               className= "test.wsdl.interop3.import3.SoapInteropImport3PortType"
               namespace="http://soapinterop.org/definitions/"
               implClass="test.wsdl.interop3.import3.SoapInteropImport3BindingImpl"
           location="http://localhost:8080/axis/services/SoapInteropImport3Port">
        <mapping namespace="http://soapinterop.org/main2/" package="test.wsdl.interop3.import3"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import3.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.import3.xsd"/>
        <mapping namespace="http://soapinterop.org/xsd2" package="test.wsdl.interop3.import3.xsd2"/>
    </java2wsdl>
    <wsdl2java url="build/work/test/wsdl/interop3/import3.wsdl"
               output="build/work"
               serverSide="yes">
        <mapping namespace="http://soapinterop.org/main/" package="test.wsdl.interop3.import3.step6"/>
        <mapping namespace="http://soapinterop.org/definitions/" package="test.wsdl.interop3.import3.step6.definitions"/>
        <mapping namespace="http://soapinterop.org/xsd" package="test.wsdl.interop3.import3.step6.xsd"/>
        <mapping namespace="http://soapinterop.org/xsd2" package="test.wsdl.interop3.import3.step6.xsd2"/>
    </wsdl2java>

    <!-- Step 7:  see test/wsdl/interop3/Import2TestCase.java -->
    <!-- Step 8:  see test/wsdl/interop3/Import2TestCase.java -->

    <ant antfile="test/wsdl/interop3/groupE/Interop3GroupE.xml"/>

    <!-- Name clash test -->
    <wsdl2java url="test/wsdl/clash/clash.wsdl"
               output="build/work"
               testcase="yes"
               serverSide="yes">
    </wsdl2java>

    <!-- WSDL fault generation test -->
    <wsdl2java url="test/wsdl/faults/FaultService.wsdl"
               output="build/work"
               testcase="yes"
               deployscope="none"
               serverSide="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="http://test.com/wsdl/faults" package="test.wsdl.faults"/>
    </wsdl2java>

    <!-- UDDI 1.0 WSDL's -->
<!-- tomj: turn these off while attribute processing is in flux
    <wsdl2java url="http://www.uddi.org/wsdl/inquire_v1.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="urn:uddi-org:api" package="org.uddi.api"/>
        <mapping namespace="urn:uddi-org:inquiry" package="org.uddi.inquiry"/>
    </wsdl2java>
    <wsdl2java url="http://www.uddi.org/wsdl/publish_v1.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="urn:uddi-org:api" package="org.uddi.api"/>
        <mapping namespace="urn:uddi-org:publication" package="org.uddi.publication"/>
    </wsdl2java>
-->

    <!-- XMethods Delayed Quote Service from http://www.xmethods.net/detail.html?id=2 -->
    <wsdl2java url="http://services.xmethods.net/soap/urn:xmethods-delayed-quotes.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="no"
               noimports="no">
    </wsdl2java>

    <!-- Verify files generated based on what is referenced in WSDL -->
    <wsdl2java url="test/wsdl/filegen/FileGen.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="no"
               noimports="no"
               verbose="no"
               testcase="no">
        <mapping namespace="http://test.com/reference" package="test.wsdl.filegen"/>
    </wsdl2java>

    <!-- Same test as above but this time the -a flag is turned on -->
    <wsdl2java url="test/wsdl/filegen/FileGen.wsdl"
               output="build/work"
               serverSide="no"
               all="yes">
        <mapping namespace="http://test.com/reference" package="test.wsdl.filegenAll"/>
    </wsdl2java>

    <!-- Check to make sure we map XML names that are illegal Java correctly -->
    <wsdl2java url="test/wsdl/names/JavaNames.wsdl"
               output="build/work"
               deployscope="none"
               serverSide="yes"
               noimports="no"
               verbose="no"
               testcase="yes">
        <mapping namespace="http://test.com/reference" package="test.filegen"/>
    </wsdl2java>

    <!-- This is (OK, "will be") a comprehensive test of XML schema types -->
    <wsdl2java url="test/wsdl/types/ComprehensiveTypes.wsdl"
               output="build/work"
               serverSide="yes"
               skeletonDeploy="yes"
               helperGen="yes"
               testcase="yes">
    </wsdl2java>

    <!-- This tests parameterOrder.  -->
    <wsdl2java url="test/wsdl/parameterOrder/parameterOrder.wsdl"
               output="build/work"
               serverSide="yes"
               testcase="yes">
    </wsdl2java>

    <!-- This tests the getPort method in generated services.  -->
    <wsdl2java url="test/wsdl/getPort/getPort.wsdl"
               output="build/work"
               serverSide="yes"
               testcase="no">
    </wsdl2java>

    <!-- This tests .NET document/literal WSDL.
         We get this WSDL file from the internet on purpose,
         file is only for reference.
    <wsdl2java url="test/wsdl/literal/SalesRankNPrice.wsdl"
     -->
    <wsdl2java url="http://www.perfectxml.net/WebServices/SalesRankNPrice/BookService.asmx?WSDL"
               output="build/work"
               verbose="no"
               serverSide="no"
               testcase="no">
        <mapping namespace="http://www.PerfectXML.com/NETWebSvcs/BookService" package="test.wsdl.literal"/>

    </wsdl2java>

    <!-- This tests element qualification.  -->
    <wsdl2java url="test/wsdl/qualify/qualifytest.wsdl"
               output="build/work"
               serverSide="yes"
               testcase="yes">
        <mapping namespace="urn:qualifyTest" package="test.wsdl.qualify"/>
    </wsdl2java>

    <!-- This tests element qualification.  -->
    <wsdl2java url="test/wsdl/ram/ram.wsdl"
               output="build/work"
               serverSide="yes"
               testcase="yes">
        <mapping namespace="urn:ram" package="test.wsdl.ram"/>
        <mapping namespace="http://ram.uspto.gov" package="test.wsdl.ram"/>
    </wsdl2java>

    <!-- This tests holders for complextype Bug:10247 -->
    <wsdl2java url="test/wsdl/echo/echo.wsdl"
               output="build/work"
               serverSide="yes"
               testcase="yes">
        <mapping namespace="http://echo.services" package="test.wsdl.echo"/>
        <mapping namespace="http://types.echo.services" package="test.wsdl.echo"/>
    </wsdl2java>

    <!-- jaxrpc sample -->
    <wsdl2java url="samples/jaxrpc/hello/HelloWorld.wsdl"
               output="build/work"
               serverSide="yes"
               testcase="no">
    </wsdl2java>
    
    <!-- The following WSDL are BAD.  We're keeping them here so we can -->
    <!-- check periodically to see whether the owner has fixed them.    -->

    <!-- Real-time Quote Server from http://www.xmltoday.com/examples/soap/realtime.psp -->
    <!--
    <wsdl2java url="http://services.xmltoday.com/vx_engine/wsdl.vep?realtime.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="no"
               noimports="no">
        <mapping namespace="urn:vgx-realtime" package="com.velocigen.thor"/>
    </wsdl2java>

    <wsdl2java url="http://services.xmltoday.com/vx_engine/wsdl_publish.vep/realtime.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="yes"
               noimports="no">
    </wsdl2java>

    More information at: http://www.whitemesa.com/interop/proposalC.html
    this WSDL file is bad.  It refers to portType "InteropTestPortType" but that portType is not defined.
    <wsdl2java url="http://www.whitemesa.com/interop/echoHeaderBindings.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="yes"
               noimports="no">
        <mapping namespace="http://soapinterop.org/" package="interop.echoheader"/>
        <mapping namespace="http://soapinterop.org/xsd" package="interop.echoheader"/>
    </wsdl2java>

    Reverse lookup of US Area codes and International Country codes from
    http://www.soapclient.com/uddi/uddi.sri?requestname=get_xmethods

    namespaces are used improperly

    > WSDL2Java http://www.taragroup.com/bin/AreaCode.exe/wsdl/iGetArea
    java.io.IOException: Emitter failure.  There is an undefined binding (IGetAreabinding) in the WSDL document.
    Hint: make sure <port binding=".."> is fully qualified.

    <wsdl2java url="http://www.taragroup.com/bin/AreaCode.exe/wsdl/iGetArea"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="yes"
               noimports="no">
    </wsdl2java>

    wrong namespace used when referring to types:

    > WSDL2Java http://www.lemurlabs.com/projects/soap/fortune/FortuneService.wsdl
    java.io.IOException: Type http://www.lemurlabs.com/projects/soap/fortune/FortuneService.wsdl:ArrayOfString is referenced but not defined.

    <wsdl2java url="http://www.lemurlabs.com/projects/soap/fortune/FortuneService.wsdl"
               output="build/work"
               testcase="no"
               deployscope="none"
               serverSide="yes"
               verbose="yes"
               noimports="no">
    </wsdl2java>

    -->

  </target>
</project>

