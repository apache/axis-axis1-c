<project name="AxisC" default="production" basedir=".">
	<description>
This ANT script compiles and packages the Apache AxisC runtime binaries and
WSDL2Ws tooling.

This script is intended for use with Java 1.4+ and Apache ANT 1.6+.
Ant is available from: http://ant.apache.org/

To compile C/C++ code you will require the ant-contrib and cpptasks extensions to ANT, within:
	[ant install dir]/lib
These are available from: http://ant-contrib.sourceforge.net/
{Note: You will require both the cpptasks and ant-contrib downloads }

It is intended that the default target be used, which compiles and links all code,
generates documentation and packages ready for distribution.

Associated with this build script are property files for each platform, the script
will automatically determine the correct one to be used;
	- build.Win32.properties
	- build.Linux.properties
	- build.AIX.properties
Please use these to configure directories to suit the needs of your system.

Notes:
* The documentation target requires doxygen be installed and available on the system path
  This is available from: http://www.doxygen.org
* The following compilers will be required;
	- Windows = Microsoft Visual C++ 6.0
	- Linux   = gcc
	- AIX     = Visual Age
	</description>

	<!--
	  Load definition of C/C++ Tasks and Types
	  To allow the compilation and linking of C/C++ code
	  -->
	<taskdef resource="cpptasks.tasks"/>
	<typedef resource="cpptasks.types"/>

	<!--
	  Load definition of Additional Tasks and Types
	  -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!--
	  These properties will be the same for all environments, so have not been
	  included within the property files
	  -->
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.include" value="${basedir}/include"/>
	<property name="dir.tools" value="${basedir}/tools"/>

      <!-- 
        Uncomment the trace property (or put it in your favourite properties file) to 
        instrument the Axis C++ source code with entry/exit trace. This is off by default.
	  <property name="trace" value="true"/> 
        -->

	<!--
	  Compile the Trace tool
	  -->
	<target name="compileTraceTool" depends="initialize" if="trace">
		<mkdir dir="${dir.classes}"/>
		<javac srcdir="${dir.tools}/trace" destdir="${dir.classes}" listfiles="true">
    	      </javac>
	</target>
	
	<!--
	  Package Trace tool code into tracetool.jar
	  -->
	<target name="buildTraceTool" depends="compileTraceTool" if="trace">
		<jar jarfile="${dir.classes}/tracetool.jar" basedir="${dir.classes}">
			<include name="org/apache/axis/tracetool/**"/>
			<manifest>
				<attribute name="Main-Class"
				 value="org.apache.axis.tracetool.AddEntryAndExitTrace"/>
			</manifest>
		</jar>
	</target>
	
	<target name="copyUntracedSource" if="trace">
		<copy todir="${dir.classes}/..">
			<fileset dir="${dir.src}/..">
                        <include name="src/**"/>
                  </fileset>
		</copy>
	</target>

	<target name="runTraceTool" depends="copyUntracedSource" if="trace">
		<java jar="${dir.classes}/tracetool.jar" fork="true">
			<arg value="${dir.src.instrumented}"/>
		</java>
      </target>

	<!--
	  Compile, package and run the trace tool
	  -->
	<target name="addTrace" depends="buildTraceTool, runTraceTool" if="trace"
	  description="Compile, jar and run the trace tool"/>

	<!--
	  Compiler Definitions
	  -->
		<!-- Definition of cc compile for Solaris -->
		<compiler id="SolarisCC" name="CC" if="solaris">
			<compilerarg value="-g" if="debug"/>
			<compilerarg value="-KPIC"/>
			<compilerarg value="-xildoff"/>
			<compilerarg value="-pta"/>
			<compilerarg value="-instances=global"/>
			<defineset>
				<define name="ENABLE_AXIS_EXCEPTION"/>
				<define name="HAVE_CONFIG_H"/>
				<define name="PIC"/>
			</defineset>
			<includepath path="${dir.include}"/>
		</compiler>

		<!--
		  Definition of Visual C++ compiler
		  -->
		<compiler id="VisualC++" name="msvc" if="windows">
			<compilerarg value="/nologo"/>
			<compilerarg value="/MD"/>
			<!-- Display all warnings -->
			<compilerarg value="/W3"/>
			<compilerarg value="/GX"/>
			<compilerarg value="/Gm" if="debug"/>
			<compilerarg value="/ZI" if="debug"/>
			<compilerarg value="/Od"/>
			<includepath path="${dir.include}"/>
			<defineset>
				<define name="WIN32"/>
				<define name="_DEBUG" if="debug"/>
				<define name="NDEBUG" unless="debug"/>
				<define name="_WINDOWS"/>
				<define name="_MBCS"/>
				<define name="_USRDLL"/>
				<define name="ENABLE_AXIS_EXCEPTION"/>
			</defineset>
			<compilerarg value="/FD"/>
			<compilerarg value="/c"/>
		</compiler>
		
		<!--
		  Definition of gcc compile for Linux
	      -->
		<compiler id="Linuxgcc" name="g++" if="linux">
			<compilerarg value="-g" if="debug"/>
			<compilerarg value="-Wall"/>
			<compilerarg value="-Wshadow"/>
			<compilerarg value="-O2"/>
			<defineset>
				<define name="ENABLE_AXIS_EXCEPTION"/>
				<define name="HAVE_CONFIG_H"/>
				<define name="PIC"/>
			</defineset>
			<includepath path="${dir.include}"/>
		</compiler>
		
		<!--
		  Definition of xlc compile for AIX
	      -->
		<compiler id="AIXxlc" name="xlC" if="aix">
			<compilerarg value="-g" if="debug"/>
			<compilerarg value="-V"/>
			<compilerarg value="-qstaticinline"/>
			<defineset>
				<define name="ENABLE_AXIS_EXCEPTION"/>
				<define name="HAVE_CONFIG_H"/>
				<define name="AIX"/>
			</defineset>
			<includepath path="${dir.include}"/>
		</compiler>

	<!--
	  Linker Definitions
	  -->
		<!-- Definition of Solars linker -->
		<linker id="SolarisLinker" name="CC" libtool="true" if="solaris">
			<linkerarg value="-g" if="debug"/>
			<linkerarg value="-Qoption"/>
			<linkerarg value="ld"/>
			<linkerarg value="-zmuldefs"/>
		</linker>

		<!--
		  Definition of Visual C++ linker
		  -->
		<linker id="VisualC++Linker" name="msvc" if="windows">
			<linkerarg value="/debug" if="debug"/>
			<linkerarg value="/machine:I386"/>
			<linkerarg value="/nologo"/>
			<linkerarg value="/pdb:none"/>
		</linker>
	
		<!--
	      Definition of Linux linker
	      -->
		<linker id="LinuxLinker" name="g++" libtool="true" if="linux">
			<linkerarg value="-g" if="debug"/>
			<libset libs="stdc++"/>
		</linker>
		
		<!--
	      Definition of AIX linker
	      -->
		<linker id="AIXLinker" name="xlC" libtool="false" if="aix">
			<linkerarg value="-g" if="debug"/>
			<linkerarg value="-qmkshrobj"/>
			<linkerarg value="-L/usr/lib/threads"/>
			<linkerarg value="-lpthreads"/>
			<linkerarg value="-lm"/>
			<linkerarg value="-lc_r"/>
			<linkerarg value="-lc"/>
		</linker>	

	<!--
	  Determine platform
	  -->
	<target name="pre-init">
		<condition property="solaris">
            	<os name="SunOS"/>
		</condition>
		<condition property="windows">
			<os family="windows"/>
		</condition>
		<condition property="aix">
            <os name="AIX"/>
        </condition>
        <condition property="linux">
            <os name="Linux"/>
        </condition>
	</target>
	
	<!--
	  Initialize properties
      -->
	<target name="initialize" depends="pre-init">
		<condition property="platform" value="SunOS">
			<isset property="solaris"/>
		</condition>
		<condition property="platform" value="Win32">
			<isset property="windows"/>
		</condition>
		<condition property="platform" value="Linux">
			<isset property="linux"/>
		</condition>
		<condition property="platform" value="AIX">
			<isset property="aix"/>
		</condition>
		
		<!-- Load properties from file -->
		<property file="${basedir}/build.${platform}.properties"/>

		<condition property="dir.src.instrumented" value="${dir.classes}/../src">
			<isset property="trace"/>
		</condition>
		<condition property="dir.src.instrumented" value="${dir.src}">
                  <not>
			     <isset property="trace"/>
                  </not>
		</condition>
	</target>

	<!--
	  Compile the Axis Client Library
	  -->
	<target name="compileAxisClient" depends="initialize">
		<mkdir dir="${dir.objects}"/>
		<mkdir dir="${dir.bin}"/>
		<if>
			<not>
				<isset property="aix"/>
			</not>
			<then>
				<cc outfile="${dir.bin}/${clientLibraryName}" objdir="${dir.objects}"
				 exceptions="true" failonerror="false" outtype="shared" multithreaded="true">
				  	<!-- Compilers -->
					<compiler refid="SolarisCC"/>
					<compiler refid="Linuxgcc"/>
					<compiler extends="VisualC++">
						<defineset>
							<define name="AXISCLIENTDLL_EXPORTS"/>
						</defineset>
					</compiler>
					<!-- Additional compiler flag for Client library on all platforms -->
					<defineset>
						<define name="AXIS_CLIENT_LIB"/>
						<define name="ENABLE_AXISTRACE" if="trace"/>
					</defineset>
					<!-- Linkers -->
					<linker refid="SolarisLinker"/>
					<linker refid="LinuxLinker"/>
					<linker refid="VisualC++Linker"/>
					<!-- Files to be compiled -->
					<fileset dir="${dir.src.instrumented}">
						<include name="common/*.cpp"/>
						<include name="engine/*.cpp"/>
						<include name="engine/client/*.cpp"/>
						<include name="soap/*.cpp"/>
						<include name="soap/*.c"/>
						<include name="wsdd/*.cpp"/>
						<include name="xml/*.cpp"/>
						<include name="transport/axis/AxisTransportException.cpp"/>
						<!-- The following files need to be excluded -->
						<exclude name="common/Packet.cpp"/>
						<exclude name="common/AxisSocketUtils.cpp"/>
					</fileset>
				</cc>
			</then>
			<else>
				<cc outfile="${dir.bin}/${clientLibraryFileName}" objdir="${dir.objects}"
				 exceptions="true" failonerror="false" multithreaded="true">
				  	<!-- Compilers -->
					<compiler refid="AIXxlc"/>
					<!-- Additional compiler flag for Client library on all platforms -->
					<defineset>
						<define name="AXIS_CLIENT_LIB"/>
						<define name="ENABLE_AXISTRACE" if="trace"/>
					</defineset>
					<!-- Linkers -->
					<linker refid="AIXLinker"/>
					<!-- Files to be compiled -->
					<fileset dir="${dir.src.instrumented}">
						<include name="common/*.cpp"/>
						<include name="engine/*.cpp"/>
						<include name="engine/client/*.cpp"/>
						<include name="soap/*.cpp"/>
						<include name="soap/*.c"/>
						<include name="wsdd/*.cpp"/>
						<include name="xml/*.cpp"/>
						<include name="transport/axis/AxisTransportException.cpp"/>
						<!-- The following files need to be excluded -->
						<exclude name="common/Packet.cpp"/>
						<exclude name="common/AxisSocketUtils.cpp"/>
					</fileset>
				</cc>
			</else>
		</if>
	</target>

	<!--
	  Compile the Axis Transport Library
	  -->
	<target name="compileAxisTransport" depends="initialize">
		<mkdir dir="${dir.objects}"/>
		<mkdir dir="${dir.bin}"/>
		<if>
			<not>
				<isset property="aix"/>
			</not>
			<then>
				<cc outfile="${dir.bin}/${transportLibraryName}" objdir="${dir.objects}"
				 exceptions="true" failonerror="false" outtype="shared" multithreaded="true">
					<!-- Compilers -->
					<compiler refid="SolarisCC"/>
					<compiler refid="Linuxgcc"/>
					<compiler extends="VisualC++">
						<defineset>
							<define name="AXISTRANSPORTDLL_EXPORTS"/>
						</defineset>
					</compiler>
					<!-- Linkers -->
					<linker refid="SolarisLinker"/>
					<linker refid="LinuxLinker"/>
					<linker extends="VisualC++Linker">
						<syslibset libs="wsock32"/>
					</linker>
					<!-- Files to compile -->
					<fileset dir="${dir.src}">
						<include name="transport/axis/*.cpp"/>
						<!-- The following files need to be excluded -->
						<exclude name="transport/axis/SecureChannel.cpp"/>
					</fileset>
				</cc>
			</then>
			<else>
				<cc outfile="${dir.bin}/${transportLibraryFileName}" objdir="${dir.objects}"
				 exceptions="true" failonerror="false" multithreaded="true">
					<!-- Compilers -->
					<compiler refid="AIXxlc"/>
					<!-- Linkers -->
					<linker refid="AIXLinker"/>
					<!-- Files to compile -->
					<fileset dir="${dir.src}">
						<include name="transport/axis/*.cpp"/>
						<!-- The following files need to be excluded -->
						<exclude name="transport/axis/SecureChannel.cpp"/>
					</fileset>
				</cc>
			</else>
		</if>
	</target>

	<!--
	  Compile the Axis XML Parser Library
	  -->
	<target name="compileAxisXMLParser" depends="initialize">
		<mkdir dir="${dir.objects}/${xmlParserLibraryName}"/>
		<mkdir dir="${dir.bin}"/>
		<if>
			<not>
				<isset property="aix"/>
			</not>
			<then>
				<cc outfile="${dir.bin}/${xmlParserLibraryName}" objdir="${dir.objects}"
				 exceptions="true" failonerror="false" outtype="shared" multithreaded="true">
				 	<!-- Compilers -->
					<compiler refid="SolarisCC"/>
					<compiler refid="Linuxgcc"/>
					<compiler refid="AIXxlc"/>
					<compiler extends="VisualC++">
						<defineset>
							<define name="AXISXMLPARSERXERCES_EXPORTS"/>
						</defineset>
					</compiler>
					<!-- Additional include directory for XML Parser -->
					<includepath path="${dir.xmlParser}/include"/>
					<includepath path="${dir.xmlParser}/lib"/>
					<!-- Linkers -->
					<linker refid="SolarisLinker"/>
					<linker refid="VisualC++Linker"/>
					<linker refid="LinuxLinker"/>
					<linker refid="AIXLinker"/>
					<!-- Additional library of XMLParser -->
					<libset dir="${dir.xmlParser}/lib" libs="${xmlParserLibrary}"/>
					<!-- Files to be compiled -->
					<fileset dir="${dir.src}">
						<include name="xml/${xmlParser}/*.cpp"/>
						<include name="xml/AxisParseException.cpp"/>
					</fileset>
				</cc>
			</then>
			<else>
				<cc outfile="${dir.bin}/${xmlParserLibraryFileName}" objdir="${dir.objects}"
				 exceptions="true" failonerror="false" multithreaded="true">
				 	<!-- Compilers -->
					<compiler refid="AIXxlc"/>
					<!-- Additional include directory for XML Parser -->
					<includepath path="${dir.xmlParser}/include"/>
					<includepath path="${dir.xmlParser}/lib"/>
					<!-- Linkers -->
					<linker refid="AIXLinker"/>
					<!-- Additional library of XMLParser -->
					<libset dir="${dir.xmlParser}/lib" libs="${xmlParserLibrary}"/>
					<!-- Files to be compiled -->
					<fileset dir="${dir.src}">
						<include name="xml/${xmlParser}/*.cpp"/>
						<include name="xml/AxisParseException.cpp"/>
					</fileset>
				</cc>
			</else>
		</if>
	</target>

	<!--
	  Compile the WSDL2Ws code
	  -->
	<target name="compileWSDL2Ws">
		<mkdir dir="${dir.classes}"/>
		<!-- Setup classpath for compiling WSDL2Ws -->
		<path id ="cp">
			<fileset dir="${dir.axisJARs}" includes="*.jar"/>
		</path>
		<!-- Compile WSDL2Ws -->
		<javac srcdir="${dir.src}/wsdl" destdir="${dir.classes}" listfiles="true">
      		<classpath refid="cp"/>
    	</javac>
	</target>
	
	<!--
	  Compile all C/C++ code and WSDL2Ws java code
	  -->
	<target name="compile" depends="compileAxisClient, compileAxisTransport, compileAxisXMLParser, compileWSDL2Ws"
	  description="Compile all C/C++ code and WSDL2Ws java code"/>

	<!--
	  Generate documention
	  Note: Requires doxygen be installed and available on the system path
	  -->
	<target name="documentation" unless="aix" description="Generate documentation" depends="initialize">
		<exec executable="doxygen" dir="${basedir}/docs/apidocs">
			<arg value="${basedir}/docs/apidocs/doxygenconf"/>
		</exec>
	</target>

	<!--
	  Copy across DLLs and library files for windows 
	  -->
	<target name="packageBinsWindows" if="windows">
		<!-- Copy across DLLs -->
		<mkdir dir="${dir.package.bin}"/>
		<copy todir="${dir.package.bin}">
			<fileset dir="${dir.bin}" includes="*.dll" excludes="*_D.dll"/>
		</copy>
		<!-- Copy across library files -->
		<mkdir dir="${dir.package.lib}"/>
		<copy todir="${dir.package.lib}"
		 file="${dir.bin}/${clientLibraryName}.lib"/>
	</target>

	<!--
	  Copy across the binaries for unix
	  Create symbolic links to libraries
	  -->
	<target name="packageBinsUnix" unless="windows">
		<!-- Copy across libraries -->
		<mkdir dir="${dir.package.lib}"/>
		<copy todir="${dir.package.lib}">
			<fileset dir="${dir.bin}" includes="*.so"/>
			<mapper type="glob" from="*.so" to="*.so.0.0.0"/>
		</copy>
		<!-- Create symbolic links to Client library -->
		<symlink link="${dir.package.lib}/lib${clientLibraryName}.so.0"
		 resource="lib${clientLibraryName}.so.0.0.0" overwrite="true"/>
		<!-- Create symbolic links to Transport library -->
		<symlink link="${dir.package.lib}/lib${transportLibraryName}.so.0"
		 resource="lib${transportLibraryName}.so.0.0.0" overwrite="true"/>
		<!-- Create symbolic links to XML Parser library -->
		<symlink link="${dir.package.lib}/lib${xmlParserLibraryName}.so.0"
		 resource="lib${xmlParserLibraryName}.so.0.0.0" overwrite="true"/>
	</target>

	<!--
	  Create additional symbolic links to libraries as required for AIX
	  -->	
	<target name="packageBinsAIX" if="aix" depends="packageBinsUnix">
		<!-- Create symbolic link to Client library -->
		<symlink link="${dir.package.lib}/lib${clientLibraryName}.a"
		 resource="lib${clientLibraryName}.so.0.0.0" overwrite="true"/>
		<!-- Create symbolic link to Transport library -->
		<symlink link="${dir.package.lib}/lib${transportLibraryName}.a"
		 resource="lib${transportLibraryName}.so.0.0.0" overwrite="true"/>
		<!-- Create symbolic link to XML Parser library -->
		<symlink link="${dir.package.lib}/lib${xmlParserLibraryName}.a"
		 resource="lib${xmlParserLibraryName}.so.0.0.0" overwrite="true"/>
	</target>

	<!--
	  Package compiled binaries ready for distribution
	  -->
	<target name="packageBins" depends="packageBinsWindows, packageBinsUnix, packageBinsAIX"/>

	<!--
	  Copy across the Axis include files
	  -->
	<target name="packageIncludeFiles">
		<mkdir dir="${dir.package.include}"/>
		<copy todir="${dir.package.include}">
			<fileset dir="${dir.include}" includes="axis/**"/>
		</copy>
	</target>

	<!--
	  Package WSDL2Ws code into WSDL2Ws.jar
	  -->
	<target name="packageWSDL2Ws">
		<mkdir dir="${dir.package.WSDL2Ws}"/>
		<jar jarfile="${dir.package.WSDL2Ws}/wsdl2ws.jar" basedir="${dir.classes}">
			<include name="org/apache/axis/wsdl/**"/>
			<manifest>
				<attribute name="Main-Class"
				 value="org.apache.axis.wsdl.wsdl2ws.WSDL2Ws"/>
			</manifest>
		</jar>
	</target>
	
	<!--
	  Package Documentation
	  -->
	<target name="packageDocumentation">
		<mkdir dir="${dir.package.docs}"/>
		<copy todir="${dir.package.docs}">
			<fileset dir="${basedir}/docs/apidocs">
				<include name="html/**"/>
				<include name="latex/**"/>
			</fileset>
		</copy>
	</target>

	<!--
	  Package all artifacts ready for distribution
	  -->	
	<target name="package" depends="packageBins, packageIncludeFiles, packageWSDL2Ws, packageDocumentation"
	 description="Package all artifacts ready for distribution"/>

	<!--
	  Validate all artifacts produced for Windows platform
	  -->
	<target name="validateWindows" depends="initialize" if="windows">
		<condition property="missingArtifact">
			<not>
				<and>
					<!-- DLLs -->
					<available file="${dir.package.bin}/${clientLibraryName}.dll"/>
					<available file="${dir.package.bin}/${transportLibraryName}.dll"/>
					<available file="${dir.package.bin}/${xmlParserLibraryName}.dll"/>
					<available file="${dir.package.lib}/${clientLibraryName}.lib"/>
				</and>
			</not>
		</condition>
		<fail message="Not all artifacts have been produced for windows" if="missingArtifact"/>
	</target>

	<!--
	  Validate all artifacts produced for Unix platform
	  -->
	<target name="validateUnix" depends="initialize" unless="windows">
		<condition property="missingArtifact">
			<not>
				<and>
					<!-- Shared Libraries -->
					<available file="${dir.package.lib}/lib${clientLibraryName}.so.0"/>
					<available file="${dir.package.lib}/lib${clientLibraryName}.so.0.0.0"/>
					<available file="${dir.package.lib}/lib${transportLibraryName}.so.0"/>
					<available file="${dir.package.lib}/lib${transportLibraryName}.so.0.0.0"/>
					<available file="${dir.package.lib}/lib${xmlParserLibraryName}.so.0"/>
					<available file="${dir.package.lib}/lib${xmlParserLibraryName}.so.0.0.0"/>
				</and>
			</not>
		</condition>
		<fail message="Not all artifacts have been produced for unix" if="missingArtifact"/>
	</target>
	
	<target name="validateAIX" depends="validateUnix" if="aix">
		<condition property="missingArtifact">
			<not>
				<and>
					<available file="${dir.package.lib}/lib${clientLibraryName}.a"/>
					<available file="${dir.package.lib}/lib${transportLibraryName}.a"/>
					<available file="${dir.package.lib}/lib${xmlParserLibraryName}.a"/>
				</and>
			</not>
		</condition>
		<fail message="Not all artifacts have been produced for AIX" if="missingArtifact"/>
	</target>

	<!--
	  Validate all artifacts produced
	  -->
	<target name="validate" depends="validateWindows, validateUnix, validateAIX">
		<condition property="missingArtifact">
			<not>
				<and>
					<!-- WSDL2Ws Tool -->
					<available file="${dir.package.WSDL2Ws}/wsdl2ws.jar"/>
					<!-- Header Files -->
					<available file="${dir.package.include}/axis" type="dir"/>
					<!-- Documentation -->
					<available file="${dir.package.docs}" type="dir"/>
				</and>
			</not>
		</condition>
		<fail message="Not all artifacts have been produced" if="missingArtifact"/>
	</target>

	<!--
	  Build and package all artifacts ready for distribution
	  -->
	<target name="production" depends="addTrace, compile, documentation, package, validate"
	 description="Build and package all artifacts ready for distribution"/>

	<target name="addDebug">
		<property name="debug" value="true"/>
	</target>

	<!--
	  Build and package all artifacts ready for distribution
	  -->
	<target name="development" depends="addDebug, addTrace, compile, documentation, package, validate"
	 description="Build and package all artifacts"/>

	<!--
	  Remove all generated artifaces
	  -->
	<target name="clean" depends="initialize" description="Remove all generated artifacts">
		<!-- Delete compiled C/C++ code -->
		<delete dir="${dir.bin}"/>
		<delete dir="${dir.objects}"/>
		<!-- Delete compiled WSDL2Ws java classes -->
		<delete dir="${dir.classes}"/>
		<!-- Delete generated Documentation -->
		<delete dir="${basedir}/docs/apidocs/html"/>
		<delete dir="${basedir}/docs/apidocs/latex"/>
		<!-- Delete packaged artifacts -->
		<delete dir="${dir.package.bin}"/>
		<delete dir="${dir.package.lib}"/>
		<delete dir="${dir.package.include}"/>
		<delete dir="${dir.package.WSDL2Ws}"/>
		<delete dir="${dir.package.docs}"/>
	</target>

</project>
