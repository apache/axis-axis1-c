/*
 *   Copyright 2003-2004 The Apache Software Foundation.
// (c) Copyright IBM Corp. 2004, 2005 All Rights Reserved
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

/*
 * Created on Jun 3, 2004
 */
package org.apache.axis.wsdl.wsdl2ws.cpp;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.apache.axis.wsdl.wsdl2ws.BasicFileWriter;
import org.apache.axis.wsdl.wsdl2ws.CUtils;
import org.apache.axis.wsdl.wsdl2ws.WSDL2Ws;
import org.apache.axis.wsdl.wsdl2ws.WrapperFault;
import org.apache.axis.wsdl.wsdl2ws.WrapperUtils;
import org.apache.axis.wsdl.wsdl2ws.info.WebServiceContext;

/**
 * @author nithya
 * @author Samisa Abeysinghe (sabeysinghe@virtusa.com)
 */

public class ExceptionWriter extends BasicFileWriter
{
    private WebServiceContext wscontext;

    private String faultInfoName;

    public ExceptionWriter(WebServiceContext wscontext, String faultInfoName)
        throws WrapperFault
    {
        super(
            WrapperUtils.getClassNameFromFullyQualifiedName(
                wscontext.getSerInfo().getQualifiedServiceName()));
        this.wscontext = wscontext;
        this.faultInfoName = "Axis" + faultInfoName + "Exception";
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.BasicFileWriter#getFilePath()
     */
    protected File getFilePath() throws WrapperFault
    {
        return this.getFilePath(false);
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.BasicFileWriter#getFilePath(boolean)
     */
    protected File getFilePath(boolean useServiceName) throws WrapperFault
    {
        String targetOutputLocation =
            this.wscontext.getWrapInfo().getTargetOutputLocation();
        if (targetOutputLocation.endsWith("/"))
        {
            targetOutputLocation =
                targetOutputLocation.substring(
                    0,
                    targetOutputLocation.length() - 1);
        }
        new File(targetOutputLocation).mkdirs();

        String fileName =
            targetOutputLocation
                + "/"
                + faultInfoName
                + CUtils.CPP_CLASS_SUFFIX;

        if (useServiceName)
        {
            fileName =
                targetOutputLocation
                    + "/"
                    + this.getServiceName()
                    + "_"
                    + faultInfoName
                    + CUtils.CPP_CLASS_SUFFIX;

            this.wscontext.addGeneratedFile(
                this.getServiceName()
                    + "_"
                    + faultInfoName
                    + CUtils.CPP_CLASS_SUFFIX);
        }
        else
        {
            this.wscontext.addGeneratedFile(
                faultInfoName + CUtils.CPP_CLASS_SUFFIX);
        }
        return new File(fileName);
    }

    private String getServiceName() throws WrapperFault
    {
        return wscontext.getSerInfo().getServicename();
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.BasicFileWriter#writePreprocessorStatements()
     */
    protected void writePreprocessorStatements() throws WrapperFault
    {
        try
        {
            if ("AxisClientException".equals(faultInfoName))
            {
                writer.write(
                    "#include \""
                        + getServiceName()
                        + "_"
                        + faultInfoName
                        + CUtils.CPP_HEADER_SUFFIX
                        + "\"\n\n");
            }
            else
            {
                writer.write(
                    "#include \""
                        + faultInfoName
                        + CUtils.CPP_HEADER_SUFFIX
                        + "\"\n\n");
            }
            writer.write("#include <axis/AxisWrapperAPI.hpp>\n\n");
        }
        catch (IOException e)
        {
            throw new WrapperFault(e);
        }
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.BasicFileWriter#writeClassComment()
     */
    protected void writeClassComment() throws WrapperFault
    {
        try
        {
            writer.write("/*\n");
            writer.write(
                " * This file was auto-generated by the Axis C++ Web Service "
                    + "Generator (WSDL2Ws)\n");
            writer.write(
                " * This file contains implementations of the "
                    + getServiceName()
                    + " Exception "
                    + "class of the web service.\n");
            writer.write(" */\n\n");

        }
        catch (IOException e)
        {
            throw new WrapperFault(e);
        }
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.BasicFileWriter#writeConstructors()
     */
    protected void writeConstructors() throws WrapperFault
    {
        try
        {
            String faultName = faultInfoName;

            if ("AxisClientException".equals(faultInfoName))
            {
                faultName = getServiceName() + "_" + faultInfoName;
            }

            writer.write(faultName + "::" + faultName + "()\n{\n");
            writer.write(
                "/* This only serves the purpose of indicating that the \n");
            writer.write(" * service has thrown an excpetion \n");
            writer.write(" */ \n");
            writer.write(
                "\tm_iExceptionCode = AXISC_SERVICE_THROWN_EXCEPTION; \n");
            writer.write("\tprocessException(m_iExceptionCode); \n");
            writer.write("}\n\n");

            writer.write(
                faultName + "::" + faultName + "(ISoapFault* pFault)\n");
            writer.write("{\n");
            writer.write(
                "\tm_iExceptionCode = AXISC_SERVICE_THROWN_EXCEPTION;\n");
            writer.write("\tm_pISoapFault = pFault;\n"); // Fred Preston
            writer.write("\tprocessException(pFault);");
            writer.write("}\n\n");

            writer.write(
                faultName + "::" + faultName + "(int iExceptionCode)\n");
            writer.write("{\n\n");
            writer.write("\tm_iExceptionCode = iExceptionCode;\n");
            writer.write("\tprocessException (iExceptionCode);\n");
            writer.write("}\n\n");

            writer.write(faultName + "::" + faultName + "(exception* e)\n");
            writer.write("{\n");
            writer.write("\tprocessException (e);\n");
            writer.write("}\n\n");

            writer.write(
                faultName
                    + "::"
                    + faultName
                    + "(exception* e,int iExceptionCode)\n");
            writer.write("{\n\n");
            writer.write("\tprocessException (e, iExceptionCode);\n");
            writer.write("}\n\n");

            writer.write(faultName + "::" + faultName + "(string sMessage)\n");
            writer.write("{\n");
            writer.write("\t m_sMessage =sMessage;\n");
            writer.write("}\n\n");

        }
        catch (IOException e)
        {
            throw new WrapperFault(e);
        }
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.BasicFileWriter#writeDestructors()
     */
    protected void writeDestructors() throws WrapperFault
    {
        try
        {
            String faultName = faultInfoName;

            if ("AxisClientException".equals(faultInfoName))
            {
                faultName = getServiceName() + "_" + faultInfoName;
            }
            writer.write(
                faultName
                    + "::~"
                    + faultName
                    + "() throw () \n{\n\tm_sMessage =\"\";\n}\n\n");
        }
        catch (IOException e)
        {
            throw new WrapperFault(e);
        }
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.BasicFileWriter#writeMethods()
     */
    protected void writeMethods() throws WrapperFault
    {
        try
        {
            String faultName = faultInfoName;

            if ("AxisClientException".equals(faultInfoName))
            {
                faultName = getServiceName() + "_" + faultInfoName;
            }
            writer.write(
                "void "
                    + faultName
                    + ":: processException(exception* e, int iExceptionCode)\n");
            writer.write("{\n");
            writer.write(
                "\tm_sMessage = getMessage (e) + getMessage (iExceptionCode);\n");
            writer.write("}\n\n");

            writer.write(
                "void "
                    + faultName
                    + "::processException (ISoapFault* pFault)\n");
            writer.write("{\n");
            writer.write(
                "\t/*User can do something like deserializing the struct into a string*/\n");
            writer.write("}\n\n");

            writer.write(
                "void " + faultName + "::processException(exception* e)\n");
            writer.write("{\n");
            writer.write("\tm_sMessage = getMessage (e);\n");
            writer.write("}\n\n");

            writer.write(
                "void "
                    + faultName
                    + "::processException(int iExceptionCode)\n");
            writer.write("{\n");
            writer.write("\tm_sMessage = getMessage (iExceptionCode);\n");
            writer.write("}\n\n");

            writer.write(
                "const string "
                    + faultName
                    + "::getMessage (exception* objException)\n");
            writer.write("{\n");
            writer.write("\tstring sMessage = objException->what();\n");
            writer.write("\treturn sMessage;\n");
            writer.write("}\n\n");

            writer.write(
                "const string "
                    + faultName
                    + "::getMessage (int iExceptionCode)\n");
            writer.write("{\n");
            writer.write("\tstring sMessage;\n");
            writer.write("\tswitch(iExceptionCode)\n");
            writer.write("\t{\n");
            writer.write("\t\tcase AXISC_SERVICE_THROWN_EXCEPTION:\n");
            writer.write(
                "\t\tsMessage = \"The "
                    + getServiceName()
                    + " service has thrown an exception. see details\";\n");
            writer.write("\t\tbreak;\n");
            writer.write("\t\tdefault:\n");
            writer.write(
                "\t\tsMessage = \"Unknown Exception has occured in the "
                    + getServiceName()
                    + " service\";\n");
            writer.write("\t}\n");
            writer.write("return sMessage;\n");
            writer.write("}\n\n");

            writer.write("const char* " + faultName + "::what() throw ()\n");
            writer.write("{\n");
            writer.write("\treturn m_sMessage.c_str ();\n");
            writer.write("}\n\n");

            writer.write("const int " + faultName + "::getExceptionCode()");
            //damitha
            writer.write("{\n");
            writer.write("\treturn m_iExceptionCode;\n");
            writer.write("}\n\n");

            writer.write("const ISoapFault* " + faultName + "::getFault()");
            //Fred Preston
            writer.write("{\n");
            writer.write("\treturn m_pISoapFault;\n");
            writer.write("}\n\n");

        }
        catch (IOException e)
        {
            throw new WrapperFault(e);
        }
    }

    /* (non-Javadoc)
     * @see org.apache.axis.wsdl.wsdl2ws.SourceWriter#writeSource()
     */
    public void writeSource() throws WrapperFault
    {
        try
        {
            String filename = getFilePath().getName();

            this.writer =
                new BufferedWriter(
                    new FileWriter(
                        getFilePath(filename.startsWith("AxisClientException")),
                        false));
            writeClassComment();
            writePreprocessorStatements();
            writeGlobalCodes();
            writeAttributes();
            writeConstructors();
            writeDestructors();
            writeMethods();
            writer.flush();
            writer.close();
            if (WSDL2Ws.verbose)
                System.out.println(
                    getFilePath().getAbsolutePath() + " created.....");
        }
        catch (IOException e)
        {
            e.printStackTrace();
            throw new WrapperFault(e);
        }
    }

    /**
     * @throws WrapperFault
     */
    protected void writeGlobalCodes() throws WrapperFault
    {}
}
