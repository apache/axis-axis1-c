/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains implementations of an Exception class of the web service.
 */

#include "AxisClientException.h"

#include <axis/server/AxisWrapperAPI.h>

AxisClientException::AxisClientException()
{
/* This only serves the pupose of indicating that the 
 * service has thrown an excpetion 
 */ 
	m_iExceptionCode = AXISC_SERVICE_THROWN_EXCEPTION; 
	processException(m_iExceptionCode); 
}

AxisClientException::AxisClientException(ISoapFault* pFault)
{
	m_iExceptionCode = AXISC_SERVICE_THROWN_EXCEPTION;
	processException(pFault);}

AxisClientException::AxisClientException(int iExceptionCode)
{

	m_iExceptionCode = iExceptionCode;
	processException (iExceptionCode);
}

AxisClientException::AxisClientException(exception* e)
{
	processException (e);
}

AxisClientException::AxisClientException(exception* e,int iExceptionCode)
{

	processException (e, iExceptionCode);
}

AxisClientException::~AxisClientException() throw () 
{
	m_sMessage ="";
}

void AxisClientException:: processException(exception* e, int iExceptionCode)
{
	m_sMessage = getMessage (e) + getMessage (iExceptionCode);
}

void AxisClientException::processException (ISoapFault* pFault)
{	
        /*User can do something like deserializing the struct into a string*/
        const char* pcCmplxFaultName;
	const char* pcDetail;
        if(pFault)
        {
            m_sMessage = "Fault Code:";
            m_sMessage += pFault->getFaultcode();
            m_sMessage += "\n";
            m_sMessage += "Fault String:";
            m_sMessage += pFault->getFaultstring();
            m_sMessage += "\n";
            m_sMessage += "Fault Actor:";
            m_sMessage += pFault->getFaultactor();
            m_sMessage += "\n";

            pcDetail = pFault->getSimpleFaultDetail().c_str();
	    if(NULL != pcDetail && 0 != strcmp("", pcDetail))
                m_sMessage += pcDetail;
	    else
            {
                pcCmplxFaultName = pFault->getCmplxFaultObjectName().c_str();
		//printf("pcCmplxFaultName:%s\n", pcCmplxFaultName);
            }
            if(0 == strcmp("OutOfBoundStruct", pcCmplxFaultName))
            {
                OutOfBoundStruct* pFaultDetail = NULL;
                pFaultDetail = (OutOfBoundStruct*)pFault->
                    getCmplxFaultObject();
                SpecialDetailStruct* pSpecialFaultDetail = pFaultDetail->specialDetail;

                m_sMessage += pFaultDetail->varString;
                m_sMessage += ":";
                m_sMessage += pSpecialFaultDetail->varString;
            }
            else if(0 == strcmp("SpecialDetailStruct", pcCmplxFaultName))
            {
                SpecialDetailStruct* pFaultDetail = NULL;
                pFaultDetail = (SpecialDetailStruct*)pFault->
                    getCmplxFaultObject();

                m_sMessage += pFaultDetail->varString;
            }
            else if(0 == strcmp("DivByZeroStruct", pcCmplxFaultName))
            {
                DivByZeroStruct* pFaultDetail = NULL;
                pFaultDetail = (DivByZeroStruct*)pFault->
                    getCmplxFaultObject();
                char* carrTempBuff =new char[4 * sizeof(char)]; 
                sprintf(carrTempBuff, "%d", pFaultDetail->varInt);
                m_sMessage += string(carrTempBuff);
                m_sMessage += "\n";

                sprintf(carrTempBuff, "%f", pFaultDetail->varFloat);
                m_sMessage += string(carrTempBuff);
                m_sMessage += "\n";

                m_sMessage += pFaultDetail->varString;
            }
        }
}

void AxisClientException::processException(exception* e)
{
	m_sMessage = getMessage (e);
}

void AxisClientException::processException(int iExceptionCode)
{
	m_sMessage = getMessage (iExceptionCode);
}

const string AxisClientException::getMessage (exception* objException)
{
	string sMessage = objException->what();
	return sMessage;
}

const string AxisClientException::getMessage (int iExceptionCode)
{
	string sMessage;
	switch(iExceptionCode)
	{
		case AXISC_SERVICE_THROWN_EXCEPTION:
		sMessage = "A service has thrown an exception. see detail";
		break;
		default:
		sMessage = "Unknown Exception has occured";
	}
return sMessage;
}

const char* AxisClientException::what() throw ()
{
	return m_sMessage.c_str ();
}

const int AxisClientException::getExceptionCode(){
	return m_iExceptionCode;
}

