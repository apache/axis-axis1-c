/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains functions to manipulate complex type ExtensibilityType
 */

#include <malloc.h>
#include <axis/server/AxisWrapperAPI.h>

#include "ExtensibilityType.h"
/*
 * This static method serialize a ExtensibilityType type of object
 */
int Axis_Serialize_ExtensibilityType(ExtensibilityType* param, IWrapperSoapSerializer* pSZ, bool bArray = false)
{
	if ( param == NULL ) {
	 /* TODO : may need to check nillable value*/
	pSZ->serializeAsAttribute("xsi:nil", 0, (void*)&(xsd_boolean_true), XSD_BOOLEAN);
	 pSZ->serialize(">", NULL);
	return AXIS_SUCCESS;
	}
	/* first serialize attributes if any*/
	pSZ->serialize(">", 0);
	/* then serialize elements if any*/
	pSZ->serializeAnyObject(param->any);
	return AXIS_SUCCESS;
}

/*
 * This static method deserialize a ExtensibilityType type of object
 */
int Axis_DeSerialize_ExtensibilityType(ExtensibilityType* param, IWrapperSoapDeSerializer* pIWSDZ)
{
	param->any = pIWSDZ->getAnyObject();
	return pIWSDZ->getStatus();
}
void* Axis_Create_ExtensibilityType(ExtensibilityType* pObj, bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
	{
		if (pObj)
		{
			ExtensibilityType* pNew = new ExtensibilityType[nSize];
			memcpy(pNew, pObj, sizeof(ExtensibilityType)*nSize/2);
			memset(pObj, 0, sizeof(ExtensibilityType)*nSize/2);
			delete [] pObj;
			return pNew;
		}
		else
		{
			return new ExtensibilityType[nSize];
		}
	}
	else
		return new ExtensibilityType;
}

/*
 * This static method delete a ExtensibilityType type of object
 */
void Axis_Delete_ExtensibilityType(ExtensibilityType* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/*
 * This static method gives the size of ExtensibilityType type of object
 */
int Axis_GetSize_ExtensibilityType()
{
	return sizeof(ExtensibilityType);
}

ExtensibilityType::ExtensibilityType()
{
	/*do not allocate memory to any pointer members here
	 because deserializer will allocate memory anyway. */
	any=0;
}

ExtensibilityType::~ExtensibilityType()
{
	/*delete any pointer and array members here*/
	if (any) 
	{ 
		for (int i=0; i<any->_size; i++)
		{
			if (any->_array[i]) free(any->_array[i]);
		}
		free(any);
	}
}
