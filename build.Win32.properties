#####################
# Parser Properties #
#####################

# Typical values are:
#	For Xerces, on Windows:
#		xmlParser = xerces
#		xmlParserLibrary = xerces-c_2
#	For Xerces, on Unix:
#		xmlParser = xerces
#		xmlParserLibrary = xerces-c
#	For Expat, on Unix:
#		xmlParser = expat
#		xmlParserLibrary = expat

# Parsers to be used
xmlParser.xml4c = false
xmlParser.xerces = true
xmlParser.expat = false

## Values used for XML4C
xml4c.xmlParserLibrary = xml4c_5
xml4c.dir.xmlParser = ${env.XML4C_HOME}
xml4c.xmlParserLibraryName = axis_xml4c

## Values used for Xerces
xerces.xmlParserLibrary = xerces-c_2
xerces.dir.xmlParser = ${env.XERCES_HOME}
xerces.xmlParserLibraryName = axis_xerces

## Values used for Expat
expat.xmlParserLibrary = expat
expat.dir.xmlParser = ${env.EXPAT_HOME}
expat.xmlParserLibraryName = axis_expat

# Name for compiled XML Parser library - excluding any prefix or suffix
# eg: For Windows :   axis_xmlParser will produce axis_xmlParser.dll
#     For Unix    :   axis_xmlParser will produce libaxis_xmlParser.so
xmlParserLibraryName = axis_xmlParser

########################
# Transport Properties #
########################

# Transports to be used
transport.axis = false
transport.axis2 = true
transport.libwww = false

## Values used for axis
axis.transportLibraryName = axis_transport

## Values used for axis2
axis2.transportLibraryName = axis2_transport

## Values used for libwww
libwww.transportLibraryName = libwww_transport

# Name for compiled transport library - excluding any prefix or suffix
# eg: For Windows :   axis_transport will produce axis_transport.dll
#     For Unix    :   axis_transport will produce libaxis_transport.so
#
transportLibraryName = axis_transport

#####################
# Client Properties #
#####################

# Name for compiled client - excluding any prefix or suffix
# eg: For Windows :   axis_client will produce axis_client.dll
#     For Unix    :   axis_client will produce libaxis_client.so
clientLibraryName = axis_client

####################
# Trace Properties #
####################

# Instrument the Axis C++ source code with entry/exit trace
dir.src.instrumented = ${basedir}/../../../obj/src

#######################################
# Properties for compiling C/C++ code #
#######################################

# Directory in which to place compiled libraries
dir.bin = ${basedir}/../../../obj/bin

# Directory in which to place object files
dir.objects = ${basedir}/../../../obj/objects

####################################
# Properties for compiling WSDL2Ws #
####################################

# Location of Axis JARs
dir.axisJARs = ${basedir}/../../PreReqs

# Directory in which to place compiled Java classes
dir.classes = ${basedir}/../../../obj/classes

###########################################
# Properties for packaging Binary release #
###########################################
release = axis-c-${version}-${platform}
dir.release = ${basedir}/../../../obj/package/${release}

###############################
# Properties for Deliverables #
###############################
dir.zips = ${basedir}/../../../Zips

############################
# Properties for packaging #
############################
# Base directory for packaging - not used directly within build.xml, just used to simplify this property file
dir.package = ${basedir}/../../../obj/package

# Directory in which to place DLLs - Only used for Windows platform
dir.package.bin = ${dir.package}/bin

# Directory in which to place library files
dir.package.lib = ${dir.package}/lib

# Directory in which to place header files
dir.package.include = ${dir.package}/include

# Directory in which to place WSDL2Ws JAR files
dir.package.WSDL2Ws = ${dir.package}/WSDL2Ws

# Directory in which to place Documentation
dir.package.docs = ${dir.package}/docs

############################################
# Properties for building and running test #
############################################

# Directory in which to place all generated test artifacts
# This is also the directory in which code is built and run
dir.test.generated = ${basedir}/../../../obj/test/generated

# Log files for test results
results.log = ${dir.test.generated}/results.log

# Prefix and suffix used for executables and libraries
# Typical values are:
#   For windows:
#		executableSuffix = .exe
#		librarySuffix = .dll
#		libraryPrefix = 
#	For unix:
#		executableSuffix = 
#		librarySuffix = .so
#		libraryPrefix = lib
#	For AIX (as Unix, except):
#		librarySuffix = .a
executableSuffix = .exe
librarySuffix = .dll
libraryPrefix = 

# Directory containing Axis C libraries
# For Windows this should be ${dir.package.bin}
# For Unix this should be ${dir.package.lib}
dir.libraries = ${dir.package.bin}

# May want to uncomment for testing so the build output is used
#dir.include = ${dir.package.include}

# If only a single language is required then set it here.
# Valid values are cpp or c. Default if unset is both.
target.lang = cpp

# AXISCPP_DEPLOY directory
axiscpp_deploy = ${dir.test.generated}

# Details of server to be used for testing clients
testHost = localhost
testPort = 9080
monitorPort = 13260
