<html>
<title>Axismora WSDL2Ws spsecification</title>
</head>
<link rel="stylesheet" type="text/css" href="AxisMora.css">
</head>
<body>
<h1>Axismora WSDL2Ws spsecification</h1>
<p>
<h3>Contents</h3>
<h4><a href1="#1">1.Functionality</a></h4> 
<a href="#2">1.1 Types of classes</a><br> 
<a href="#3">1.2 Programming Languages</a><br>  
<a href="#4">1.3 Encoding Style</a><br>  
<a href="#5">1.4 Style of the Service</a><br>  
<a href="#6">1.5 Supports for making simple custom types</a><br>  
<a href="#7">1.6 Supported schema type</a><br>  
<h4><a href1="#8">2.Architecture</a></h4> 
<a href="#9">2.1 Outline</a><br>  
<a href="#10">2.2 Mediator WsContext</a><br>  
<a href="#11">2.3 Generator</a><br>  
<a href="#12">2.4 Flow of Execution</a><br>  
<a href="#13">2.5 Class Diagram</a><br>  
<a href="#14">2.5 Sequence Diagram</a><br> 

<h2><a name="1">1.Functionality</a></h2> 
<p>The tool should be able to generate different types of Wrapper.</p> 

<h3><a name="2">1.1 Types of classes</a></h3> 
<p>The Tool Should starts with a WSDL document and generate following classes.</p>
<ul>
<li>Web service class describe by the WSDL document such that application developer fill the logic in the methods (WSDL operations).</li> 
<li>Wrapper class that used to deploy the Service in the LSF Axis engine. (Please refer the Wrapper Specification for more information).</li>  
<li>Parameter classes for each custom type in the WSDL document together with desirealize and seriealize logics   (Please refer the Wrapper Specification for more information).</li>  
<li>Server side stubs for invoke the web service (This part is not implemented yet).</li>  
</ul>
<br>

<h3><a name="3">1.2 Programming Languages</a></h3> 
<p>The tool should able to generate classes for</p> 
<ul>
<li>Java</li> 
<li>C++</li>  
<li>C</li>  
</ul>
<p>
The tool should be extensible to support other programming languages if required.</p>


<h3><a name="4">1.3 Encoding Style</a></h3> 
<p>The tool should be support SOAP1.2 encoding style and extensible to support other encoding styles as well.</p>
<h3><a name="5">1.4 Style of the Service</a></h3> 
<p>The tool should able to generate classes for following styles</p>
<ul>
<li>RPC</li> 
<li>Document</li>  
<li>Messaging</li>  
</ul>
<br>
<h3><a name="6">1.5 Supports for making simple custom types</a></h3> 
<h3>Tool generate Wrapper for custom types in following conditions.</h3>
<ul>
<li>Generate the method signatures of the types (serialize(), desirealize()) so that developer can write serialize desirialize code in most efficient way.</li> 
<li>Generate the complete wrapper for WSDL types like struts.</li>  
<li>Genarate the complete wrappers for Array of any simple or WSDL types like struts.</li>
</ul> <br> 
 
<h3><a name="7">1.6 Supported schema type</a></h3> 
do not support Enumarations.<br><br>
<h2><a name="8">2.Architecture</a></h2>
<h3><a name="9">2.1 Outline</a></h3>
<p>The tool takes a top down approach. It starts with a wsdl document and generates all the classes necessary to deploy the web service. It generates.</p> 
<ul>
<li>Skelton (wrapper class)</li> 
<li>Service (Class to be published)</li> 
<li>Wrapper classes for complex types</li> 
<li>Server side stubs</li> 
</ul>
<p>For more information about the generated classes please refer to the architecture documentation.</p>
 WSG   - WebServiceGenarator<br>
 Usrop - user options<br>
<br>
<img src="images/image007.gif"/>

<p>The blue arrows means the execution will go for one of the objects and black arrows mean tool will go to all the objects.</p>
<p>The factories have used to have right kind of instances at each occasion. The path and how the execution is done depend on the options. e.g. if the targetEngine is client all generators except generator creates server wrapper will be called or else server all generators except generator creates client stub will be called. MSG-WSG and DOC-WSG  will call the generators even they are not shown.</p>


 
<h3><a name="10">2.2 Mediator WsContext</a></h3> 
<p>The WSDL file and the user options are processed by the WSDLWs. The WSDL create a class called wsContext(WebServiceContext) which is the runtime representation of the processed data. This wsContext passes to the generators.  The generators extract the information form the wsContext create the files.The wsContext act as a mediator and create a loosely coupled system.</p>

wsContext has following componets.<br>
<ul>
<li>ServiceInfo   information about service</li> 
<li>WrapperInfo  information about wrapper options</li>
<li>TypeMap  information about custom types</li> 
</ul><br>
<h3><a name="11">2.3 Generator</a></h3>
<p>Generator generate a class depend on the options, It contains a class called SourceWriter and the concrete implementation of the SourceWriter decides what will Genarator generate. The SourceWriter factory create a correct type of generator depend on the options.
</p> 
<h3><a name="12">2.4 Flow of Execution</a></h3> 
<ul>
<li>WSDL file and user options are processed by the WSDL2Ws and WSContext object is created.</li>  
<li>WebServiceGenaratorFactory will create WebServiceGenarator depend on the service style, then the WebServiceGenarator will create right set of Generators to create the set of files.</li>  
<li>Each generator will invoke SourceWriter capable of writing each type of file.</li>  
<li>Rest of the logic is developer to decide (He have all needed info as WsContext).</li>  
</ul>
<h3><a name="13">2.5 Class Diagram</a></h3> 
<img src="images/image004.gif"/>
<p>Above class diagram shows the class structure of the tool. The extensibility has been the major concern of the design.</p>
<h3><a name="14">2.5 Sequence Diagram</a></h3>
<img src="images/image008.jpg"/>
Note.<br>
<p>To really work on this please go through the example3 description at userguide.</p>

</body>
<html>
