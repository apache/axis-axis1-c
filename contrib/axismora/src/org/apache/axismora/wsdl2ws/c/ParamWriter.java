package org.apache.axismora.wsdl2ws.c;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

import javax.xml.namespace.QName;

import org.apache.axismora.soap.XMLTextData;
import org.apache.axismora.wsdl2ws.WrapperFault;
import org.apache.axismora.wsdl2ws.WrapperUtils;
import org.apache.axismora.wsdl2ws.cpp.CPPUtils;
import org.apache.axismora.wsdl2ws.info.Type;
import org.apache.axismora.wsdl2ws.info.WebServiceContext;

/**
 * This class has the basic logic of the genarating Param classes (Type wrappers).
 * The responsibility of writing serializing and desirializing code is given to the
 * concreate subclasses.
 * @author JayaKumaran
 */
public abstract class ParamWriter extends BasicFileWriter{
	public static boolean tagWritten = false;
	public static XMLTextData tag = null;
	
	
	protected static final int INPUT_PARM = 0;
	protected static final int RETURN_PARM = 1;
	protected static final int COMMAN_PARM = 2;

	/* array of parameter types and parameter names of the this param */
	protected String[][] attribs;
    
	protected WebServiceContext wscontext;
    
	/* Type of this param */
	protected Type type;

	public ParamWriter(WebServiceContext wscontext,Type type) throws WrapperFault {
			super(WrapperUtils.getClassNameFromFullyQualifiedName(type.getLanguageSpecificName()));
			this.wscontext = wscontext;
			this.type = type;
			this.attribs = this.getAttribList(wscontext.getSerInfo().getQualifiedServiceName());
	}
 
	protected void writeClassComment() throws WrapperFault {
		try{
			writer.write("///////////////////////////////////////////////////////////////////////////////////\n");
			writer.write("//This file is automatically generated by the Axis C++ Wrapper Class Generator\n");
			writer.write("//Web service wrapper class's implementation generated by Axis WCG\n");
			writer.write("//Parameters and wrapper methos to manipulate "+classname+"\n");
			writer.write("////////////////////////////////////////////////////////////////////////////////////\n\n");
	  } catch (IOException e) {
			e.printStackTrace();
			throw new WrapperFault(e);
		}
	}
   
	/* genarate the arrtibs array */
	public String[][] getAttribList(String Qualifiedname) throws WrapperFault {
		String[][] attribs;
		ArrayList attribfeilds = new ArrayList();
		ArrayList elementfeilds = new ArrayList();

		Enumeration names = type.getAttributeNames();
		while (names.hasMoreElements()){
			attribfeilds.add(names.nextElement());
		}
        
		names = type.getElementnames();
				while (names.hasMoreElements()){
					elementfeilds.add(names.nextElement());
		}
        
        
		//get all the fields
  
		attribs = new String[attribfeilds.size()+elementfeilds.size()][];
		for (int i = 0; i < attribfeilds.size(); i++) {
			//[variablename,typename,typeQNameURI,typeQNamelocalpart,attributeTypeURI,attributeTypeLocalpart]
			attribs[i] = new String[6];
			attribs[i][0] = ((String) attribfeilds.get(i));
   
			Type attribType = type.getTypForAttribName(attribs[i][0]);
            
			if(CPPUtils.isSimpleType(attribType.getName()))
				attribs[i][1] = CPPUtils.getclass4qname(attribType.getName());
			else
				attribs[i][1] = attribType.getLanguageSpecificName();

			attribs[i][2] = attribType.getName().getNamespaceURI();
			attribs[i][3] = attribType.getName().getLocalPart();

			attribs[i][4] = null;
			attribs[i][5] = null;
		}
        
		for (int i = attribfeilds.size(); i < elementfeilds.size()+attribfeilds.size(); i++) {
			attribs[i] = new String[6];
			attribs[i][0] = ((String) elementfeilds.get(i));
   
			Type elementType = type.getElementForElementName(attribs[i][0]).getType();
            
			if(CUtils.isSimpleType(elementType.getName()))
				attribs[i][1] = CUtils.getclass4qname(elementType.getName());
			else
				attribs[i][1] = elementType.getLanguageSpecificName();

		   attribs[i][2] = elementType.getName().getNamespaceURI();
		   attribs[i][3] = elementType.getName().getLocalPart();
		   if(elementType.isArray()){
				Type arrayType = WrapperUtils.getArrayType(elementType);
				attribs[i][4] = arrayType.getName().getNamespaceURI();
				attribs[i][5] = arrayType.getName().getLocalPart();
		   }else{
				attribs[i][4] = null;
				attribs[i][5] = null;
		   }
		}

        
		return attribs;
	}
    
	protected String getCrroectParmNameConsideringArrays(QName name,String classname)throws WrapperFault{
		//System.out.println(name);
		Type t = wscontext.getTypemap().getType(name);
		if(t !=null){ //array or complex types
			if (t.isArray()){
				return t.getLanguageSpecificName();
			}
			else{
				return classname+"*"; //All complex types will be pointers	
			}
		}else if (name != null){
			return CUtils.getclass4qname(name);
		}
		else 
			return classname;
	}
	
}
