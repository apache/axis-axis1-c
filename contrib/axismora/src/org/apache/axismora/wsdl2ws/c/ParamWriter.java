package org.apache.axismora.wsdl2ws.c;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import javax.xml.namespace.QName;

import org.apache.axismora.soap.XMLTextData;
import org.apache.axismora.wsdl2ws.WrapperFault;
import org.apache.axismora.wsdl2ws.WrapperUtils;
import org.apache.axismora.wsdl2ws.info.Type;
import org.apache.axismora.wsdl2ws.info.WebServiceContext;

/**
 * This class has the basic logic of the genarating Param classes (Type wrappers).
 * The responsibility of writing serializing and desirializing code is given to the
 * concreate subclasses.
 * @author JayaKumaran
 */
public abstract class ParamWriter extends BasicFileWriter{
	public static boolean tagWritten = false;
	public static XMLTextData tag = null;
	
	
    protected static final int INPUT_PARM = 0;
    protected static final int RETURN_PARM = 1;
    protected static final int COMMAN_PARM = 2;

	/* array of parameter types and parameter names of the this param */
    protected String[][] attribs;
    
    protected WebServiceContext wscontext;
    
    /* Type of this param */
    protected Type type;

    public ParamWriter(WebServiceContext wscontext,Type type) throws WrapperFault {
            super(WrapperUtils.getClassNameFromFullyQualifiedName(type.getLanguageSpecificName()));
            this.wscontext = wscontext;
            this.type = type;
            this.attribs = this.getAttribList(wscontext.getSerInfo().getQualifiedServiceName());
    }
 
    protected void writeClassComment() throws WrapperFault {
        try{
			writer.write("///////////////////////////////////////////////////////////////////////////////////\n");
			writer.write("//This file is automatically generated by the Axis C++ Wrapper Class Generator\n");
			writer.write("//Web service wrapper class's implementation generated by Axis WCG\n");
			writer.write("//Parameters and wrapper methos to manipulate "+classname+"\n");
			writer.write("////////////////////////////////////////////////////////////////////////////////////\n\n");
      } catch (IOException e) {
            e.printStackTrace();
            throw new WrapperFault(e);
        }
    }
   
 	/* genarate the arrtibs array */
    public String[][] getAttribList(String Qualifiedname) throws WrapperFault {
        String[][] attribs;
        ArrayList feilds = new ArrayList();

        Iterator names = type.getAttribNames();
        while (names.hasNext()){
            feilds.add(names.next());

        }
        //get all the fields
  
        attribs = new String[feilds.size()][];
        for (int i = 0; i < feilds.size(); i++) {
            attribs[i] = new String[4];
            attribs[i][0] = ((String) feilds.get(i));
   
            QName name = type.getTypNameForAttribName(attribs[i][0]);
            
            if(CUtils.isSimpleType(name))
                attribs[i][1] = CUtils.getclass4qname(name);
            else
           		attribs[i][1] = this.wscontext.getTypemap().getType(name).getLanguageSpecificName();

		   attribs[i][2] = name.getNamespaceURI();
		   attribs[i][3] = name.getLocalPart();

        }
        return attribs;
    }
    
 	protected String getCrroectParmNameConsideringArrays(QName name,String classname)throws WrapperFault{
		System.out.println(name);
		Type t = wscontext.getTypemap().getType(name);
		if(t !=null && t.isArray()){
		Iterator e = t.getAttribNames();
		String contentTypeName;
		if(e.hasNext()){	
			QName elementQname = t.getTypNameForAttribName((String)e.next());
			Type type = this.wscontext.getTypemap().getType(elementQname);
			
			
			if(type != null)
				contentTypeName = type.getLanguageSpecificName();
			else{
				contentTypeName = CUtils.getclass4qname(elementQname);
				if(contentTypeName == null)
				throw new WrapperFault("if not inbuild or not in type map what is this type "+elementQname);
			}
	    }else
			throw new WrapperFault("Array with no type ????");	
		return contentTypeName+"[]";
		}else
		return classname;
	}
	
}
