/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *    Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Axis" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.axismora.wsdl2ws.java.client;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.axismora.wsdl2ws.WrapperFault;
import org.apache.axismora.wsdl2ws.WrapperUtils;
import org.apache.axismora.wsdl2ws.info.MethodInfo;
import org.apache.axismora.wsdl2ws.info.ParameterInfo;
import org.apache.axismora.wsdl2ws.info.WebServiceContext;

/**
 * @author jeyakumaran
 */
public class ServiceInterfaceWriter extends JavaInterfaceWriter {
    private ArrayList methods;
    private WebServiceContext wscontext;
    /**
     * @param serviceName
     * @param packageName
     */

    public ServiceInterfaceWriter(WebServiceContext wscontext) {
        super(
            WrapperUtils.getClassNameFromFullyQualifiedName(
                wscontext.getSerInfo().getQualifiedServiceName()),
            WrapperUtils.getPackegeName4QualifiedName(
                wscontext.getSerInfo().getQualifiedServiceName()));

        this.wscontext = wscontext;
        this.methods = wscontext.getSerInfo().getMethods();
    }

    /* (non-Javadoc)
     * @see org.apache.axismora.wsdl2ws.java.JavaInterfaceWriter#writeInterfaceComment()
     */
    protected void writeInterfaceComment() throws WrapperFault {
        try {
            writer.write("/*This interface is automatically generated by \n");
            writer.write("*Axisj_lsf client service generator\n");
            writer.write("*The client side representation of the web service. \n");
            writer.write("*/\n\n");
        } catch (IOException e) {
            e.printStackTrace();
            throw new WrapperFault(e);
        }

    }

    /* (non-Javadoc)
     * @see org.apache.axismora.wsdl2ws.java.JavaInterfaceWriter#writeMethods()
     */
    protected void writeMethods() throws WrapperFault {
        MethodInfo minfo;
        try {
            for (int i = 0; i < methods.size(); i++) {
                minfo = (MethodInfo) this.methods.get(i);
                writer.write("\tpublic ");

                ParameterInfo returnType = minfo.getReturnType();

                if (returnType == null
                    || returnType.getLangName() == null
                    || returnType.getLangName() == "void")
                    writer.write("void ");
                else
                    writer.write(
                        WrapperUtils.getClassNameFromParamInfoConsideringArrays(
                            minfo.getReturnType(),
                            wscontext)
                            + " ");
                writer.write(minfo.getMethodname() + "(");

                //write parameter names 
                Iterator params = minfo.getParameterTypes().iterator();
                if (params.hasNext())
                    writer.write(
                        WrapperUtils.getClassNameFromParamInfoConsideringArrays(
                            (ParameterInfo) params.next(),
                            wscontext)
                            + " param"
                            + 0);

                for (int j = 1; params.hasNext(); j++) {
                    writer.write(
                        ","
                            + WrapperUtils.getClassNameFromParamInfoConsideringArrays(
                                (ParameterInfo) params.next(),
                                wscontext)
                            + " param"
                            + j);
                }

                writer.write(")throws java.rmi.RemoteException;\n");
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WrapperFault(e);
        }

    }

    /* (non-Javadoc)
     * @see org.apache.axismora.wsdl2ws.java.JavaInterfaceWriter#getJavaFilePath()
     */
    protected File getJavaFilePath() throws WrapperFault {
        String targetOutputLocation =
            this.wscontext.getWrapInfo().getTargetOutputLocation();
        if (targetOutputLocation.endsWith("/"))
            targetOutputLocation =
                targetOutputLocation.substring(0, targetOutputLocation.length() - 1);
        new File(
            targetOutputLocation
                + "/"
                + WrapperUtils
                    .getPackegeName4QualifiedName(
                        this.wscontext.getSerInfo().getQualifiedServiceName())
                    .replace('.', '/'))
            .mkdirs();
        String fileName =
            targetOutputLocation
                + "/"
                + this.wscontext.getSerInfo().getQualifiedServiceName().replace('.', '/')
                + ".java";
        return new File(fileName);
    }

    /* (non-Javadoc)
     * @see org.apache.axismora.wsdl2ws.java.client.JavaInterfaceWriter#getExtendsPart()
     */
    protected String getExtendsPart() {
        return "extends java.rmi.Remote";
    }

    /* (non-Javadoc)
     * @see org.apache.axismora.wsdl2ws.java.client.JavaInterfaceWriter#getimplementsPart()
     */
    protected String getimplementsPart() {
        return super.getimplementsPart();
    }

    /* (non-Javadoc)
     * @see org.apache.axismora.wsdl2ws.java.client.JavaInterfaceWriter#writeImportStatements()
     */
    protected void writeImportStatements() throws WrapperFault {
        super.writeImportStatements();
    }
}
