/*
 * Copyright 2003-2004 The Apache Software Foundation.

 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains definitions of the web service
 */

#include "NillableArrays.hpp"


NillableArrays::NillableArrays()
{
}

NillableArrays::~NillableArrays()
{
}

/* This function is called by the AxisEngine when something went wrong
 with the current web service request processing. Appropriate actions should
 be taken here.*/
void NillableArrays::onFault()
{
}
/* This function is called by the AxisEngine when this web service
 library is first loaded. So here we can initialize any global/static
 data structures of this web service or open database connections */
void NillableArrays::init()
{
}
/* This function is called by the AxisEngine when this web service
 library is unloaded. So we can deallocate any global/static data structures
 and close database connections etc here. */
void NillableArrays::fini()
{
}
xsd__boolean_Array * NillableArrays::echoBooleanArray(xsd__boolean_Array * Value0)  
{
	xsd__boolean_Array * outArray = new xsd__boolean_Array();
	outArray = Value0;
	return outArray;
}
xsd__short_Array * NillableArrays::echoShortArray(xsd__short_Array * Value0)  
{
	xsd__short_Array * outArray = new xsd__short_Array();
	outArray = Value0;
	return outArray;
}
xsd__int_Array * NillableArrays::echoIntArray(xsd__int_Array * Value0)  
{
	xsd__int_Array * outArray = new xsd__int_Array();
	outArray = Value0;
	return outArray;
}
xsd__long_Array * NillableArrays::echoLongArray(xsd__long_Array * Value0)  
{
	xsd__long_Array * outArray = new xsd__long_Array();
	outArray = Value0;
	return outArray;
}
xsd__float_Array * NillableArrays::echoFloatArray(xsd__float_Array * Value0)  
{
	xsd__float_Array * outArray = new xsd__float_Array();
	outArray = Value0;
	return outArray;
}
xsd__double_Array * NillableArrays::echoDoubleArray(xsd__double_Array * Value0)  
{
	xsd__double_Array * outArray = new xsd__double_Array();
	outArray = Value0;
	return outArray;
}
xsd__string_Array NillableArrays::echoStringArray(xsd__string_Array Value0)  
{
	xsd__string_Array  outArray = Value0;
	return outArray;
}
