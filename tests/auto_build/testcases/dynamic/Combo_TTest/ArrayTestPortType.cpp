/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "ArrayTestPortType.hpp"

#include <axis/AxisWrapperAPI.hpp>

extern int Axis_DeSerialize_IntArrayType(IntArrayType* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_IntArrayType(IntArrayType *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_IntArrayType(IntArrayType* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_IntArrayType(IntArrayType* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_IntArrayType();

ArrayTestPortType::ArrayTestPortType(const char* pcEndpointUri, AXIS_PROTOCOL_TYPE eProtocol):Stub(pcEndpointUri, eProtocol)
{
}

ArrayTestPortType::ArrayTestPortType()
:Stub(" ", APTHTTP1_1)
{
	m_pCall->setEndpointURI("http://localhost/axis/array");
}

ArrayTestPortType::~ArrayTestPortType()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service methodechoIntArray
 */
IntArrayType* ArrayTestPortType::echoIntArray(IntArrayType* Value0)
{
	IntArrayType* pReturn = NULL;
	const char* pcCmplxFaultName;
	pcCmplxFaultName = NULL;
	try
	{	if (AXIS_SUCCESS != m_pCall->initialize(CPP_DOC_PROVIDER)) return pReturn;
		if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
	m_pCall->setSOAPVersion(SOAP_VER_1_1);
	m_pCall->setOperation("echoIntArray", "http://soapinterop.org");
	includeSecure();
	applyUserPreferences();
	char cPrefixAndParamName0[17];
	sprintf( cPrefixAndParamName0, "%s:arg_0_0", m_pCall->getNamespacePrefix("http://soapinterop.org"));
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_IntArrayType, (void*)Axis_Delete_IntArrayType, cPrefixAndParamName0, Axis_URI_IntArrayType);
	if (AXIS_SUCCESS == m_pCall->invoke())
	{
		if(AXIS_SUCCESS == m_pCall->checkMessage("echoIntArrayResponse", "http://soapinterop.org"))
		{
			pReturn = (IntArrayType*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_IntArrayType, (void*) Axis_Create_IntArrayType, (void*) Axis_Delete_IntArrayType,"echoIntArrayReturn", 0);
		}
	}
	m_pCall->unInitialize();
	return pReturn;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();

		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			m_pCall->unInitialize();
			throw;
		}

		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost/axis/array" );

		if(pSoapFault)
		{
				const char *detail = pSoapFault->getSimpleFaultDetail();
				bool deleteDetail=false;

				if (NULL==detail || 0==strlen(detail))
				{
					detail=m_pCall->getFaultAsXMLString();
					if (NULL==detail)
					{
						detail="";
					}
					else
					{
						deleteDetail=true;
					}
				}

				OtherFaultException ofe(pSoapFault->getFaultcode(),
					pSoapFault->getFaultstring(), pSoapFault->getFaultactor(),
					detail, iExceptionCode);

				if (deleteDetail && NULL!=detail)
				{
					delete [] const_cast<char*>(detail);
				}

				m_pCall->unInitialize();
				throw ofe;
		}
		else
		{
			m_pCall->unInitialize();
			throw;
		}
	}
}

/*Methods for supporting SecureChannel*/

void ArrayTestPortType::SetSecure( char * pszArguments, ...)
{
	int		iArgIndex = 0;
	va_list	args;
	char *	pszArg = NULL;
	
	va_start( args, pszArguments);
	
	if( (pszArg = pszArguments) != NULL)
	{
		do
		{
			if( pszArg == (char *) 1)
			{
				sArguments[iArgIndex] = "true";
			}
			else
			{
				sArguments[iArgIndex] = pszArg;
			}

		iArgIndex++;
		} while( (pszArg = va_arg( args, char *)) != NULL && iArgIndex < 8);

		if( iArgIndex == 6)
		{
			sArguments[iArgIndex] = "false";
		}
	}

	va_end( args);
}

void ArrayTestPortType::includeSecure()
{
	m_pCall->setTransportProperty( SECURE_PROPERTIES, (const char *) &sArguments);
}
