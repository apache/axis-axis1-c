/*
 * Copyright 2003-2004 The Apache Software Foundation.

 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains functions to manipulate complex type IntArrayType
 */

#include <axis/AxisWrapperAPI.hpp>

#include "IntArrayType.hpp"
/*
 * This static method serialize a IntArrayType type of object
 */
int Axis_Serialize_IntArrayType(IntArrayType* param, IWrapperSoapSerializer* pSZ, bool bArray = false)
{
	if ( param == NULL )
	{
	 /* TODO : may need to check nillable value - Now done*/
		pSZ->serializeAsAttribute( "xsi:nil", 0, (void*)&(xsd_boolean_true), XSD_BOOLEAN);
		pSZ->serialize( ">", NULL);
		return AXIS_SUCCESS;
	}

	/* first serialize attributes if any*/
	pSZ->serialize( ">", 0);

	/* then serialize elements if any*/
	pSZ->serializeBasicArray((Axis_Array*)(&param->intItem), Axis_URI_IntArrayType,XSD_INT, "intItem");
	return AXIS_SUCCESS;
}

/*
 * This static method deserialize a IntArrayType type of object
 */
int Axis_DeSerialize_IntArrayType(IntArrayType* param, IWrapperSoapDeSerializer* pIWSDZ)
{
	Axis_Array array;

	array = pIWSDZ->getBasicArray(XSD_INT, "intItem",0);
	param->intItem.m_Array = (xsd__int**)new xsd__int*[array.m_Size];
	param->intItem.m_Size = array.m_Size;

	memcpy( param->intItem.m_Array, array.m_Array, sizeof( xsd__int) * array.m_Size);
	return pIWSDZ->getStatus();
}
void* Axis_Create_IntArrayType(IntArrayType* pObj, bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
	{
		if (pObj)
		{
			IntArrayType* pNew = new IntArrayType[nSize];
			memcpy(pNew, pObj, sizeof(IntArrayType)*nSize/2);
			memset(pObj, 0, sizeof(IntArrayType)*nSize/2);
			delete [] pObj;
			return pNew;
		}
		else
		{
			return new IntArrayType[nSize];
		}
	}
	else
		return new IntArrayType;
}

/*
 * This static method delete a IntArrayType type of object
 */
void Axis_Delete_IntArrayType(IntArrayType* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/*
 * This static method gives the size of IntArrayType type of object
 */
int Axis_GetSize_IntArrayType()
{
	return sizeof(IntArrayType);
}

IntArrayType::IntArrayType()
{
	/*do not allocate memory to any pointer members here
	 because deserializer will allocate memory anyway. */
	intItem.m_Array = 0;
	intItem.m_Size = 0;
}

IntArrayType::~IntArrayType()
{
	/*delete any pointer and array members here*/
}
