/*
 *   Copyright 2003-2004 The Apache Software Foundation.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

 /**
 * @file Call.h
 *
 * This file Contains the Call class and equivalent C function tables
 * that all web service stubs generated by WSDL2Ws tool use to talk
 * to Axis Engine.
 *
 * @author Susantha Kumara (susantha@opensource.lk, skumara@virtusa.com)
 * @author Sanjaya Singharage (sanjayas@opensource.lk)
 * @author Samisa Abeysinghe (sabeysinghe@virtusa.com)
 */
 
/*
 * Revision 1.1  2004/05/24 samisa
 * Added accesser to transport 
 */
 
/*
 * Revision 1.2  2004/05/25 samisa
 * Added accesser to SOAP serializer 
 */

/*
 * Revision 1.3  2004/05/31 samisa
 * Added setProxy
 */

/* Call.h: interface for the Call class.*/


#if !defined(_CALL_H____OF_AXIS_INCLUDED_)
#define _CALL_H____OF_AXIS_INCLUDED_

#include "../server/GDefine.hpp"
#include "../server/Packet.hpp"
#include "../server/TypeMapping.hpp"
#include "../server/AxisUserAPI.hpp"
#include "../server/WSDDDefines.hpp"
#include "../server/IHeaderBlock.hpp"
#include "../server/ISoapHeader.hpp"

AXIS_CPP_NAMESPACE_START

class ClientAxisEngine;
class SOAPTransport;
class MessageData;
class SoapDeSerializer;
class SoapSerializer;

class STORAGE_CLASS_INFO CallBase
{
public:
    virtual void AXISCALL setSOAPVersion(SOAP_VERSION version)=0;
    virtual int AXISCALL setTransportProperty(AXIS_TRANSPORT_INFORMATION_TYPE
        type, const char* value)=0;
	virtual int AXISCALL setHandlerProperty(AxisChar* name, 
		void* value, int len)=0;
    virtual int AXISCALL setProtocol(AXIS_PROTOCOL_TYPE protocol)=0;
    virtual int AXISCALL initialize(PROVIDERTYPE nStyle, int secure)=0;
    virtual int AXISCALL invoke()=0;
    virtual int AXISCALL unInitialize()=0;

    /* Method that set the remote method name */
    virtual void AXISCALL setOperation(const char* pchOperation,
        const char* pchNamespace)=0;
    virtual int AXISCALL setEndpointURI(const char* pchEndpointURI)=0;

    /* Method for adding complex parameters */
    virtual void AXISCALL addCmplxParameter(void* pObject, void* pSZFunct,
        void* pDelFunct, const AxisChar* pName, const AxisChar* pNamespace)=0;
    /* Method for adding complex type array parameters */
    virtual void AXISCALL addCmplxArrayParameter(Axis_Array* pArray,
        void* pSZFunct, void* pDelFunct, void* pSizeFunct,
        const AxisChar* pName, const AxisChar* pNamespace)=0;
    /* Method for adding basic type array parameters */
    virtual void AXISCALL addBasicArrayParameter(Axis_Array* pArray,
        XSDTYPE nType, const char* pName)=0;
    /* Method for adding parameters of basic types */
    virtual void AXISCALL addParameter(void* pValue,const char* pName,
        XSDTYPE nType)=0;

    /* Methods used by stubs to get a deserialized value of an XML element
     * as basic types
     */
    virtual int AXISCALL getElementAsInt(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual xsd__boolean AXISCALL getElementAsBoolean(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned int AXISCALL getElementAsUnsignedInt(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual short AXISCALL getElementAsShort(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned short AXISCALL getElementAsUnsignedShort(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual char AXISCALL getElementAsByte(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned char AXISCALL getElementAsUnsignedByte(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual long AXISCALL getElementAsLong(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual long AXISCALL getElementAsInteger(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned long AXISCALL getElementAsUnsignedLong(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual float AXISCALL getElementAsFloat(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual double AXISCALL getElementAsDouble(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual double AXISCALL getElementAsDecimal(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual AxisChar* AXISCALL getElementAsString(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual AxisChar* AXISCALL getElementAsAnyURI(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual AxisChar* AXISCALL getElementAsQName(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual xsd__hexBinary AXISCALL getElementAsHexBinary(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual xsd__base64Binary AXISCALL getElementAsBase64Binary(const
        AxisChar* pName, const AxisChar* pNamespace)=0;
    virtual struct tm AXISCALL getElementAsDateTime(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual struct tm AXISCALL getElementAsDate(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual struct tm AXISCALL getElementAsTime(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual long AXISCALL getElementAsDuration(const AxisChar* pName,
        const AxisChar* pNamespace)=0;

    /* Methods used by stubs to get a deserialized value of XML attribute
     * as basic types
     */
    virtual int AXISCALL getAttributeAsInt(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual xsd__boolean AXISCALL getAttributeAsBoolean(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned int AXISCALL getAttributeAsUnsignedInt(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual short AXISCALL getAttributeAsShort(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned short AXISCALL getAttributeAsUnsignedShort(const
        AxisChar* pName, const AxisChar* pNamespace)=0;
    virtual char AXISCALL getAttributeAsByte(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned char AXISCALL getAttributeAsUnsignedByte(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual long AXISCALL getAttributeAsLong(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual long AXISCALL getAttributeAsInteger(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual unsigned long AXISCALL getAttributeAsUnsignedLong(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual float AXISCALL getAttributeAsFloat(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual double AXISCALL getAttributeAsDouble(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual double AXISCALL getAttributeAsDecimal(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual AxisChar* AXISCALL getAttributeAsString(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual AxisChar* AXISCALL getAttributeAsAnyURI(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual AxisChar* AXISCALL getAttributeAsQName(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual xsd__hexBinary AXISCALL getAttributeAsHexBinary(const AxisChar*
        pName, const AxisChar* pNamespace)=0;
    virtual xsd__base64Binary AXISCALL getAttributeAsBase64Binary(const
        AxisChar* pName, const AxisChar* pNamespace)=0;
    virtual struct tm AXISCALL getAttributeAsDateTime(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual struct tm AXISCALL getAttributeAsDate(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual struct tm AXISCALL getAttributeAsTime(const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    virtual long AXISCALL getAttributeAsDuration(const AxisChar* pName,
        const AxisChar* pNamespace)=0;

    /* Method used by stubs to get a deserialized value of complex types */
    virtual void* AXISCALL getCmplxObject(void* pDZFunct, void* pCreFunct,
        void* pDelFunct, const AxisChar* pName, const AxisChar* pNamespace)=0;
    /* Method used by stubs to get a deserialized Array of complex types */
    virtual Axis_Array AXISCALL getCmplxArray(void* pDZFunct, void* pCreFunct,
        void* pDelFunct, void* pSizeFunct, const AxisChar* pName,
        const AxisChar* pNamespace)=0;
    /* Method used by stubs to get a deserialized Array of basic types */
    virtual Axis_Array AXISCALL getBasicArray(XSDTYPE nType,
        const AxisChar* pName, const AxisChar* pNamespace)=0;

    virtual int AXISCALL checkMessage(const AxisChar* pName,
        const AxisChar* pNamespace)=0;

    virtual void* AXISCALL checkFault(const AxisChar* pName,
        const AxisChar* pNamespace)=0;

    /* Minimal error check */
    virtual int AXISCALL getStatus()=0;

    virtual AnyType* AXISCALL getAnyObject()=0;
    virtual int AXISCALL addAnyObject(AnyType* pAnyObject)=0;
    virtual const AxisChar* AXISCALL getNamespacePrefix
        (const AxisChar* pNamespace)=0;

    virtual IHeaderBlock* AXISCALL createHeaderBlock(AxisChar *pachLocalName,
        AxisChar *pachUri)=0;

    static bool bInitialized;
};

/* A separate call class object should be used by each thread */
class STORAGE_CLASS_INFO Call : public CallBase
{
public:
    Call();
    virtual ~Call();
    void AXISCALL setSOAPVersion(SOAP_VERSION version);
    int AXISCALL setTransportProperty(AXIS_TRANSPORT_INFORMATION_TYPE type,
        const char* value);
	int AXISCALL setHandlerProperty(AxisChar* name, void* value, int len);
    int AXISCALL setProtocol(AXIS_PROTOCOL_TYPE protocol);
    AXIS_PROTOCOL_TYPE AXISCALL getProtocol();
    int AXISCALL unInitialize();
    int AXISCALL initialize(PROVIDERTYPE nStyle, int secure);
    int AXISCALL invoke();

    /* Method for adding complex parameters */
    void AXISCALL addCmplxParameter(void* pObject, void* pSZFunct,
        void* pDelFunct, const AxisChar* pName, const AxisChar* pNamespace);
    /* Method for adding complex type array parameters */
    void AXISCALL addCmplxArrayParameter(Axis_Array* pArray, void* pSZFunct,
        void* pDelFunct, void* pSizeFunct, const AxisChar* pName,
        const AxisChar* pNamespace);
    /* Method for adding basic type array parameters */
    void AXISCALL addBasicArrayParameter(Axis_Array* pArray, XSDTYPE nType,
        const AxisChar* pName);
    /* Method for adding parameters of basic types */
    void AXISCALL addParameter(void* pValue,const char* pchName,
        XSDTYPE nType);

    /* Method that set the remote method name */
    void AXISCALL setOperation(const char* pchOperation,
        const char* pchNamespace);
    int AXISCALL setEndpointURI(const char* pchEndpointURI);
public:
    IHeaderBlock* AXISCALL createHeaderBlock(AxisChar *pachLocalName,
        AxisChar *pachUri);
    IHeaderBlock* createHeaderBlock();
    int setSoapHeader(ISoapHeader *pSoapHeader);
    /* Methods used by stubs to get a deserialized value of XML element
     * as basic types
     */
    int AXISCALL getElementAsInt(const AxisChar* pName,
        const AxisChar* pNamespace);
        int AXISCALL getFaultDetail(char** ppcDetail);
    xsd__boolean AXISCALL getElementAsBoolean(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned int AXISCALL getElementAsUnsignedInt(const AxisChar* pName,
        const AxisChar* pNamespace);
    short AXISCALL getElementAsShort(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned short AXISCALL getElementAsUnsignedShort(const AxisChar* pName,
        const AxisChar* pNamespace);
    char AXISCALL getElementAsByte(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned char AXISCALL getElementAsUnsignedByte(const AxisChar* pName,
        const AxisChar* pNamespace);
    long AXISCALL getElementAsLong(const AxisChar* pName,
        const AxisChar* pNamespace);
    long AXISCALL getElementAsInteger(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned long AXISCALL getElementAsUnsignedLong(const AxisChar* pName,
        const AxisChar* pNamespace);
    float AXISCALL getElementAsFloat(const AxisChar* pName,
        const AxisChar* pNamespace);
    double AXISCALL getElementAsDouble(const AxisChar* pName,
        const AxisChar* pNamespace);
    double AXISCALL getElementAsDecimal(const AxisChar* pName,
        const AxisChar* pNamespace);
    AxisChar* AXISCALL getElementAsString(const AxisChar* pName,
        const AxisChar* pNamespace);
    AxisChar* AXISCALL getElementAsAnyURI(const AxisChar* pName,
        const AxisChar* pNamespace);
    AxisChar* AXISCALL getElementAsQName(const AxisChar* pName,
        const AxisChar* pNamespace);
    xsd__hexBinary AXISCALL getElementAsHexBinary(const AxisChar* pName,
        const AxisChar* pNamespace);
    xsd__base64Binary AXISCALL getElementAsBase64Binary(const AxisChar* pName,
        const AxisChar* pNamespace);
    struct tm AXISCALL getElementAsDateTime(const AxisChar* pName,
        const AxisChar* pNamespace);
    struct tm AXISCALL getElementAsDate(const AxisChar* pName,
        const AxisChar* pNamespace);
    struct tm AXISCALL getElementAsTime(const AxisChar* pName,
        const AxisChar* pNamespace);
    long AXISCALL getElementAsDuration(const AxisChar* pName,
        const AxisChar* pNamespace);

    /* Methods used by stubs to get a deserialized value of a XML attribute
     * as basic types
     */
    int AXISCALL getAttributeAsInt(const AxisChar* pName,
        const AxisChar* pNamespace);
    xsd__boolean AXISCALL getAttributeAsBoolean(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned int AXISCALL getAttributeAsUnsignedInt(const AxisChar* pName,
        const AxisChar* pNamespace);
    short AXISCALL getAttributeAsShort(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned short AXISCALL getAttributeAsUnsignedShort(const AxisChar* pName,
        const AxisChar* pNamespace);
    char AXISCALL getAttributeAsByte(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned char AXISCALL getAttributeAsUnsignedByte(const AxisChar* pName,
        const AxisChar* pNamespace);
    long AXISCALL getAttributeAsLong(const AxisChar* pName,
        const AxisChar* pNamespace);
    long AXISCALL getAttributeAsInteger(const AxisChar* pName,
        const AxisChar* pNamespace);
    unsigned long AXISCALL getAttributeAsUnsignedLong(const AxisChar* pName,
        const AxisChar* pNamespace);
    float AXISCALL getAttributeAsFloat(const AxisChar* pName,
        const AxisChar* pNamespace);
    double AXISCALL getAttributeAsDouble(const AxisChar* pName,
        const AxisChar* pNamespace);
    double AXISCALL getAttributeAsDecimal(const AxisChar* pName,
        const AxisChar* pNamespace);
    AxisChar* AXISCALL getAttributeAsString(const AxisChar* pName,
        const AxisChar* pNamespace);
    AxisChar* AXISCALL getAttributeAsAnyURI(const AxisChar* pName,
        const AxisChar* pNamespace);
    AxisChar* AXISCALL getAttributeAsQName(const AxisChar* pName,
        const AxisChar* pNamespace);
    xsd__hexBinary AXISCALL getAttributeAsHexBinary(const AxisChar* pName,
        const AxisChar* pNamespace);
    xsd__base64Binary AXISCALL getAttributeAsBase64Binary(const AxisChar*
        pName, const AxisChar* pNamespace);
    struct tm AXISCALL getAttributeAsDateTime(const AxisChar* pName,
        const AxisChar* pNamespace);
    struct tm AXISCALL getAttributeAsDate(const AxisChar* pName,
        const AxisChar* pNamespace);
    struct tm AXISCALL getAttributeAsTime(const AxisChar* pName,
        const AxisChar* pNamespace);
    long AXISCALL getAttributeAsDuration(const AxisChar* pName,
        const AxisChar* pNamespace);

    /* Method used by stubs to get a deserialized value of complex types */
    void* AXISCALL getCmplxObject(void* pDZFunct, void* pCreFunct,
        void* pDelFunct, const AxisChar* pName, const AxisChar* pNamespace);
    /* Method used by stubs to get a deserialized Array of complex types */
    Axis_Array AXISCALL getCmplxArray(void* pDZFunct, void* pCreFunct,
        void* pDelFunct, void* pSizeFunct, const AxisChar* pName,
        const AxisChar* pNamespace);
    /* Method used by stubs to get a deserialized Array of basic types */
    Axis_Array AXISCALL getBasicArray(XSDTYPE nType, const AxisChar* pName,
        const AxisChar* pNamespace);

    int AXISCALL checkMessage(const AxisChar* pName,
        const AxisChar* pNamespace);

    void* AXISCALL checkFault(const AxisChar* pName,
        const AxisChar* pNamespace);

    int AXISCALL getStatus();

    SOAPTransport* getTransport() { return m_pTransport; }
    SoapSerializer* getSOAPSerializer() { return (SoapSerializer*)m_pIWSSZ; }

  /**
    * Set proxy server and port for transport.
    *
    * @param pcProxyHost Host name of proxy server
    * @param uiProxyPort Port of proxy server
    */
    void setProxy(const char* pcProxyHost, unsigned int uiProxyPort);

    AnyType* AXISCALL getAnyObject();
    int AXISCALL addAnyObject(AnyType* pAnyObject);
    const AxisChar* AXISCALL getNamespacePrefix(const AxisChar* pNamespace);

private:
    int openConnection(int secure);
    void closeConnection();
    int makeArray();

private:
    ClientAxisEngine* m_pAxisEngine;
	list<void*> m_handlerProperties;

    /*
       Following are pointers to relevant objects of the ClientAxisEngine
       instance. So they do not belong to this object and are not created
       or deleted
     */
    SoapSerializer* m_pIWSSZ;
    SoapDeSerializer* m_pIWSDZ;
    char* m_pcEndPointUri;
    AXIS_PROTOCOL_TYPE m_nTransportType;
    /*
       Transport object
     */
    SOAPTransport* m_pTransport;

    /* Minimal error check */
    int m_nStatus;
  /**
    * Proxy server name.
    */
    string m_strProxyHost;
  /**
    * Proxy server port.
    */
    unsigned int m_uiProxyPort;
  /**
    * Use Proxy or not?
    */
    bool m_bUseProxy;
    
  /**
    * If this object calls initialize_module, this will be set to true.
    * Helps keep track of whether to call uninitialize_module in destructor.
    * It is possible that initialize_module could have been called already.
    */
    bool m_bModuleInitialized;

};
AXIS_CPP_NAMESPACE_END

extern "C" { 
STORAGE_CLASS_INFO void* getStubObject(AXIS_PROTOCOL_TYPE nProtocol, 
                                       AxisChar* pchEndpointURI); 
STORAGE_CLASS_INFO void destroyStubObject(void* pCall); 
} 

#endif
