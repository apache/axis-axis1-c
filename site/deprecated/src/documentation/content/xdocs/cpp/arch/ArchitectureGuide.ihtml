
<html>
  <head>
    <title>Architecture Guide</title>
  </head>

  <body>


<h1>Architecture Guide</h1>
<h2>
Contents
</h2>
<ul>
<li>
<a href="#intro">Introduction</a>
</li>
<li>
<a href="#webapp">Architecture Overview</a>
</li>


<li><a href="#depend">&nbsp;&nbsp;1.AxisEngine</a>
</li>
<li>
<a href="#start">&nbsp;&nbsp;2.HandlerPool</a>
</li>

<li>
<a href="#msoap">&nbsp;&nbsp;3.Message Model</a>
</li>
<li>
<a href="#install-test">&nbsp;&nbsp;4.Soap Deserializer</a>
</li>
<li>
<a href="#deploy">&nbsp;&nbsp;5.Soap Serializer</a>
</li>

<li>
<a href="#test">&nbsp;&nbsp;6.WSDD Module</a>
</li>

<li>
<a href="#massagef">Message Flow</a>
</li>

<li>
<a href="#wrapper">WSDL2Ws Tool</a>
</li>

<li>
<a href="#Dbook">Diagram Book</a>
</li>
<li>
<a href="#open">Open Issues</a>
</li>
</ul>
<p><a name="intro"/></a></p>
<h2>Introduction</h2>

      <p> This guide describes the architecture of Axis C++ implementation. </p> 

<br>    

      
      <p><a name= "webapp"/></a></p>
    <h2>Architecture Overview</h2>

 <p>Axis C++ is all about deploying C++ web services and processing SOAP messages. Axis C++ architecture closely follows Axis Java in Handler and message paths. </p>

<h3>Handlers and the Message Path in Axis</h3>
<p>Axis C++ implementation follows how handlers and message paths work in Axis Java implementation. 
When the central Axis processing logic runs, a series of Handlers are each invoked in order. The order of invocation is determined by two factors - deployment configuration and whether the engine is a client or a server. The object which is passed to each Handler invocation is a <b>MessageData</b></p>
<br>A MessageData is a structure which contains several important parts:
<a><li> Deserializer</li></a>
<a><li> Serializer</li></a>
<a><li>A bag of properties</li></a>
<br><br> We will be discussing more on each of this later on this Architecture Guide.
 
<h3>Message Path on the Server</h3>
    
<br>The server side message path is shown in the following diagram. The small cylinders represent Handlers and the larger, enclosing cylinders represent Chains (ordered collections of Handlers which will be described shortly). 
<p><center>

<img SRC="../images/c/ag/massagep.jpg" ></center></p>
<br>
<center> figure 1.0</center>
<p>Above diagram shows you how the Axis C++ Engine architecture works to invoke functions of AxisC++ Server Engine.</p> 

A message arrives (in some protocol-specific manner) at a Transport Listener. In this case, let's assume the Listener is an apache module. It's the Listener's job to package the protocol-specific data into a soapstream object (specified in Packet.h), and pass it to Axis C++ Engine to be processed. The soapstream is also loaded with various properties by the Listener -  in this example the property "trtype" would be set to the transport type and the value of the SOAPAction HTTP header is inserted in to a header list. 
The Axis C++ Server Engine's first job is to check what the transport is. Then the MessageData object is created and populated (with Serializer, Deserializer etc). Also the Serializer and Deserializer is initialized. Then the configured handlers and the target web service handler are loaded. All transport, global and service specific handlers are loaded in to Chains. A Chain is also a Handler consisting of a sequence of Handlers which are invoked in turn -- more on Chains later. Transport  request handlers are invoked.
<br>Then the loaded handler chains are invoked in the order as shown in the diagram, passing the MessageData object into the invoke(). 

<br><b>Note:</b>

<br>Service Specific Layer
<br>Actual Web service provider is wrapper Class. Handler Chains invoke a list of Handlers in a while loop and HandlerChains.cpp invoke handler one by one.


<p><a name="#massagef"/></a></p>
<h2>Message Flow</h2>

<h3>Handlers and Chains</h3>

Handlers are invoked in sequence to process messages. At some point in the sequence a Handler may send a request and receive a response or else process a request and produce a response. Such a Handler is known as the pivot point of the sequence. As described above, Handlers are either transport-specific, service-specific, or global. The Handlers of each of these three different kinds are combined together into Chains. So the overall sequence of Handlers comprises three Chains: transport, global, and service. The following diagram shows two sequences of handlers: the client-side sequence on the left and the server-side sequence on the right. 

<p><center>

<img SRC="../images/c/ag/pivots.jpg" ></center></p>
<center>figure 3.0</center>

<p>A web service does not necessarily send a response message to each request message, although many do. However, response Handlers are still useful in the message path even when there isn't a response message, e.g. to stop timers, clean up resources, etc. 
A Chain is a composite Handler, i.e. it aggregates a collection of Handlers as well as implementing the Handler interface</p>
<p>A Chain also has similarities to the Chain of Responsibility design pattern in which a request flows along a sequence of Handlers until it is processed. Although an Axis Chain may process a request in stages over a succession of Handlers, it has the same advantages as Chain of Responsibility: flexibility and the ease with which new function can be added. 
Back to message processing -- a message is processed by passing through the appropriate Chains. A message Data  is used to pass the message and associated environment through the sequence of Handlers. The model is that Axis Chains are constructed offline by having Handlers added to them one at a time. Then they are turned online and message data start to flow through the Chains.  
Handlers and Chains can be defined to have 'request', 'session', or 'application' scope. 

<p><a name="depend"/></a></p>
 <h2>1.Axis Engine</h2>

AxisEngine contains the core logic of the message flow. AxisEngine's "Process" method contains the message flow logic. Following sequence diagrams show the message flow logic.
Following Diagram shows how the transport listener passes the SOAP message to the AxisEngine. AxisEngine is a singleton object for a process.

<p><center>

<img SRC="../images/c/ag/d1-3.jpg"></center></p>
  
<p><a name="start"/></a></p>
    <h2>2.HandlerPool</h2>

AxisEngine instantiates a HandlerPool object in its constructor. HandlerPool does the following 3 tasks,<p>
<br>1.	Loads and keeps Transport and Global handlers. 
<br>2.	Loads service specific handlers when needed and unloads when needed. 
<br>3.	Loads target web service handler when needed and unloads when needed. </p>
To provide above functionality the HandlerPool makes use of other two classes HandlerChain and HandlerLoader. HandlerLoader loads holds and unloads the dynamic link library (or shared object) that contain either a handler or a web service. HandlerChain is used to keep a list of handlers to be invoked in order. HandlerChain itself is a handler.<p>
In order for the HandlerLoader to dynamically load a class, every DLL (or Shared object) must have following export functions. </p>
<p>int GetClassInstance(DCLInterface **inst); 
<p>int DestroyInstance(DCLInterface *inst);
<p>AxisEngine has no idea of any web service methods in the deployed web service class that is dynamically loaded from a DLL. Therefore in order to communicate with loaded class we have to have a known interface. This interface is known as <b>BasicHandler</b>and is known to AxisEngine. This interface is implemented by every webservice and a handler.</p>



  

<p><a name="msoap"/></a></p>
<h2>3.Message Model</h2>

The XML syntax of a SOAP message is fairly simple. A SOAP message consists of an envelope containing: 
<br>·	an optional header containing zero or more header entries (sometimes ambiguously referred to as headers), 
<br>·	a body containing zero or more body entries, and 
<br>·	zero or more additional, non-standard elements. 

<br><br>The only body entry defined by SOAP is a SOAP fault which is used for reporting errors. 
Some of the XML elements of a SOAP message define namespaces, each in terms of a URI and a local name, and encoding styles, a standard one of which is defined by SOAP. 
Header entries may be tagged with the following optional SOAP attributes: 
·	actor which specifies the intended recipient of the header entry in terms of a URI, and 
·	mustUnderstand which specifies whether or not the intended recipient of the header entry is required to process the header entry. 
So the SOAP message model looks like this: 
 
<p><center>

<img SRC="../images/c/ag/soap.jpg" ></center></p>






<p><a name="install-test"/></a>
    <h2> 4.Soap Deserializer</h2>

<p>Currently the Soap Deserializer is implemented using SAX2 parser. Soap Deserializer exposes and API such that the API is independent of the implementation.</p> 
<p><a name="deploy"/></a></p>
      <h2>5.Soap Serializer </h2>

<p>Soap Serializer's task is to generate the SOAP stream to be sent. There are a set of functions (API that is the opposite functionality with Soap Deserializer). Once the Serializer is given all the information that is required to generate a SOAP using the API, the getStream(..) function can be used to generate the SOAP message.</p>

<p><a name="test"/></a></p>
    <h2>6.WSDD Module </h2>  

     
WSDD module is a set of classes that parses the deployment descriptor file(server.wsdd) which, is a XML file and makes the information available to the AxisEngine. The WSDD module represents the structure of a WSDD file.                         
  





<p><a name="wrapper"/></a></p>
<h2>WSDL2Ws Tool</h2>
 WSDL2Ws Tool is generated Client Side stubs and server side skeletons and wrappers.It's architecture is described in
 <a href ="WSDL2Ws.html"> WSDL2Ws.html </a></p>


<p><a name="Dbook"/></a></p>
<h2>Diagram Book</h2>

 <p> This<a href ="usecase.html"> Diagram Book </a>includes Following Diagrames which are drawn to describe Axis Cpp Engine and it's process.</p> 

<p>1) Use case diagram(s)</p>
<p>2) Sequence diagrams</p>
<p>3) Class diagrams(s)</p>
<p>4) Deployment diagram(s)</p>



<p><a name="open"/></a></p>
<h2>Open Issues</h2>

<hr size=1 noshade= />

  </body>
</html>
