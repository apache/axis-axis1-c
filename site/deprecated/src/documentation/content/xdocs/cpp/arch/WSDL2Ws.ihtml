<html>
  <head>
    <title>WSDL2Ws Tool</title>
    <link href="axis.css" rel=stylesheet type=text/css>
  </head>

  <body>
<table cellspacing=0 width=100% border=0>
<tr>
<td colspan=2>
<a href="http://xml.apache.org/axis">

</a>


<h1>
WSDL2Ws
</h1>
</td>
</tr>
</table>

<hr size=1 noshade= />
<strong>
Contents
</strong>
<ul>
<li>
<a href="#intro">1.Fuctionality</a>
</li>
<li>
<a href="#webapp">&nbsp;&nbsp;1.1Types Of Classes</a>
</li>
<li>
<a href="#depend">&nbsp;&nbsp;1.2Programming Languages</a>
</li>
<li>
<a href="#websvc">&nbsp;&nbsp;1.3Encoding Style</a>
</li>
<li>
<a href="#start">&nbsp;&nbsp;1.4Style Of the Service</a>
</li>
<li>
<a href="#install-test">&nbsp;&nbsp;1.5Supports for Making Simple Custom Types </a>
</li>

<li>
<a href="#test">2.Architecture</a>
</li>

<li>
<a href="#test1">&nbsp;&nbsp;2.1 Out Line</a>
</li>

<li>
<a href="#test2">&nbsp;&nbsp;2.2 Mediator WsContext</a>
</li>


<li>
<a href="#test3">&nbsp;&nbsp;2.3 Generator</a>
</li>


<li>
<a href="#test4">&nbsp;&nbsp;2.4 Flow Of Execution</a>
</li>

<li>
<a href="#test5">&nbsp;&nbsp;2.5 Sequence Diagram</a>
</li>

</ul>

<p class="MsoNormal"><span style="font-family:Verdana;color:black">
    <a name="intro"/></a>
      <h1>1. Functionality </h1></P>

<p class="MsoNormal"><span style="font-family:Verdana;color:black">

      <p>The tool should be able to generate different types of Wrappers and Skelentons for the server side and client’s stubs for the client’s Side.WSDL2Ws tool in AxisC++  is written in  Java.
    
      
      
      <a name= "webapp"/></a>    
    <h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1 Types Of Classes</h2>



    <p>The Tool Should starts with a WSDL document and generate following classes.
     

<P class=MsoNormal style="MARGIN-LEFT: 76pt; TEXT-INDENT: -18pt">
<SPAN 
style="COLOR: black; FONT-FAMILY: Symbol; FONT-SIZE: 10pt">·<SPAN 
style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN></SPAN><SPAN style="COLOR: black; FONT-FAMILY: Verdana">WSDL2WS tool is used for building following C/C++ components<p>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   o Server side – Skeletons and Wrappers</p>
<p>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  o Client side – Stubs</p>
 </SPAN></P>

<SPAN 
style="COLOR: black; FONT-FAMILY: Symbol; FONT-SIZE: 10pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;·<SPAN 
style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN></SPAN><SPAN style="COLOR: black; FONT-FAMILY: Verdana"> <b>WSDL2WS tool</b> that generates wrappers which  used to deploy the Service in the AxisC++ engine. (Please refer the Wrapper Specification for more information) 

  <p>The generated Wrappers perform the following functions. These wrappers act                as RPC Providers. </p>

<p>o  Serialization</p>
<p>o  Deserialization</p>
<p>o  Method invocation</p>







    <a name="depend"/></a>
    <h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.2  Programming Languages </h2>
    
<p> The tool should able to generate classes for 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; •	C++ </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; •	C </p>
  </p>  

<p><b>The tool should be extensible to support other programming languages if required.</b></p>



    
    <a name="websvc"/></a>
    <h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.3 encoding style</h2>

    <p>The tool should be support SOAP1.2 encoding style and extensible to support other encoding styles as well.
 </p>


    <a name="start"/></a>
    <h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.4 Style Of the Service</h2>

    <p>The tool should able to generate classes for following styles
<p>•	RPC </p>
<p>•	Document </p>
<p>•	Messaging </P>
 

 
        <a name="install-test"/></a>
    <h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.5 Supports for making simple custom types</h2>



   
     <p>Tool generate Wrapper for custom types in following conditions
<p>•	Generate the method signatures of the types (serialize(), desirealize()) so that developer &nbsp;&nbsp; can write serialize desirialize code in most efficient way.</P> 
<p>•	Generate the complete wrapper for WSDL types like struts
   </p>

<p>•	Genarate the complete wrappers for Array of any simple or WSDL types like struts </p> 


    




      <a name="test"/></a>
    <h1>2.Architecture</h1>
    
   
 <a name="test1"/></a>
    <h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1 Outline</h2>


<p>The tool takes a top down approach. It starts with a wsdl document and generates all the classes necessary to deploy the web service. It generates </p>
<p>•	Skeleton (wrapper class) </p>
            
<p>•	Wrapper classes for complex types </p>
<p>•	Server side and client Side stubs 
<br>
The tool can be extensible to generate Service classes to be published 
For more information about the generated classes please refer to the architecture documentation.
<align="left">
<img SRC="../images/c/ag/wsdl2ws.jpg" ></align></p>


<a name="test2"/></a>
    <h2>&nbsp;&nbsp;2.1 Mediator WsContext</h2>



<p>The WSDL file and the user options are processed by the WSDLWs. The WSDL create a class called wsContext(WebServiceContext) which is the runtime representation of the processed data. This wsContext passes to the generators.  The generators extract the information form the wsContext create the files.The wsContext act as a mediator and create a loosely coupled system.<p>

<h3>wsContext has following componets</h3>

<p>1.  ServiceInfo –  information about service </p>
<p>2.  WrapperInfo – information about wrapper options</p> 
<p>3.  TypeMap – information about custom types </p>



<a name="test3"/></a>
    <h2>&nbsp;&nbsp;&nbsp;2.2 Genarator
</h2>

<p>Generator generate a class depend on the options, It contains a class called SourceWriter and the concrete implementation of the SourceWriter decides what will Genarator generate. The SourceWriter factory create a correct type of generator depend on the options.</p>

<a name="test4"/></a>
    <h2>&nbsp;&nbsp;&nbsp;2.4 flow of execution
</h2>

<p>1.WSDL file and user options are processed by the WSDL2Ws and WSContext object is created.</p> 
<p>2. WebServiceGenaratorFactory will create WebServiceGenarator depend on the service style </p>
<p>3. Then the WebServiceGenarator will create right set of Generators to create the set of files</p> 
<p>4.Each generator will invoke SourceWriter capable of writing each type of file. 
Rest of the logic is developer to decide (He have all needed info as WsContext). 




</p>


<a name="test5"/></a>
    <h2>&nbsp;&nbsp;&nbsp;2.5 Sequence Diagram
</h2>

<p><center>

<img SRC="../images/c/ag/sequence.jpg" ></center></p>


<hr size=1 noshade= />

  </body>
</html>
