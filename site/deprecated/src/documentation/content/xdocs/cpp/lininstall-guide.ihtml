<html>
<head>
<meta http-equiv="Content-Type" content="text/html">
<title>Axis C++ Linux Installation Guide</title>
</head>
<body>
<h1>Axis C++ Linux Installation Guide</h1>
</div>
<div class="h3">
<div class="h3">
<h3>Installing and deploying web applications using xml-AxisC++</h3>
</div>
<div class="h3">
<h3>Contents</h3>
</div>

<li>
<a href="#Introducti">Introduction</a>
</li>
<li>
<a href="#What">What You Need</a>
</li>
<p>
<a name="Introducti"></a>
</p>
<div class="h3">
<h3>Introduction</h3>
</div>
<p>This guide will help you to start with Axis C++. I'll explain the minimum steps needed to build and run Axis C++, and warn you about the common pitfalls.</p>
<p>
<a name="What"></a>
</p>
<div class="h3">
<h3>What You need</h3>
</div>
<p>It needs a few helper libraries, for logging, WSDL processing and introspection. You need to have following in order to run Axis C++ engine.</p>
&nbsp &nbsp &nbsp RedHat 9(2.4.20-8) <br>
&nbsp &nbsp &nbsp expat-1.95.7(source) <br>
&nbsp &nbsp &nbsp xerces-c-src2_2_0(I build xerces from source) <br>
&nbsp &nbsp &nbsp httpd-2.0.48(source)<br>
&nbsp &nbsp &nbsp apache_1.3.27(source) <p>

<p><b>Note: In my environment I have autoconf 2.57, automake 1.6.3, libtool 1.4.3,  gcc 3.2.2</b></p>
<p> You can download the Axis C++ source or binary from one of the apache mirror sites <br>
    http://ws.apache.org/axis/cpp/download.html<br>
You can get expat from the uri http://sourceforge.net/projects/expat/<br>

You can get xercesc from the uri http://www.xml.apache.org/xerces-c/download.cgi<br>

You must define some environment variables in order to build.AXISCPP_HOME is where you checkout Axis C++</p>
<br>
<p><b>AXISCPP_HOME="/home/damitha/projects/axiscpp"</b><br>
<b>AXIS_HOME="/usr/local/Axis"</b><br>
<b>EXPAT_HOME="/usr/local/expat1957"</b><br>
<b>XERCESC_HOME="/usr/local/xerces-c"</b><br>
<b>LD_LIBRARY_PATH="$XERCESC_HOME/lib:$EXPAT_HOME/lib:$AXISCPP_HOME/bin:$AXIS_HOME/libs:$LD_LIBRARY_PATH"</b><br>
<b>export AXISCPP_HOME AXIS_HOME XERCESC_HOME EXPAT_HOME LD_LIBRARY_PATH</b></p>

<p><b>A note about AXIS_HOME</b></p>
<p>Copy $AXISCPP_HOME/deploy folder to a place of your choice and define AXIS_HOME pointing to it.<br>
<b>cp -rf $AXISCPP_HOME/deploy /usr/local/</b><br>
<b>mv /usr/local/deploy /usr/local/Axis</b><br>
Give read write permissions to /usr/local/Axis<br><br>

<p>EXPAT_HOME points to where you installed expat <br>
XERCESC_HOME points to where you installed xereces-c</p>

<p>Axis C++ core is independant of the parser layer and transport layer.</p>
<p>You can write your own transport or parser library according to the APIs provided. Currently Axis C++provides API implementations for Xerces-c and Expat. It also provides it's own client side transport library implementation. In the server side deployment, Axis C++ provides two modules that can be loaded into apache1.3 and apache 2 as shared libraries.</p>
<p>So this sums upto two posibilities.<br>
You can deploy Axis C++ server <br>
&nbsp &nbsp On Apache2 with xercesc parser or expat parser(Only one parser at a time)<br>
&nbsp &nbsp On Apache1.3 with xercesc parer or expat parser<br>
So if you use only Expat no need to define XERCESC_HOME vice versa.</p>

<p><b>When you build Axis C++ you can give options</b></p>
<p><b>1) Build for Apache2</b><br>
   With Expat parser support only<br>
   With Xerces parser support only<br>
   With both parser support</p>
<p><b>2) Build for Apache1.3</b><br>
   With Expat parser support only<br>
   With Xerces parser support only<br>
   With both parser support</p>
<p>You can choose these selections on $AXISCPP_HOME/configure.ac</p>

<p>#<b>{apache2 block starts</p>
<p>#if you use apache2 <br>
#if you need to build both axis_expat and axis_xerces libraries</b><br>


<p>AC_OUTPUT(Makefile src/Makefile src/common/Makefile src/soap/Makefile src/wsdd/Makefile src/xml/Makefile<br> src/transport/Makefile src/transport/axis/Makefile src/engine/Makefile src/engine/server/Makefile src/engine/client/Makefile <br> src/server/Makefile src/server/apache2/Makefile src/server/simple_axis_server/Makefile src/server/adminservice/Makefile<br> src/client/Makefile src/client/adminclient/Makefile src/xml/expat/Makefile src/xml/xerces/Makefile)</p>

<p><b>#if you need to build only axis_expat</b></p>
<p>#AC_OUTPUT(Makefile src/Makefile src/common/Makefile src/soap/Makefile src/wsdd/Makefile src/xml/Makefile<br> src/transport/Makefile src/transport/axis/Makefile src/engine/Makefile src/engine/server/Makefile src/engine/client/Makefile<br>  src/server/Makefile src/server/apache2/Makefile src/server/simple_axis_server/Makefile src/server/adminservice/Makefile<br> src/client/Makefile src/client/adminclient/Makefile src/xml/expat/Makefile)</p>

<p><b>#if you need to build only axis_xerces</b></p>
<p>#AC_OUTPUT(Makefile src/Makefile src/common/Makefile src/soap/Makefile src/wsdd/Makefile src/xml/Makefile<br> src/transport/Makefile src/transport/axis/Makefile src/engine/Makefile src/engine/server/Makefile src/engine/client/Makefile<br>  src/server/Makefile src/server/apache2/Makefile src/server/simple_axis_server/Makefile src/server/adminservice/Makefile<br> src/client/Makefile src/client/adminclient/Makefile src/xml/xerces/Makefile)</p>

<p><b>#apache2 block ends</b><br>
                                                                                                                             
#<b>{apache1.3 block starts</b><br>
<p><b>#if you use apache1.3 and  you need to build both axis_expat and axis_xerces libraries</b></p>
<p>#AC_OUTPUT(Makefile src/Makefile src/common/Makefile src/soap/Makefile src/wsdd/Makefile src/xml/Makefile<br> src/transport/Makefile src/transport/axis/Makefile src/engine/Makefile src/engine/server/Makefile src/engine/client/Makefile<br>  src/server/Makefile src/server/apache/Makefile src/server/simple_axis_server/Makefile src/server/adminservice/Makefile<br> src/client/Makefile src/client/adminclient/Makefile src/xml/expat/Makefile src/xml/xerces/Makefile)</p>

<p><b>#if you need to build only axis_expat</b></p>
<p>#AC_OUTPUT(Makefile src/Makefile src/common/Makefile src/soap/Makefile src/wsdd/Makefile src/xml/Makefile<br> src/transport/Makefile src/transport/axis/Makefile src/engine/Makefile src/engine/server/Makefile src/engine/client/Makefile<br>  src/server/Makefile src/server/apache/Makefile src/server/simple_axis_server/Makefile src/server/adminservice/Makefile<br> src/client/Makefile src/client/adminclient/Makefile src/xml/expat/Makefile)</p>

<p><b>#if you need to build only axis_xerces</b></p>
<p>#AC_OUTPUT(Makefile src/Makefile src/common/Makefile src/soap/Makefile src/wsdd/Makefile src/xml/Makefile<br> src/transport/Makefile src/transport/axis/Makefile src/engine/Makefile src/engine/server/Makefile src/engine/client/Makefile<br>  src/server/Makefile src/server/apache/Makefile src/server/simple_axis_server/Makefile src/server/adminservice/Makefile<br> src/client/Makefile src/client/adminclient/Makefile src/xml/xerces/Makefile)</p>

<p>#}apache1.3 block ends</p>

<p>You also need to  do a selection at $AXISCPP_HOME/src/xml/Makefile.am</p>
<p><b>SUBDIRS = expat xerces #Here I build both expat and xerces libraries</b><br>
<b>#SUBDIRS = expat</b><br>
<b>#SUBDIRS = xerces</b></p>
<p>And again in $AXISCPP_HOME/src/server/Makefile.am</p>

<p><b>#if you use apache2</b><br>
<b>SUBDIRS = apache2 adminservice #Here I build for Apache2</b><br>
                                                                                                                             
<b>#if you use apache1.3</b><br>
<b>#SUBDIRS = apache adminservice</b></p>

<p>Now you need to copy header files from apache and parser that  you use</p>
<p>I have installed xercesc at /usr/local/xerces-c, expat at /usr/local/expat1957,apache2 at /usr/local/apache2 and apache1.3 at /usr/local/apache</p>

<p>I'm going to build Axis C++ for apache2 and for both xercesc and expat(But I'm going to<br>
use only one parser. But anyway I can give instructions to build both as you've seen earlier)<br></p>
<p><b>cp -rf /usr/local/xerces-c/include/xercesc/* $AXISCPP_HOME/include/xercesc/</b><br>
<b>cp -f /usr/local/expat1957/include/expat.h $AXISCPP_HOME/include/expat/</b><br>
<b>cp -f /usr/local/apache2/include/* $AXISCPP_HOME/include/apache2_0/</b></p>

<p>Then I can build Axis C++ server, client,parser libraries, transport library and server/client samples by,<br>
<b>cd $AXISCPP_HOME</b><br>
<b>sh build.sh</b></p>

<p>Once you have finished, have a look at $AXISCPP_HOME/build_errors,<br> 
$AXISCPP_HOME/samples/server/sample_server_build_errors and <br>
$AXISCPP_HOME/samples/client/sample_client_build_errors to identify any warnings and errors. Most probably you will see many warnings.
Just ignore them. But if you see any errors it means that build was not successful and check whether you followed the instructions 
carefully. Note that if you see errors on build_errors file then client samples will also fail since it depends on libaxiscpp_client.so.</p>

<p>You can see the folder $AXISCPP_HOME/bin to see what are created</p>
<p>libaxiscpp_mod.so is apache module which is loaded when apache loads <br>
libaxiscpp_mod2.so is apache2 module which is loaded when apache2 loads <br>
libserver_engine.so is the Axis C++ server engine which is loaded by libaxis_mod(2).so module<br>
libaxiscpp_client.so is Axis C++ client library<br>
libaxis_transport.so is the Axis C++ client transport library<br>
libaxis_expat.so is the expat parser library implementation for Axis C++<br>
libaxis_xercesc.so is the xercesc parser library implmentation for Axis C++</p>

<p>Also $AXISCPP_HOME/samples/server samples are built and installed in $AXIS_HOME/web_services</p>
<p>$AXISCPP_HOME/samples/client samples are built and executables are in $AXISCPP_HOME/samples/client</p>
<p>Now you need to add to $&lt;apache install directory&gt;/conf/httpd.conf<br>
<b>$ vi &lt;apache install directory&gt;/conf/httpd.conf</b></p>

<p>At the bottom of the file you have to include following lines and save it.</p>
<p>LoadModule axis_module modules/libaxiscpp_mod2.so (in apache1.3 replace modules with libexec and libaxiscpp_mod2.so with libaxiscpp_mod.so)<br>
<b>&lt;Location /axis&gt;</b><br>
<b>SetHandler axis</b><br>
<b>&lt;/Location&gt;</b></p>

<p>Now you need the deployment descripter to deploy server samples you built</p>
<p><b>cd $AXIS_HOME/conf</b><br>
<b>mv server.wsdd_linux server.wsdd</b><br>
<b>cd ..</b><br>
<b>mv axiscpp.conf_linux axiscpp.conf</b></p>
<p>In $AXIS_HOME/axiscpp.conf file you can give paths to<br>
your log files, configuration files libraries etc</p>

<p><b># The comment character is '#'</b><br>
<b>#Available directives are as follows</b><br>
<b>#(Some of these directives may not be implemented yet)</b><br>
<b>#</b><br>
<b>#WSDDFilePath:The path to the server wsdd</b><br>
<b>#LogPath:The path to the axis log</b><br>
<b>#ClientLogPath:The path to the axis client log</b><br>
<b>#ClientWSDDFilePath:The path to the client wsdd</b><br>
<b>#Transport_http:The HTTP transport library</b><br>
<b>#Transport_smtp:The SMTP transport library</b><br>
<b>#XMLParser:The xml parser library.</b></p>

<p><b>LogPath:/usr/local/Axis/logs/AxisLog</b><br>
<b>WSDDFilePath:/usr/local/Axis/conf/server.wsdd</b><br>
<b>ClientLogPath:/usr/local/Axis/logs/AxisClientLog</b><br>
<b>XMLParser:/usr/local/Axis/libs/libaxis_xmlparser.so</b><br>
<b>Transport_http:/usr/local/Axis/libs/libaxis_transport.so</b></p>

<p>Now we need to copy neccessary libraries to the correct places and start apache. To do that you can find scripts written in $AXIS_HOME.<br>
<b>cd $AXIS_HOME</b></p>

<p>To deploy on apache2<br>
<b>sh deploy_apache2.sh</b></p>

<p>To deploy on apache<br>
<b>sh deploy_apache.sh</b></p>

<p>When you run the above script all the libraries are copied into corresponding places.<br>
libaxiscpp_mod2.so is copied to <your apache home>/modules folder.<br>
libserver_engine.so and libaxis_expat.so is copied to $AXIS_HOME/libs folder(and renamed
libaxis_xmlparser.so). Also apache is started and libaxiscpp_mod2.so is loaded into apache.<br>
libaxiscpp_mod2.so is the apache module for Axis C++. This will in term load Axis C++ server engine (libserver_engine.so)<br>
<b>Note that libaxis_xmlparser.so is loaded by the engine dynamically as parsing is required from the engine.</b></p>


<p><b>Note that in the line no. 12 of the script above we change the name libaxis_expat.so to libaxis_xmlparser.so.
If we use xerces we need to change libaxis_xercesc.so to libaxis_xmlparser.so</b>.</p>

<p>If you have done installation successfully it will display the Axis C++ welcome page when you point to URI http://localhost/axis</p>
<p><b>Note: In the axis welcome page all the services in $AXIS_HOME/conf/server.wsdd are listed. This does not mean
that the libraries corresponding to these services are deployed yet. It merely lists whatever in the server.wsdd.</b></p>

<p>To run interop samples</p>
<p><b>cd $AXISCPP_HOME/samples/client</b><br>
<b>sh run_interoptests.sh</b><br>
By default this script assumes that apache is running in the localhost at port 80<br>
If you want other<br>
<b>sh run_interoptests.sh &lt;server&gt; &lt;port&gt;</b><br>
eg: sh run_interoptests.sh -u localhost -p 80<br></p>

<p><b>Note for people who downloaded Axis C++ binary.<br>
In this case all the libraries are already generated for you in $AXISCPP_HOME/bin.You need to just build samples.</p>


<br>
<div id="pdf" align="right">
<a href="lininstall-guide.pdf"><img alt="PDF" src="../skin/images/pdfdoc.gif" class="skin"><br>
          PDF</a>
</body>
</html>

