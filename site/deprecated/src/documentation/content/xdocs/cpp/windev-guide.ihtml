<html>
<head>
  <meta http-equiv="Content-Type" content="text/html">
  <title>Axis C++ Windows Developers Guide</title>
</head>

<body>
<h1>Axis C++ Windows Developers Guide</h1>

<p><a href="#buildaxis">Building and Deploying Axis C++</a><br>
<a href="#cvscheckout">Getting a cvs checkout</a>

<br>
<a href="#getapacheexpat">Getting necessary third party software</a>

<br>
<a href="#installapacheexpat">Installing Apache and Expat</a>

<br>
<a href="#setupandbuildaxis">Setting up the build environment and building
Axis</a>

<br>
<a href="#deployaxis">Deploying Axis in Apache</a>

<br>
<a href="#deploywebservice">Deploying a web service in Axis C++</a><br>

<a href="#generatefiles">Generating Serverside Skeletons/ wrappers and client
side stubs</a><br>

<a href="#eclipse">Using eclipse to build and run WSDL2Ws</a>
<br>
<a href="#commandline">Building and running WSDL2Ws on the command line</a>

<br><a href="#builddeployws">Building and Deploying the web service</a>
<br><a href="#providedservices">Building and deploying the provided interop web services samples</a>
<br><a href="#providedclients">Building and deploying the provided interop client applications</a>

<br>
<a href="#consumews">Consuming the web service with Axis C++ client</a><br>


<a href="#runclient">Coding and Running the client</a>

<br>
<a href="#transport">Creating and Building your own transport layer</a>
<br>
<a href="#parser">Creating and Building your own parser</a>

</p>
<p> <b>Before going through this guide, please go through the </b><a href="winuser-guide.html"><b>Windows User Guide</b></a> <b> and also be familiar with how to use binaries.</b></p>

<p>
<a name="buildaxis"></a></p>

<h1>
 Axis C++</h1>

<p>
<a name="cvscheckout"></a></p>


<h2>Getting a cvs checkout</h2>


<p>Visit <a href="#http://ws.apache.org/">http://ws.apache.org/</a> Click on “axis” and then on “CVS Repository”
to find details on how to access the CVS Repository. It will have instructions
similar to the following.<br>
<br>
“Anyone can checkout the source code from our anonymous CVS server. To do so,
simply use the following commands (if you are using a GUI CVS client,
configure it appropriately): <br>

<br>
cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic login<br>

password: anoncvs<br>
<br>
cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic checkout ws-axis<br>
<br>
The examples given below are based on these lines of instructions.<br>
<br>
To use the command line cvs client go to http://www.cvshome.org, click on the
"CVS Downloads" link.In the resulting page under the heading "CVS downloads",there will be a link named
"historical download pages", where you can
download the cvs binaries for Windows. Download the Windows cvs binaries.
Extract the cvs binaries from the downloaded zip file.When this is extracted there will be a
“cvs.exe” file . Set the PATH environment variable to
 “cvs.exe” <br> <br>
You would have to do the following to get a checkout from the command line
cvs client.<br>
<br>
cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic login<br>
Now you will be prompted for the password. Enter the password.<br>
<br>
password: anoncvs<br>
<br>
Now enter the following cvs command to checkout the axis Repository.<br>
cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic checkout ws-axis <br>
<br>
The checkout of the repository will be created in the current directory in a
folder named “ws-axis”<br>
<br>
The checked out folder ws-axis will be referred as [CHECKOUT_HOME] from
this point on.<br></p>

<p><a name="getapacheexpat"></a></p>

<h2>Getting necessary third party software</h2>


<P><b>Expat XML Parser</b></p>

<p><br>You can get expat binaries from the url http://sourceforge.net/projects/expat/
<br>
This documentation was tested with the expat 1.95.7  which is
distributed as expat_win32bin_1_95_7.exe.<br></p>

<p> (Axis Cpp Developers can use either Xerces-c or the Expat XML Parsers to build the Axis Cpp.
The Source in CVS supports expat out of the box.)</p>


<P><b>Apache Web Server</b></p>

<p>Download the Apache web server from www.apache.org. Currently Axis supports
apache 1.3.x and 2.X. This documentation was tested with Apache 1.3.28 and
Apache 2.0.44.</p>


<p><a name="installapacheexpat"></a></p>

<h2>Installing Apache and Expat </h2>

<br>

<p><b>Expat</b></p>
<br>
<p>Run the file
expat_win32bin_1_95_7.exe . The folder to which Expat is unzipped will be
referred as [EXPAT_EXTRACT] from this point onwards.</p>

<br>
<p><b>Apache</b></p>
<br>
<p>Install the Apache web server. By default Apache 1.3.X is installed in
"C:\Program Files\Apache Group\Apache" and Apache 2.X in "C:\Program
Files\Apache Group\Apache2". These locations will be referred  as [APACHE_HOME]
from this point onwards.</p>


<p><br>


<p><a name="setupandbuildaxis"></a></p>

<h2>Setting up the build environment and building Axis</h2>


<p>1)Copy [EXPAT_EXTRACT]\source\lib\expat.h from expat binary distribution to [CHECKOUT_HOME]\c\include\expat\ directory <br>
<br>
2) Copy [EXPAT_EXTRACT]\lib\libexpat.lib to [CHECKOUT_HOME]\c\lib\expat\ directory.</p>

<p>3)Copy libexpat.dll file from [EXPAT_EXTRACT]\Libs  to %AXIS_HOME%/libs/ 


<p><b>For apache 1.3.X:</b></p>


<p>1)Copy the include files in "[APACHE_HOME]\include" directory to
"[CHECKOUT_HOME] \c\include\apache1_3\"

<br><br>
2) Copy the ApacheCore.lib file from [APACHE_HOME]\libexec
to [CHECKOUT_HOME]\c\lib\apache1_3.</p>


<p><b>For apache 2.X:</b></p>



<p>1)Copy the include files in "[APACHE_HOME]\include" directory to
"[CHECKOUT_HOME]\c\include\apache2_0\"<br><br>

 2) Copy the following lib files libapr.lib, libhttpd.lib files from
"[APACHE_HOME]\lib" to "[CHECKOUT_HOME]\c\lib\apache2_0".<br>
</p>

<p><b>Building the AxisServer and AxisClient dlls </b> </p>

<p>Build the AxisServer and AxisClient projects.(Click on file in Visual C++ ,open Visual C++ Distribution workspace (Distribution.dsw) at [CHECKOUT_HOME]\c\vc\.
In the workspace window, File View, right click on  the AxisServer project and AxisClient project ).Which will build the AxisServer.dll and AxisClient.dll </p>

<p><b>Building Apache Modules (Apache 1.3.X and Apache 2.X) </b> </p>
<p>
 In Visual C++ (The version used for this documentation was Visual C++ 6.0)
click on file ,open Visual C++ Distribution workspace (Distribution.dsw) at
[CHECKOUT_HOME]\c\vc\.
In the workspace window, File View, right click on either the project "Apache1_3Module files" or
"Apache2_0Module files" and click on the "Set as Active Project" to make it the Active
Project.<br> <br>

 Again in Visual C++ right click on either the project "Apache1_3Module" or
"Apache2_0Module" in the workspace window, File View, and then click on Settings on
the popup menu. Select the link tab. Select General from the Category drop
down list. In the Output file name text box put the value
[APACHE_HOME]\modules\mod_axis.dll and click OK.(To build a Apache Module, AxisServer.lib should be in the settings Link tab ) </p>

<p>Build either Apache1_3Module or Apache2_0Module project.
In Visual C++ right click on either the project "Apache1_3Module" or
"Apache2_0Module" in the workspace window, File View and click "build (selection only)"
to build mod_axis.dll for Apache1_3Module or mod_axis2.dll for Apache2_0Module.
<br><br>
(From here onwards we refer to these modules as APACHE_MODULE. Replace it 
with the correct module for the Apache server version that you have installed). Then build SimpleAxisServer.  

&nbsp;</p>

<p><b>Axis Transport Library</b></p>
<p>In VC++ distribution workspace build AxisTransport project.Then AxisTransport.dll will be built.</p>
<p><b>Xerces Parser Library and Expat Parser Library</b></p>
<p>In VC++ distribution workspace build either AxisXMLParserXerces project or AxisXMLParserExpat project. Then AxisXMLParser.dll will be built.</p>  

<p><b> Building AxisTransport.dll  and AxisXMLParser.dll</b>
<br>Build the AxisTransport and AxisXMLParser projects. Which will build the AxisTransport.dll and AxisXMLParser.dll in [CHECKOUT_HOME]\c\bin. </p>
<p>(When the projects are built in Debug mode then the Dlls will appear as AxisTransport_D and AxisXMLParser_D.dll)</p> 
<p><a name="deployaxis"></a></p>


<h2>Deploying Axis in Apache</h2>

<p>1) Create a directory structure called "Axis" inside [APACHE_HOME] as
follows.
<br>
(Instead, you can copy the folder [CHECKOUT_HOME]\c\deploy to [APACHE_HOME] and rename it to 
"Axis" and you will find some of the files that you are asked to create in this guide,
already existing in that folder)
<br>
<br>
Axis<br>
|__ libs ( Copy [EXPAT_EXTRACT]\Libs\libexpat.dll and paste it inside)<br>
|__ logs (log files are located here)<br>
|__ conf (server.wsdd file is located here)<br>
|__ webservices (The place to put webservice dlls)<br>
|__ wsdls (The directory for the wsdl files of the deployed web services)<br>

<br>
2)Set an environment variable named AXIS_HOME and give [APACHE_HOME]\Axis as
the value.
<br>

<br>
i)You will find AxisServer.dll and APACHE_MODULE in [CHECKOUT_HOME]\c\bin directory.
<br>
ii)Copy APACHE_MODULE to [APACHE_HOME]\modules directory of your apache installation.
<br>
<p>Copy AxisServer.dll ,AxisTransport.dll and AxisXMLParser.dll to [AXIS_HOME]\libs\ directory and add that directory to your PATH environment variable.Or to any location specified by your PATH environment variable.</p>    

<br> <br>
<p>2) Set the "PATH" environment variable to the following directories.

<br>
[APACHE_HOME]<br>
[APACHE_HOME]\Axis\libs<br>
<br> 

3)Include the following lines at the bottom of the apache configuration file [APACHE_HOME]\conf\httpd.conf 
<br>


<br>
LoadModule axis_module modules/APACHE_MODULE

<br>
&lt;Location /axis&gt;

<br>
SetHandler axis

<br>
&lt;/Location&gt;
<br>
<br>
4)create a file in [APACHE_HOME]\Axis named "axiscpp.conf" which should
contain the following lines.

<br>


<br>
LogPath:XXXX<br>
WSDDFilePath:YYYY<br>
Transport_http:ZZZZ (Not necessary)<br>
XMLParser:WWWW<br>

<br>
Where XXXX will be the path to a file named AxisLog (The log file)and YYYY
will be the path to the server.wsdd file.ZZZZ will be the path to AxisTransport.dll if it's a HTTP(if the selected transport is SMTP then should give that path.WWWW will be the path to AxisXMLParser.dll<br>
<br>
i.e.<br>
LogPath:[APACHE_HOME]\Axis\logs\AxisLog.log  

<br>
WSDDFilePath:[APACHE_HOME]\Axis\conf\server.wsdd <br>
Transport_http:[APACHE_HOME]\Axis\libs\AxisTransport.dll <br>
XMLParser:[APACHE_HOME]\Axis\libs\AxisXMLParser.dll</p>  

<p><b>Note:If the AxisTransport.dll and AxisXMLParser.dll paths are not given in axiscpp.conf then the hardcoded values will be used.For that set the path of these two in the PATH environment variable or copy them to the same location as the Client.exe.</b></p>
<br>
<p>6)Select start-&gt;programs-&gt;Apache HTTP server-&gt;Control Apache
Server-&gt;stop to stop the apache server

<br>
(This is because apache will be started automatically by the installation
program)
<br>
<br>
Open up a DOS terminal and give the command "apache -k start" to start
apache (If Apache 2.0 server does not respond when started this way, try "apache -X").


<br>
open a browser and verify whether you can browse http://localhost/ (or give
the machines ip as http://xxx.xxx.xxx.xxx/). If apache is running you will
see the Apache start page in the browser.&nbsp;</p>
<p><a name="deploywebservice"></a></p>



<h1>Deploying a web service in Axis C++</h1>


<p><a name="generatefiles"></a></p>

<h2>Generating Serverside Skeletons/ wrappers and client side stubs</h2>



<p><a name="eclipse"></a></p>

<h3>Using eclipse to build and run WSDL2Ws</h3>



<p>In the checked out source code there is a

 "wsdl2ws" (i.e. wsdl-to-web
services) written in java that generates server side Skeletons/wrappers and
client side stubs using a given WSDL file. This Section describes how this is
done.

<br>
To build and run the java tool this section uses the eclipse platform. For
this documentation eclipse 2.1.0 was used and the jdk version used was
j2sdk1.4.1_01. You will not be able to build the java tool with jdk versions
below 1.4.0.<br>


<br>
1)Start the eclipse platform IDE.<br>
Go to File-&gt;New-&gt;Project.<br>

<br>
Select java in the "New Project" dialog and click "Next".<br>

<br>
In the "New" dialog that appears give a project Name (e.g. test). In the "New
dialog" keep the "use default" Tick Box checked.
<br>
Note down the path in the "Directory" Text Box. This location will be
referred as [SKELSTUB_HOME] from this point onwards. Click "Next".<br>


<br>
Another dialog named "New” will appear. Select the “Source” tab. Select the
project that you created (i.e. test).<br>
Click on “Add Folder…”. In the “Source Folder Selection” dialog that appears
select the project that you created (i.e. test) and click “Create New
Folder…”. In the “New Folder” dialog that appears give a folder name as “src”
and click “OK”. Click “OK” in the “Source Folder Selection” dialog. Click
“Yes” on the confirmation message box that pops up. <br>


<br>
Click “Libraries” in the “New” dialog. Click “Add External JARs…”. In the
“JAR Selection” dialog that appears browse to [CHECKOUT_HOME]\
lib\axisjava and select the following JARs.<br>


<br>
axis.jar
<br>
commons-discovery.jar
<br>
commons-logging.jar
<br>
jaxrpc.jar<br>
saaj.jar
<br>
wsdl4j.jar
<br>
xml-apis.jar<br>
<br>
Click “Open”.<br>
<br>
Click “Finish” on the “New” dialog.<br>
<br>
2) Copy the “org” folder inside [CHECKOUT_HOME]\c\src\wsdl to
[SKELSTUB_HOME]\src. The “org” folder contains the package structure for the
WSDL2Ws java tool.<br><br>
3) Go to eclipse and right click on the “Package Explorer” window and click
on “Refresh” in the popup menu that appears. Now you should be able to see
the source that was copied, in the “Package Explorer” window. By now eclipse
would have built the WSDL2Ws tool.<br>


<br>
For this demonstration we will use a Calculator web service and the WSDL file
the web service is located at [CHECKOUT_HOME]\c\samples\server\simple.<br>

<br>
Copy the Calculator.wsdl to [SKELSTUB_HOME]<br>


<br>
In eclipse go to “Run-&gt;Run…”.

<br>
In the Java Application item select the New_Configuration.Then select the “Main” tab. In “Project” text box give the
name of the project you created (i.e. test).
<br>
In the “Main Class” text box give the class as
“org.apache.axis.wsdl.wsdl2ws.WSDL2Ws”.

<br>
&nbsp;</p>

<p><img border="0" src="images/c/main_class.jpg" width="627" height="340"></p>

<p>Select the “Arguments” tab.</p>

<p>In the “Program Arguments” text
box give the following argument.</p>

<p>“Calculator.wsdl -o./ServerOut
-lc++ -sserver”.</p>

<p><img border="0" src="images/c/argument.jpg" width="626" height="272"></p>

<p>NOTE: These are the arguments for the java tool WSDL2Ws. The usage of the
WSDL2Ws is as follows.<br>
Java org.apache.axis.wsdl.wsdl2ws.WSDL2Ws &lt;wsdl file&gt; -o&lt;output
directory&gt; <br>
-l&lt;c|c++&gt; -s&lt;(server|client)&gt;.<br>
Also note that there cannot be any spaces after a switch (i.e. -o, -l).<br>
<br>
Click “Run”.<br>
Now the Skeletons/Wrappers will be generated and you will see messages in the
eclipse console displaying the generated files. The generated
Skeletons/Wrappers will be created in a folder named
[SKELSTUB_HOME]\ServerOut as given in the arguments when you  run the tool.<br>
<br>
Similarly to generate the client stubs use the following arguments in eclipse
and run.<br>
“Calculator.wsdl -o./ClientOut -lc++ -sclient”.<br>
The generated Stubs will be created in a folder named
[SKELSTUB_HOME]\ClientOut.<br>
&nbsp;</p>

<p><a name="commandline"></a></p>



<h3>Building and running WSDL2Ws on the command line</h3>

<p>For building WSDL2Ws java tool on the command line you require jdk1.4 or
above.<br>
<br>
To build WSDL2Ws java tool set the CLASSPATH Environment Variable
to point to the following jar files.Create a New Folder called wsdl2wsTool\lib and put the above mentioned jars in it. You can find 
these jars in [CHECKOUT_HOME]\lib\axisjava.

<br>

<br>
axis.jar
<br>
commons-discovery.jar
<br>
commons-logging.jar
<br>
jaxrpc.jar<br>
saaj.jar
<br>
wsdl4j.jar<br>
xml-apis.jar
<br><br>
Open a command window.<br>
Change directory to [CHECKOUT_HOME]\c\src\wsdl.<br>
We will refer to this directory as [SKELSTUB_HOME] as we did during generating Skeletons/Wrappers and Stubs with eclipse.
<br>
Run the following command to build the java tool.
<br><b>
javac -sourcepath . org\apache\axis\wsdl\wsdl2ws\WSDL2Ws*.java</b>
<br>
NOTE: Notice the spaces between the "dot" after the -sourcepath switch

<br>
If the command finishes without any output then the java tool has been
built.<br>
<br>
Now copy the Calculator.wsdl file in [CHECKOUT_HOME]\c\samples\server\simple, 
which we use in this example to [SKELSTUB_HOME]<br>
<br>
Now run the following command to generate the server side skeletons and
wrappers in the same [SKELSTUB_HOME].<br>
<br>
Java -classpath .;%classpath% org.apache.axis.wsdl.wsdl2ws.WSDL2Ws Calculator.wsdl -o./ServerOut -lc++ -sserver<br>
<br>
Give the class path exactly in the same order as given above. 
<br><br>
If the tool is successful the tool will display the files it has
generated. The skeletons and stubs will be generated in
[SKELSTUB_HOME]\ServerOut.<br>
<br>
Run the following command to generate the client stubs.<br>
<br>
Java -classpath %classpath%;. org.apache.axis.wsdl.wsdl2ws.WSDL2Ws
Calculator.wsdl -o./ClientOut -lc++ -sclient<br>
<br>
The generated client stubs will be in [SKELSTUB_HOME]\ClientOut<br>

</p>

<p><a name="builddeployws"></a></p>

<h2>Building and Deploying the web service</h2>

 <p>1) If you have followed the above instructions correctly you would have been able to generate the Server 
side Skeletons and Wrappers for the Calculator.wsdl
<br><br> 2) Start Visual C++.<br>

<br>
3) Go to File->New…<br>
<br>
4) Select the “Projects” tab.<br>

<br>
5) Select “Win 32 Dynamic-Link Library”.<br>
<br>
6) Give a project name (e.g. ws1), give a folder (say "deployws") as the "location" of the project, select the "create new workspace" radio button, and click “OK”.When this procedure is followed the "ws1" project files are created in a folder named "ws1" inside the "deployws" folder. <br>

<br>
7) In the dialog that appears select “An empty DLL project” click “Finish” and then “OK”.<br>
<br>
8) Right click on the project that you created (i.e. ws1) and click “Add
Files to Project…” on the menu that appears. In the “Insert Files into
Project” dialog select the generated .cpp and .h files in
[SKELSTUB_HOME]\ServerOut and click “OK”.<br>
<br>9) Right click on the project (i.e. ws1)again and click on “Settings…” on
the menu that appears. Click the C/C++ tab and select “Preprocessor” from the
“Category” Drop down list.
Add Axis include directory [CHECKOUT_HOME]c\include\ to the project In the 
“Additional include directories”<br>

<br>10)Now add the business logic to the generated Skeletons. The Skeletons in this case are Calculator.h
and Calculator.cpp
<br><br>
11) We will implement two methods that are in Calculator.cpp as follows.
<br>
int Calculator::add(int Value0, int Value1)<br>
{<br>
return Value0+Value1; //business logic<br>
}<br>
int Calculator::subtract(int Value0, int Value1)<br>
{<br>
return Value0-Value1; //business logic<br>
}<br><br>
12) Right click on the project (i.e. ws1) and click “Build” on the menu that
appears. Visual C++ should be able to build the project without any errors
now.<br>
<br>
13) The ws1.dll will be built in "ws1\Debug" by Visual
C++<br><br>
14) Place the built ws1.dll file in [APACHE_HOME]\Axis\webservices<br><br>
15) In addition to this create sever.wsdd file in
[APACHE_HOME]\Axis\conf<br>
<br>
The server.wsdd file for this example is
given below</p>


<pre>&lt;deployment&gt;
&lt;service name="Calculator"&gt;
&lt;parameter name="className"
value="[APACHE_HOME]\Axis\webservices\ws1.dll"/&gt;
&lt;parameter name="allowedMethods" value="subtract add "/&gt;
&lt;/service&gt;
&lt;/deployment&gt;</pre>

<p>In this file [APACHE_HOME] has to be replaced with the actual value of
[APACHE_HOME] (i.e. In this case "C:\Program Files\Apache Group\Apache" for
apache 1.3.x and "C:\Program Files\Apache Group\Apache2" for apache 2.x)<br>
<br>
<b>Description of the server.wsdd file</b><br>
<br>
The service element specifies the service name.<br>
&lt;service name="Calculator"&gt;<br>
<br>
In this parameter element we specify the parameter className and it’s value,
the location of the webservice dll.<br>
&lt;parameter name="className" value="C:\Program Files\Apache
Group\Apache\Axis\webservices\ws1.dll"/&gt;<br>
<br>
In this parameter element we specify the parameter allowedMethods and its
value, the methods exposed by the web service (i.e. subtract and add).<br>
<b>Note: A trailing space should be put after every allowed method.</b><br>
&lt;parameter name="allowedMethods" value="subtract add "/&gt;<br>
<br>
16) Now start the Apache web server by typing “apache -k start”. If the Apache server is
running type “apache -k restart”<br>
<br>
17) Now type http://localhost/axis/ in a browser and you will see the
“Welcome to Axis C++” page with a listing of deployed services and  Calculator service .<br>
&nbsp;</p>

<p><a name="consumews"></a></p>


<h1>Consuming the web service with Axis c++ client</h1>

<p><a name="runclient"></a></p>

<h2>Coding and Running the client</h2>



<p>1) If you have followed the above instructions you would have been able to generate the Server 
side Skeletons and Wrappers for the Calculator.wsdl.

<br> 2) Start Visual C++.<br>
3) Go to File->New…
<br>
4) Select the “Projects” tab<br>
5) Select “Win 32 Console Application”
<br>
6) Give a project name (e.g. calclient) and click “OK”. 

Give a project name (e.g. calclient), give a folder ( For e.g: "wsclient") as the "location" of the project, select the "create new workspace" radio button, and click “OK”.When this procedure is followed the "calclient" project files are created in a folder named "calclient" inside the "wsclient" folder. <br>


</p>


<p>7) In the dialog that appears select “An empty project” click “Finish” and
then “OK”.
<br>
8) Right click on the project that you created (i.e. ws1) and click “Add
Files to Project…” on the menu that appears.Then Add the generated .cpp and .h files from the [SKELSTUB_HOME]\ClientOut to the project and click “OK”.

<br>
9) Right click on the project (i.e. calclient) again and click on
“Settings…” on the menu that appears. Click the “C/C++” tab and select
“Preprocessor” from the “Category” Drop down list.<br>
In the “Additional include directories” give [CHECKOUT_HOME]c\include as the include path.<br>
</p>


<p>10) Click the “Link” tab and select “Input” from the “Category” Drop down
list.


<br>Add AxisClient.lib to the “Object/library modules” and in the “Additional library path” give the path.
AxisClient.lib can be found in [CHECKOUT_HOME]\c\bin once you build the AxisClient,AxisTransport,AxisXMLParserXerces or AxisXMLParserExpat  projects
of the "Distribution" VC workspace.
<br>

<br>
&nbsp;</p>


<p>Now the client should be coded. Basically this will be a main method. We
will write the main method in the file Calculator.cpp of the VC project "calclient". This is the stub
generated by the java tool in the stub generation step.<br>
<br>
Add the following main method to Calculator.cpp<br>
</p>
<pre>void main()
{
Calculator cal;
int result = cal.add(22, 33);
printf("The result is : %d", result);
}</pre>
<br>

<p>It is better to have the path to your AxisXMLParser.dll and AxisTransport.dll in axiscpp.conf or have the dlls where the client exe is.</p>
<p>Right click on the project and click “Build” on the menu that appears.

<p>When the XMLParser is running these steps would occur.<br>
1. Locate Parser dll.<br>
2. Create Parser instance by CreateInstance() method.<br>
3. Give the stream to parser by setInputStream() method.<br>
4. Call next() method multiple times.<br>
5. getStatus() to see if the streams are properly passed.<br>
6. Destroy parser object by DestroyInstance().<br>
</p>
<p>If Visual C++ complains about missing libs go to Build-&gt;Rebuild All (Please
make sure that the apache server is stopped). Now the client exe is built.<br>

Start the Apache server by typing apache -k start and run the exe from Visual C++ by
going to Build-&gt;Execute calclient.exe. If all goes well, now you would see the SOAP Request,
SOAP Response and the result printed by calclient.exe.</p>


<P><a name="providedservices"></a></p>
<h2>Building and deploying the provided samples of interop web services</h2>
<p>
<br>1) Open the Visual C++ workspace (interoptests.dsw) at [CHECKOUT_HOME]\c\vc\samples\server\interoptests\  and do a batch build of all projects.
<br>2) You will find the built dynamic libraries at [CHECKOUT_HOME]\c\bin directory. Following are the built DLLs.
<br>base.dll
<br>cbase.dll
<br>cGroupB.dll
<br>doclitbase.dll
<br>doclitgroupB.dll
<br>groupB.dll
<br>3)copy these dlls to [APACHE_HOME]\Axis\webservices
<br>4)Add the required entries to the server.wsdd file in [APACHE_HOME]\Axis\conf to deploy these
interop services.
You can find the required entries in the [CHECKOUT_HOME]\c\deploy\conf\server.wsdd_win file.
You will need to modify the "value" of the "classname" parameter of each service to point to
the relevant web service dll given above in [APACHE_HOME]\Axis\webservices.
</p>

<p><a name="providedclients"></a></p>
<h2>Building and running the provided interop client applications</h2>
<p>
<br>1) Open the Visual C++ workspace (interoptests.dsw) at [CHECKOUT_HOME]\c\vc\samples\client\interoptests\ and do a batch build of all projects.
<br>2) You need to build the AxisClient project in the "Distribution" workspace at [CHECKOUT_HOME]\c\vc\, because you need the AxisClient.lib to compile client applications and AxisClient.dll to run them.
<br>3) You will find the built console applications and AxisClient.dll at [CHECKOUT_HOME]\c\bin directory. Following are the built .exe files.
	base.exe
	cbase.exe
	cgroupB.exe
	doclitbase.exe
	doclitgroupB.exe
	groupB.exe
<br>4) In order to run these samples you should have AxisClient.dll in the PATH environment variable or in the same directory where the .exe is.
</p>

<p><a name="transport"></a></p>
<h2>Creating and Building your own transport layer</h2>
<img border="0" src="images/c/parserd/transport.jpg">

<p>When creating your own transport layer refer  SoapTransport.h header file for API.To see an example implementation refer AxisTransport.h and AxisTransport.cpp</p>
<p>Implement SoapTransport.h interface according to rules described in the header file.
<br>Transport layer is built separately from Axis. Then Axis loads transport dynamic library through following export functions which you also have to implement. 
<p>CreateInstance (SoapTransport *pOut)- Used by Axis to create an instance of your transport class<br>
   DestroyInstance (SoapTransport *pIn) - Used by Axis to destroy the created transport class instance</p>
<p>Compile your transport code and build a dynamic library. Add the name of your transport library to axis configuration file (axiscpp.conf) so that Axis can find your library at runtime.</p>

<p><a name="parser"></a></p>
<h2>Creating and Building your own parser</h2>
<img border="0" src="images/c/parserd/parser.jpg">
 
<p><b>Note:Implement XMLParser.h interface according to the rules described in the header file.</b><br>
<p>When creating your own parser refer  XMLParser.h header file for API. To see an example implementation refer SoapParserExpat.h,SoapParserExpat.cpp, SoapParserXerces.h and SoapParserXerces.cpp.
<p>Axis loads the parser dynamic library through following export functions which you also have to implement.</p>
<p>CreateInstance() - Used by Axis to create an instance of your parser class<br>
   DestroyInstance() - Used by Axis to destroy the created parser class instance </p>
<p> Compile your parser code and build a dynamic library. Add the name of your parser library to Axis configuration file (axiscpp.conf) so that Axis can find your library at runtime</p>

</body>
</html>