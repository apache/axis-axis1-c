<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML>
<HEAD>
  <META name="generator" content=
  "HTML Tidy for Windows (vers 1st October 2003), see www.w3.org">
  <META http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">

  <TITLE>Axis Developer's Guide</TITLE>
  <LINK href="axis.css" rel="stylesheet" type="text/css">
</HEAD>

<BODY text="#000000" bgcolor="#FFFFFF">
  <CENTER>
    <H1><IMG src="images/axis.jpg" height="96" width="176"></H1>
  </CENTER>

  <H1>Axis Developer's Guide</H1>

  <P><I>1.1 Version</I><BR>
  <I>Feedback: <A href=
  "mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</A></I></P>

  <H3>Table of Contents</H3>

  <P><A href="#Introduction">Introduction</A><BR>
  <A href="#General%20Guidelines">General Guidelines</A><BR>
  <A href="#Development%20Environment">Development
  Environment</A><BR>
  <A href="#Pluggable-Components">Pluggable-Components</A><BR>
  &nbsp;&nbsp;&nbsp;<A href="#Discovery">Discovery</A><BR>
  &nbsp;&nbsp;&nbsp;<A href=
  "#Logging/Tracing">Logging/Tracing</A><BR>
  &nbsp;&nbsp;&nbsp;<A href=
  "#Axis%20Servlet%20Query%20String%20Plug-ins">Axis Servlet Query
  String Plug-ins</A><BR>
  <A href="#Configuration%20Properties">Configuration
  Properties</A><BR>
  <A href="#Exception%20Handling">Exception Handling</A><BR>
  <A href="#Compile%20And%20Run">Compile and Run</A><BR>
  <A href="#Internationalization">Internationalization</A><BR>
  &nbsp;&nbsp;&nbsp;<A href=
  "#Extending%20Message%20Files">Extending Message Files</A><BR>
  <A href="#Adding%20Testcases">Adding Testcases</A><BR>
  <A href="#TestStructure">Test and Samples Structure</A><BR>
  <A href="#CodeChecks">Adding Source Code Checks</A><BR>
  <A href="#JUnit">JUnit and Axis</A><BR>
  <A href="#Debugging">Debugging</A><BR>
  <A href="#TCK">Running the JAX-RPC Compatibility Tests</A><BR>
  &nbsp;</P>

  <H2><A name="Introduction"></A>Introduction</H2>

  <P>This guide is a collection of topics related to developing
  code for Axis.</P>

  <H2><A name="General Guidelines"></A>General Guidelines</H2>

  <UL>
    <LI>Axis specific information (cvs repository access, mailing
    list info, etc.) can be found on the <A href=
    "http://ws.apache.org/axis/index.html">Axis Home Page</A>.</LI>

    <LI>Axis uses the <A href=
    "http://jakarta.apache.org/site/guidelines.html">Jakarta
    Project Guidelines.</A></LI>

    <LI>Code changes should comply with <A href=
    "http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">"Code
    Conventions for the Java Programming Language"</A></LI>

    <LI>When fixing a bug, please include the href of the bug in the cvs
    commit message.</LI>

    <LI>Incompatible changes to <A href=
    "user-guide.html#published%20interfaces">published Axis
    interfaces</A> should be avoided where possible. When changes
    are necessary, for example to maintain or improve the overall
    modularity of Axis, the impact on users must be considered and,
    preferably, documented.</LI>

    <LI>If you are making a big change that may affect
    interoperability, please run the <A href=
    "http://xml.apache.org/~rubys/echotest.pl">echotest2 round 2
    interop test</A> to ensure that your change does not result in
    any new interop failures. You will also need the <A href=
    "http://xml.apache.org/~rubys/client_deploy.wsdd">client_deploy.wsdd</A>.
    Here are the <A href=
    "http://xml.apache.org/~rubys/ApacheClientInterop.html">nightly
    interop test results</A>.</LI>
  </UL>

  <H2><A name="Development Environment"></A>Development
  Environment</H2>

  <P>The following packages are required for axis development:</P>

  <UL>
    <LI><A href="http://jakarta.apache.org/ant/index.html">ant</A>
    - Java based build tool. <B>Please Note: Version 1.5 OR HIGHER
    is required</B></LI>

    <LI><A href="http://www.junit.org">junit</A> - testing
    package</LI>

    <LI><A href="http://xml.apache.org/dist/xerces-j">xerces</A> -
    xml processor</LI>

    <LI>Install Java 1.3.1 JDK (or later).</LI>
  </UL>

  <P><BR>
  The Axis jar files are built in the
  <TT>xml-axis/java/build/lib</TT> directory.&nbsp;&nbsp; Here is
  an example CLASSPATH, which I use when developing code:</P>

  <BLOCKQUOTE>
    <BLOCKQUOTE>
<PRE>
D:\\xerces\\xerces-1_4_2\\xerces.jar
G:\\junit3.7\\junit.jar
G:\\xml-axis\\java\\build\\lib\\commons-discovery.jar
G:\\xml-axis\\java\\build\\lib\\commons-logging.jar
G:\\xml-axis\\java\\build\\lib\\wsdl4j.jar
G:\\xml-axis\\java\\build\\lib\\axis.jar
G:\\xml-axis\\java\\build\\lib\\log4j-1.2.8.jar
G:\\xml-axis\\java\\build\\classes
</PRE>
    </BLOCKQUOTE>
  </BLOCKQUOTE>

  <P>If you access the internet via a proxy server, you'll need to
  set an environment variable so that the Axis tests do the same.
  Set ANT_OPTS to, for example:</P>

  <BLOCKQUOTE>
    <BLOCKQUOTE>
      <PRE>
      -Dhttp.proxyHost=proxy.somewhere.com
      -Dhttp.proxyPort=80
      -Dhttp.nonProxyHosts="localhost"</PRE>
    </BLOCKQUOTE>
  </BLOCKQUOTE>

  <H2><A name="Pluggable-Components"></A>Pluggable-Components</H2>

  <P>The <A href="architecture-guide.html">Axis Architecture
  Guide</A> explains the requirements for pluggable components.</P>

  <H3><A name="Discovery"></A>Discovery</H3>

  <P>An Axis-specific component factory should be created of the
  form:</P>

  <DIV style="margin-left: 2em">
    org.apache.axis.components.&lt;componentType&gt;.&lt;factoryClassName&gt;
  </DIV>

  <P>For example,
  <CODE>org.apache.axis.components.logger.LogFactory</CODE> is the
  factory, or discovery mechanism, for the logger
  component/service.</P>

  <P>The <CODE>org.apache.axis.components.image</CODE> package
  demonstrates both a factory, and supporting classes for different
  image tools used by Axis. This is representative of a pluggable
  component that uses external tooling, isolating it behind a
  'thin' wrapper to Axis that provides only a limited interface to
  meet Axis minimal requirements. This allows future designers and
  implementors to gain an explicit understanding of the Axis's
  specific requirements on these tools.</P>

  <H3><A name="Logging/Tracing"></A>Logging/Tracing</H3>

  <P>Axis logging and tracing is based on the Logging component of
  the <A href=
  "http://jakarta.apache.org/commons/index.html">Jakarta
  Commons</A> project, or the Jakarta Commons Logging (JCL) SPI.
  The JCL provides a Log interface with thin-wrapper
  implementations for other logging tools, including <A href=
  "http://jakarta.apache.org/log4j/docs/index.html">Log4J</A>,
  <A href=
  "http://jakarta.apache.org/avalon/logkit/index.html">Avalon
  LogKit</A>, and <A>JDK 1.4</A>. The interface maps closely to
  Log4J and LogKit.</P>

  <H4>Using the Logger SPI</H4>

  <P>To use the JCL SPI from a Java class, include the following
  import statements:</P>

  <DIV style="margin-left: 2em">
    <PRE>import org.apache.commons.logging.Log;
    import org.apache.axis.components.logger.LogFactory;
    &nbsp;</PRE>
  </DIV>

  <P>For each class definition, declare and initialize a
  <CODE>log</CODE> attribute as follows:</P>

  <DIV style="margin-left: 2em">
    <PRE>public class CLASS
    {
    &nbsp;&nbsp;&nbsp;private static Log log =
    LogFactory.getLog(CLASS.class);
    &nbsp;&nbsp;&nbsp;...
    &nbsp;</PRE>
  </DIV>

  <P>Messages are logged to a <I>logger</I>, such as
  <CODE>log</CODE> by invoking a method corresponding to
  <I>priority</I>: The <CODE>Log</CODE> interface defines the
  following methods for use in writing log/trace messages to the
  log:</P>

  <DIV style="margin-left: 2em">
    <PRE>log.fatal(Object message);
    log.fatal(Object message, Throwable t);
    log.error(Object message);
    log.error(Object message, Throwable t);
    log.warn(Object message);
    log.warn(Object message, Throwable t);
    log.info(Object message);
    log.info(Object message, Throwable t);
    log.debug(Object message);
    log.debug(Object message, Throwable t);
    log.trace(Object message);
    log.trace(Object message, Throwable t);</PRE>
  </DIV>

  <P>While semantics for these methods are ultimately defined by
  the implementation of the Log interface, it is expected that the
  severity of messages is ordered as shown in the above list.</P>

  <P>In addition to the logging methods, the following are
  provided:</P>

  <DIV style="margin-left: 2em">
    <PRE>log.isFatalEnabled();
    log.isErrorEnabled();
    log.isWarnEnabled();
    log.isInfoEnabled();
    log.isDebugEnabled();
    log.isTraceEnabled();</PRE>
  </DIV>

  <P>These are typically used to guard code that only needs to
  execute in support of logging, and that introduces undesirable
  runtime overhead in the general case (logging disabled).</P>

  <H4>Guidelines</H4>

  <H5>Message Priorities</H5>

  <P>It is important to ensure that log message are appropriate in
  content and severity. The following guidelines are suggested:</P>

  <UL>
    <LI>fatal - Severe errors that cause the Axis server to
    terminate prematurely. Expect these to be immediately visible
    on a console, and MUST be internationalized.</LI>

    <LI style="list-style: none"><BR>
    &nbsp;</LI>

    <LI>error - Other runtime errors or unexpected conditions.
    Expect these to be immediately visible on a console, and MUST
    be internationalized.</LI>

    <LI style="list-style: none"><BR>
    &nbsp;</LI>

    <LI>warn - Use of deprecated APIs, poor use of API, almost
    errors, other runtime situations that are undesirable or
    unexpected, but not necessarily "wrong". Expect these to be
    immediately visible on a console, and MUST be
    internationalized.</LI>

    <LI style="list-style: none"><BR>
    &nbsp;</LI>

    <LI>info - Interesting runtime events (startup/shutdown).
    Expect these to be immediately visible on a console, so be
    conservative and keep to a minimum. These MUST be
    internationalized.</LI>

    <LI style="list-style: none"><BR>
    &nbsp;</LI>

    <LI>debug - detailed information on flow of through the system.
    Expect these to be written to logs only. These NEED NOT be
    internationalized, but it never hurts...</LI>

    <LI style="list-style: none"><BR>
    &nbsp;</LI>

    <LI>trace - more detailed information. Expect these to be
    written to logs only. These NEED NOT be internationalized, but
    it never hurts...</LI>
  </UL>

  <H4><A name="Configuring the Logger">Configuring the
  Logger</A></H4>

  <P>The Jakarta Commons Logging (JCL) SPI can be configured to use
  different logging toolkits. To configure which logger is used by
  the JCL, see the <A href="integration-guide.html">Axis System
  Integration Guide</A>.</P>

  <P>Configuration of the behavior of the JCL ultimately depends
  upon the logging toolkit being used. The JCL SPI (and hence Axis)
  uses <A href=
  "http://jakarta.apache.org/log4j/docs/index.html">Log4J</A> by
  default if it is available (in the CLASSPATH).</P>

  <H5>Log4J</H5>

  <P>As <A href=
  "http://jakarta.apache.org/log4j/docs/index.html">Log4J</A> is
  the prefered/default logger for Axis, a <I>few</I> details are
  presented herein to get the developer going.</P>

  <P>Configure Log4J using system properties and/or a properties
  file:</P>

  <UL>
    <LI>
      <STRONG>log4j.configuration=<I>log4j.properties</I></STRONG>

      <P>Use this system property to specify the name of a Log4J
      configuration file. If not specified, the default
      configuration file is <I>log4j.properties</I>. A
      <I>log4j.properties</I> file is provided in
      <CODE>axis.jar</CODE>.</P>

      <P>This properties file can sometimes be overridden by
      placing a file of the same name so as to appear before
      <CODE>axis.jar</CODE> in the CLASSPATH. However, the precise
      behaviour depends on the classloader that is in use at the
      time, so we don't recommend this technique.</P>

      <P>A safe way of overriding the properties file is to replace
      it in axis.jar. However, this isn't very convenient,
      especially if you want to tweak the properties during a debug
      session to filter out unwanted log entries. A more convenient
      alternative is to use an absolute file path to specify the
      properties file. This will even ignore web app's and their
      classloaders. So, for example on Linux, you could specify the
      system property:</P>
      <PRE>
log4j.configuration=file:/home/fred/log4j.props
</PRE>
    </LI>

    <LI><STRONG>log4j.debug</STRONG> A good way of telling where
    log4j is getting its configuration from is to set this system
    property and look at the messages on standard output.<BR>
    &nbsp;</LI>

    <LI><STRONG>log4j.rootCategory=<I>priority</I> [,
    <I>appender</I>]*</STRONG> Set the default (root) logger
    priority.<BR>
    &nbsp;</LI>

    <LI>
      <STRONG>log4j.logger.<I>logger.name</I>=<I>priority</I></STRONG>
      Set the priority for the named logger and all loggers
      hierarchically lower than, or below, the named logger.
      <I>logger.name</I> corresponds to the parameter of
      <CODE>LogFactory.getLog(<I>logger.name</I>)</CODE>, used to
      create the logger instance. Priorities are:
      <CODE>DEBUG</CODE>, <CODE>INFO</CODE>, <CODE>WARN</CODE>,
      <CODE>ERROR</CODE>, or <CODE>FATAL</CODE>.

      <P>Log4J understands hierarchical names, enabling control by
      package or high-level qualifiers:
      <CODE>log4j.logger.org.apache.axis.encoding=DEBUG</CODE> will
      enable debug messages for all classes in both
      <CODE>org.apache.axis.encoding</CODE> and
      <CODE>org.apache.axis.encoding.ser</CODE>. Likewise, setting
      <CODE>log4j.logger.org.apache.axis=DEBUG</CODE> will enable
      debug message for all Axis classes, but not for other Jakarta
      projects.</P>

      <P>A combination of settings will enable you to see the log
      events that you are interested in and omit the others. For
      example, the combination:</P>
      <PRE>
log4j.logger.org.apache.axis=DEBUG 
log4j.logger.org.apache.axis.encoding=INFO
log4j.logger.org.apache.axis.utils=INFO
log4j.logger.org.apache.axis.message=INFO
</PRE>cuts down the number of a log entries produced by a single
request to a manageable number.<BR>
       
    </LI>

    <LI>
      <STRONG>log4j.appender.<I>appender</I>.Threshold=<I>priority</I></STRONG>
      Log4J <I>appenders</I> correspond to different output
      devices: console, files, sockets, and others. If appender's
      <I>threshold</I> is less than or equal to the message
      priority then the message is written by that appender. This
      allows different levels of detail to be appear at different
      log destinations.

      <P>For example: one can capture DEBUG (and higher) level
      information in a logfile, while limiting console output to
      INFO (and higher).</P>
    </LI>
  </UL>

  <H3><A name="Axis Servlet Query String Plug-ins">Axis Servlet
  Query String Plug-ins</A></H3>

  <P>Any servlet that is derived from the
  <CODE>org.apache.axis.transport.http.AxisServlet</CODE> class
  supports a number of standard query strings (<I>?list</I>,
  <I>?method</I>, and <I>?wsdl</I>) that provide information from
  or perform operations on a web service (for instance,
  <I>?method</I> is used to invoke a method on a web service and
  <I>?wsdl</I> is used to retrieve the WSDL document for a web
  service). Axis servlets are not limited to these three query
  strings and developers may create their own "plug-ins" by
  implementing the
  <CODE>org.apache.axis.transport.http.QSHandler</CODE> interface.
  There is one method in this interface that must be implemented,
  with the following signature:</P>
  <PRE>
public void invoke (MessageContext msgContext) throws AxisFault;
</PRE>

  <P>The <CODE>org.apache.axis.MessageContext</CODE> instance
  provides the developer with a number of useful objects (such as
  the Axis engine instance, and HTTP servlet objects) that are
  accessible by its <CODE>getProperty</CODE> method. The following
  constants can be used to retrieve various objects provided by the
  Axis servlet invoking the query string plug-in:</P>

  <UL>
    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_NAME</STRONG><BR>

    A <CODE>String</CODE> containing the name of the query string
    plug-in. For instance, if the query string <I>?wsdl</I> is
    provided, the name of the plugin is <I>wsdl</I>.<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_SERVICE_NAME</STRONG><BR>

    A <CODE>String</CODE> containing the name of the Axis servlet
    that inovked the query string plug-in.<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_IS_DEVELOPMENT</STRONG><BR>

    A <CODE>Boolean</CODE> containing <CODE>true</CODE> if this
    version of Axis is considered to be in development mode,
    <CODE>false</CODE> otherwise.<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_ENABLE_LIST</STRONG><BR>

    A <CODE>Boolean</CODE> containing <CODE>true</CODE> if listing
    of the Axis server configuration is allowed, <CODE>false</CODE>
    otherwise.<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_ENGINE</STRONG><BR>

    A <CODE>org.apache.axis.server.AxisServer</CODE> object
    containing the engine for the Axis server.<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.MC_HTTP_SERVLETREQUEST</STRONG><BR>

    The <CODE>javax.servlet.http.HttpServletRequest</CODE> object
    from the Axis servlet that invoked the query string plug-in<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.MC_HTTP_SERVLETRESPONSE</STRONG><BR>

    The <CODE>javax.servlet.http.HttpServletResponse</CODE> object
    from the Axis servlet that invoked the query string plug-in<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_WRITER</STRONG><BR>

    The <CODE>java.io.PrintWriter</CODE> object from the Axis
    servlet that invoked the query string plug-in<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_LOG</STRONG><BR>

    The <CODE>org.apache.commons.logging.Log</CODE> object from the
    Axis servlet that invoked the query string plug-in, which is
    used to log messages.<BR>
    <BR></LI>

    <LI>
    <STRONG>org.apache.axis.transport.http.HTTPConstants.PLUGIN_EXCEPTION_LOG</STRONG><BR>

    The <CODE>org.apache.commons.logging.Log</CODE> object from the
    Axis servlet that invoked the query string plug-in, which is
    used to log exceptions.<BR>
    <BR></LI>
  </UL>

  <P>Query string plug-in development is much like normal servlet
  development since the same basic information and methods of
  output are available to the developer. Below is an example query
  string plug-in which simply displays the value of the system
  clock (<CODE>import</CODE> statements have been omitted for
  brevity):</P>
  <PRE>
public class QSClockHandler implements QSHandler {
     public void invoke (MessageContext msgContext) throws AxisFault {
          PrintWriter out = (PrintWriter) msgContext.getProperty (HTTPConstants.PLUGIN_WRITER);
          HttpServletResponse response = (HttpServletResponse)
           msgContext.getProperty (HTTPConstants.MC_HTTP_SERVLETRESPONSE);
          
          response.setContentType ("text/html");
          
          out.println ("&lt;HTML&gt;&lt;BODY&gt;&lt;H1&gt;" + System.currentTimeMillis()
           + "&lt;/H1&gt;&lt;/BODY&gt;&lt;/HTML&gt;");
     }
}
</PRE>

  <P>Once a query string plug-in class has been created, the Axis
  server must be set up to recognize the query string which invokes
  it. See the section <A href=
  "reference.html#Deployment">Deployment (WSDD) Reference</A> in
  the <A href="reference.html">Axis Reference Guide</A> for
  information on how the HTTP transport section of the Axis server
  configuration file must be set up.</P>

  <H2><A name="Configuration Properties"></A>Configuration
  Properties</H2>

  <P>Axis is in the process of moving away from using system
  properties as the primary point of internal configuration. Avoid
  calling <CODE>System.getProperty()</CODE>, and instead call
  <CODE>AxisProperties.getProperty</CODE>.
  <CODE>AxisProperties.getProperty</CODE> will call
  <CODE>System.getProperty</CODE>, and will (eventually) query
  other sources of configuration information.</P>

  <P>Using this central point of access will allow the global
  configuration system to be redesigned to better support multiple
  Axis engines in a single JVM.</P>

  <H2><A name="Exception Handling"></A>Exception Handling</H2>

  <P>Guidelines for Axis exception handling are based on
  best-practices for exception handling. While there are details
  specific to Axis in these guidelines, they apply in principle to
  any project; they are included here for two reasons. First,
  because they are not listed elsewhere in the Apache/Jakarta
  guidelines (or haven't been found). Second, because adherence to
  these guidelines is considered crucial to enterprise ready
  middleware.</P>

  <P>These guidelines are fundamentally independent of programming
  language. They are based on experience, but proper credit must be
  given to <I>More Effective C++</I>, by Scott Meyers, for opening
  the eyes of the innocent(?) many years ago.</P>

  <P>Finally, these are guidelines. There will always be exceptions
  to these guidelines, in which case all that can be asked (as per
  these guidelines) is that they be logged in the form of comments
  in the code.</P>

  <UL>
    <LI>
      <H3>Primary Rule: Only Catch An Exception If You Know What To
      Do With It</H3>
    </LI>

    <LI style="list-style: none">If code catches an exception, it
    should know what to do with it at that point in the program.
    Any exception to this rule must be documented with a GOOD
    reason. Code reviewers are invited to put on their vulture
    beaks and peck away...

      <P>There are a few corollaries to this rule.</P>

      <UL>
        <LI>
          <H4>Handle Specific Exceptions in Inner Code</H4>
        </LI>

        <LI style="list-style: none">Inner code is code <I>deep</I>
        within the program. Such code should catch specific
        exceptions, or categories of exceptions (parents in
        exception hierarchies), <U>if and only if</U> the exception
        can be resolved and normal flow restored to the code. Note
        that behaviour of this sort may be significantly different
        between non-interactive code versus an interactive
        tool.</LI>

        <LI>
          <H4>Catch All Exceptions in Outermost Flow of
          Control</H4>
        </LI>

        <LI style="list-style: none">Ultimately, all exceptions
        must be dealt with at one level or another. For
        command-line tools, this means the <CODE>main</CODE> method
        or program. For a middleware component, this is the entry
        point(s) into the component. For Axis this is
        <CODE>AxisServlet</CODE> or equivalent.

          <P>After catching specific exceptions which can be
          resolved internally, the outermost code must ensure that
          all internally generated exceptions are caught and
          handled. While there is generally not much that can be
          done, at a minimum the code should <U>log the
          exception</U>. In addition to logging, the Axis Server
          wraps all such exceptions in AxisFaults and returns them
          to the client code.</P>

          <P>This may seem contrary to the primary rule, but in
          fact we are claiming that Axis does know what to do with
          this type of exception: exit gracefully.</P>
        </LI>
      </UL>
    </LI>

    <LI>
      <H3>Catching and Logging Exceptions</H3>
    </LI>

    <LI style="list-style: none">When an Exception is going to
    cross a component boundry (client/server, or system/business
    logic), the exception must be caught and logged by the throwing
    component. It may then be rethrown, or wrapped, as described
    below.

      <P>When in doubt, log the exception.</P>

      <UL>
        <LI>
          <H4>Catch and Throw</H4>
        </LI>

        <LI style="list-style: none">If an exception is caught and
        rethrown (unresolved), logging of the exception is at the
        discretion of the coder and reviewers. If any comments are
        logged, the exception should also be logged.

          <P>When in doubt, log the exception and any related local
          information that can help to identify the complete
          context of the exception.</P>

          <P>Log the exception as an <I>error</I>
          (<CODE>log.error()</CODE>) if it is known to be an
          unresolved or unresolvable error, otherwise log it at the
          <I>informative</I> level (<CODE>log.info()</CODE>).</P>
        </LI>

        <LI>
          <H4>Catch and Wrap</H4>
        </LI>

        <LI style="list-style: none">When exception <CODE>e</CODE>
        is caught and wrapped by a new exception <CODE>w</CODE>,
        log exception <CODE>e</CODE> before throwing
        <CODE>w</CODE>.

          <P>Log the exception as an <I>error</I>
          (<CODE>log.error()</CODE>) if it is known to be an
          unresolved or unresolvable error, otherwise log it at the
          <I>informative</I> level (<CODE>log.info()</CODE>).</P>
        </LI>

        <LI>
          <H4>Catch and Resolve</H4>
        </LI>

        <LI style="list-style: none">When exception <CODE>e</CODE>
        is caught and resolved, logging of the exception is at the
        discretion of the coder and reviewers. If any comments are
        logged, the exception should also be logged
        (<CODE>log.info()</CODE>). Issues that must be balanced are
        performance and problem resolvability.

          <P>Note that in many cases, ignoring the exception may be
          appropriate.</P>
        </LI>
      </UL>
    </LI>

    <LI>
      <H3>Respect Component Boundries</H3>
    </LI>

    <LI style="list-style: none">There are multiple aspects of this
    guideline. On one hand, this means that business logic should
    be isolated from system logic. On the other hand, this means
    that client's should have limited exposure/visibility to
    implementation details of a server - particularly when the
    server is published to outside parties. This implies a well
    designed server interface.

      <UL>
        <LI>
          <H4>Isolate System Logic from Business Logic</H4>
        </LI>

        <LI style="list-style: none">Exceptions generated by the
        Axis runtime should be handled, where possible, within the
        Axis runtime. In the worst case the details of an exception
        are to be logged by the Axis runtime, and a generally
        descriptive Exception raised to the Business Logic.

          <P>Exceptions raised in the business logic (this includes
          the server and Axis handlers) must be delivered to the
          client code.</P>
        </LI>

        <LI>
          <H4>Protect System Code from User Code</H4>
        </LI>

        <LI style="list-style: none">Protect the Axis runtime from
        uncontrolled user business logic. For Axis, this means that
        dynamically configurable <CODE>handlers</CODE>,
        <CODE>providers</CODE> and other user controllable
        hook-points must be guarded by <CODE>catch(Exception
        ...)</CODE>. Exceptions generated by user code and caught
        by system code should be:

          <UL>
            <LI>Logged, and</LI>

            <LI>Delivered to the client program</LI>
          </UL>
        </LI>

        <LI>
          <H4>Isolate Visibility into Server from Client</H4>
        </LI>

        <LI style="list-style: none">Specific exceptions should be
        logged at the server side, and a more general exception
        thrown to the client. This prevents clues as to the nature
        of the server (such as handlers, providers, etc) from being
        revealed to client code. The Axis component boundries that
        should be respected are:

          <UL>
            <LI>Client Code &lt;--&gt; AxisClient</LI>

            <LI>AxisClient &lt;--&gt; AxisServlet
            (AxisServer/AxisEngine)</LI>

            <LI>AxisServer/AxisEngine &lt;--&gt; Web Service</LI>
          </UL>
        </LI>
      </UL>
    </LI>

    <LI>
      <H3>Throwing Exceptions in Constructors</H3>
    </LI>

    <LI style="list-style: none">Before throwing an exception in a
    constructor, ensure that any resources owned by the object are
    cleaned up. For objects holding resources, this requires
    catching <U>all</U> exceptions thrown by methods called within
    the constructor, cleaning up, and rethrowing the
    exceptions.</LI>
  </UL>

  <H2><A name="Compile And Run"></A>Compile and Run</H2>

  <P>The <TT>xml-axis/java/build.xml</TT> file is the primary
  'make' file used by ant to build the application and run the
  tests.  The <TT>build.xml</TT> file defines ant build
  <I>targets</I>.  Read the build.xml file for more information. 
  Here are some of the useful targets:<BR>
   </P>

  <UL>
    <LI><TT>compile -&gt; compiles the source and creates
    xml-axis/java/build/lib/axis.jar</TT></LI>

    <LI><TT>javadocs -&gt; creates the javadocs in
    xml-axis/java/build/javadocs</TT></LI>

    <LI><TT>functional-tests -&gt; compiles and runs the functional
    tests</TT></LI>

    <LI><TT>all-tests -&gt; compiles and runs all of the
    tests</TT></LI>

    <LI style="list-style: none"><BR>
     </LI>
  </UL>

  <P>To compile the source code:</P>

  <BLOCKQUOTE>
    <TT>cd xml-axis/java</TT><BR>
    <TT>ant compile</TT>
  </BLOCKQUOTE>

  <P>To run the tests:</P>

  <BLOCKQUOTE>
    <TT>cd xml-axis/java</TT><BR>
    <TT>ant functional-tests</TT>
  </BLOCKQUOTE>

  <P><B>Note:</B> these tests start a server on port 8080. If this
  clashes with the port used by your web application server (such
  as Tomcat), you'll need to change one of the ports or stop your
  web application server when running the tests.</P>

  <P><B>Please run <TT><FONT color="#009900">ant
  functional-tests</FONT></TT> and <TT><FONT color="#009900">ant
  all-tests</FONT></TT> before checking in new code.</B></P>

  <H2><A name="Internationalization"></A>Internationalization</H2>

  <P>If you make changes to the source code that results in the
  generation of text (error messages or debug information), you
  must follow the following guidelines to ensure that your text is
  properly translated.</P>

  <H3><A name="Developer Guidelines"></A>Developer Guidelines</H3>

  <OL>
    <LI>Your text string should be added as a property to the
    resource.properties file
    (xml-axis/java/src/org/apache/axis/i18n/resource.properties). 
    Note that some of the utility applications (i.e. tcpmon) have
    their own resource property files (tcpmon.properties).</LI>

    <LI style="list-style: none"><BR>
     </LI>

    <LI>The resource.properties file contains translation and usage
    instructions.  Entries in a message resource file are of the
    form <FONT color="#009900">&lt;key&gt;=&lt;message&gt;</FONT>.
    Here is an example message:</LI>

    <LI style="list-style: none">
      <P><FONT color="#009900">sample00=My name is {0}, and my
      title is {1}.</FONT><BR>
       </P>

      <OL>
        <LI>sample00 is the key that the code will use to access
        this message.</LI>

        <LI>The text after the = is the message text.</LI>

        <LI>The <FONT color="#009900">{<I>number</I>}</FONT> syntax
        defines the location for inserts.</LI>
      </OL>
    </LI>

    <LI>The code should use the static method
    org.apache.axis.i18n.Messages.getMessage to obtain the text and
    add inserts.  Here is an example usage:</LI>

    <LI style="list-style: none">
      <P><FONT color="#009900">Messages.getMessage("sample00",
      "Rich Scheuerle", "Software Developer");</FONT><BR>
       </P>
    </LI>

    <LI><FONT color="#000000">All keys in the properties file
    should use the syntax
    &lt;string&gt;&lt;2-digit-suffix&gt;.</FONT></LI>

    <LI style="list-style: none">
      <BR>
       

      <OL>
        <LI><FONT color="#000000"><B>Never change the message text
        in the properties file.</B> The message may be used in
        multiple places in the code.  Plus translation is only done
        on new keys.</FONT></LI>

        <LI style="list-style: none"><BR>
         </LI>

        <LI><FONT color="#000000">If a code change requires a
        change to a message, create a new entry with an incremented
        2-digit suffix.</FONT></LI>

        <LI style="list-style: none"><BR>
         </LI>

        <LI><FONT color="#000000">All new entries should be placed
        at the bottom of the file to ease translation.</FONT></LI>

        <LI style="list-style: none"><BR>
         </LI>

        <LI><FONT color="#000000">We may occasionally want to trim
        the properties file of old data, but this should only be
        done on major releases.</FONT></LI>
      </OL>
    </LI>
  </OL>

  <H4><A name="Example"></A>Example</H4>

  <P>Consider the following statement:</P>

  <P><CODE>        if ( operationName == null )</CODE><BR>
  <CODE>            throw new AxisFault( "No operation name
  specified" );</CODE></P>

  <P>We will add an entry into
  org/apache/axis/i18n/resource.properties:</P>

  <P><CODE>       noOperation=No operation name
  specified.</CODE></P>

  <P>And change the code to read:</P>

  <P><CODE>        if ( operationName == null )</CODE><BR>
  <CODE>            throw new
  AxisFault(Messages.getMessage("noOperation"));</CODE></P>

  <H3><A name="Interface"></A>Interface</H3>

  <P>Axis uses the standard Java internationalization class
  <CODE>java.util.ResourceBundle</CODE> to access property files
  and message strings, and uses
  <CODE>java.text.MessageFormat</CODE> to format the strings using
  variables. Axis provides a single class
  <CODE>org.apache.axis.i18n.Messages</CODE> that manages both
  ResourceBundle and MessageFormat classes. Messages methods
  are:</P>

  <P><CODE>public static java.util.ResourceBundle
  getResourceBundle();</CODE></P>

  <P><CODE>public static String getMessage(String key) throws
  java.util.MissingResourceException;</CODE></P>

  <P><CODE>public static String getMessage(String key, String var)
  throws java.util.MissingResourceException;</CODE></P>

  <P><CODE>public static String getMessage(String key, String var1,
  String var2) throws
  java.util.MissingResourceException;</CODE></P>

  <P><CODE>public static String getMessage(String key, String[]
  vars) throws java.util.MissingResourceException;</CODE></P>

  <P>Axis programmers can work with the resource bundle directly
  via a call to <CODE>Messages.getResourceBundle()</CODE>, but the
  <CODE>getMessage()</CODE> methods should be used instead for two
  reasons:</P>

  <OL>
    <LI>It's a shortcut. It is cleaner to call</LI>

    <LI style="list-style: none">
      <DIV style="margin-left: 2em">
        <CODE>Messages.getMessage("myMsg00");</CODE>
      </DIV>than

      <DIV style="margin-left: 2em">
        <CODE>Messages.getResourceBundle().getString("myMsg00");</CODE>
      </DIV><BR>
    </LI>

    <LI>The <CODE>getMessage</CODE> methods enable messages with
    variables.</LI>
  </OL>

  <H4>The getMessage methods</H4>

  <P>If you have a message with no variables</P>

  <DIV style="margin-left: 2em">
    <CODE>myMsg00=This is a string.</CODE>
  </DIV>

  <P>then simply call</P>

  <DIV style="margin-left: 2em">
    <CODE>Messages.getMessage("myMsg00");</CODE>
  </DIV>

  <P><BR>
  If you have a message with variables, use the syntax <FONT face=
  "Courier New,Courier">"{X}"</FONT> where <CODE>X</CODE> is the
  number of the variable, starting at 0. For example:</P>

  <DIV style="margin-left: 2em">
    <CODE>myMsg00=My {0} is {1}.</CODE>
  </DIV>

  <P>then call:</P>

  <DIV style="margin-left: 2em">
    <CODE>Messages.getMessage("myMsg00","name", "Russell");</CODE>
  </DIV>

  <P>and the resulting string will be:  "My name is Russell."</P>

  <P>You could also call the String array version of <FONT face=
  "Courier New,Courier"><FONT size=
  "-1">getMessage</FONT></FONT>:</P>

  <DIV style="margin-left: 2em">
    <CODE>Messages.getMessage("myMsg00", new String[] {"name",
    "Russell"});</CODE>
  </DIV>

  <P><BR>
  The String array version of <FONT face=
  "Courier New,Courier"><FONT size="-1">getMessage</FONT></FONT> is
  all that is necessary, but the vast majority of messages will
  have 0, 1 or 2 variables, so the other <FONT face=
  "Courier New,Courier"><FONT size="-1">getMessage</FONT></FONT>
  methods are provided as a convenience to avoid the complexity of
  the String array version.</P>

  <P>Note that the <FONT face="Courier New,Courier"><FONT size=
  "-1">getMessage</FONT></FONT> methods throw <FONT face=
  "Courier New,Courier"><FONT size=
  "-1">MissingResourceException</FONT></FONT> if the resource
  cannot be found.  And ParseException if there are more {X}
  entries than arguments.  These exceptions are <FONT face=
  "Courier New,Courier"><FONT size=
  "-1">RuntimeException'</FONT></FONT>s, so the caller doesn't have
  to explicitly catch them.</P>

  <P>The resource bundle properties file is
  org/apache/axis/i18n/resource.properties.</P>

  <H3><A name="Extending Message Files"></A>Extending Message
  Files</H3>

  <P>Generally, within Axis all messages are placed in
  org.apache.axis.i18n.resource.properties. There are facilities
  for extending the messages without modifying this file for
  integration or 3rd party extensions to Axis. See the <A href=
  "integration-guide.html#Extending%20Message%20Files">Integration
  Guide for details.</P>

  <H2><A name="Adding Testcases"></A><FONT color="#000000">Adding
  Testcases</FONT></H2>

  <P>See Also: <A href="#TestStructure">Test and Samples
  Structure</A></P>

  <P><FONT color="#000000"><B>Editor's Note:</B> We need more
  effort to streamline and simplify the addition of tests.  We also
  need to think about categorizing tests as the test bucket
  grows.</FONT><BR>
   </P>

  <P><FONT color="#000000">If you make changes to Axis, please add
  a test that uses your change.  Why?</FONT></P>

  <UL>
    <LI><FONT color="#000000">The test validates that your new code
    works.</FONT></LI>

    <LI><FONT color="#000000">The test protects your change from
    bugs introduced by future code changes.</FONT></LI>

    <LI><FONT color="#000000">The test is an example to users of
    the features of Axis.</FONT></LI>

    <LI><FONT color="#000000">The test can be used as a starting
    point for new development.</FONT></LI>
  </UL>

  <P><BR>
  <FONT color="#000000">Some general principles:</FONT></P>

  <UL>
    <LI><FONT color="#000000">Tests should be
    self-explanatory.</FONT></LI>

    <LI><FONT color="#000000">Tests should not generate an
    abundance of output</FONT></LI>

    <LI><FONT color="#000000">Tests should hook into the existing
    junit framework.</FONT></LI>

    <LI><FONT color="#000000">Each test or group of related tests
    should have its own directory in the
    <TT>xml-axis/java/test</TT> directory</FONT></LI>
  </UL>

  <P><BR>
  <FONT color="#000000">One way to build a test is to "cut and
  paste" the existing tests, and then modify the test to suit your
  needs.  This approach is becoming more complicated as the
  different kinds of tests grow.</FONT></P>

  <P>A good "non-wsdl" test for reference is test/saaj.</P>

  <H4><FONT color="#000000">Creating a WSDL Test</FONT></H4>

  <P><FONT color="#000000">Here are the steps that I used to create
  the <TT>sequence</TT> test, which generates code from a wsdl file
  and runs a sequence validation test:</FONT><BR>
   </P>

  <OL>
    <LI><FONT color="#000000">Created a
    <TT>xml-axis/java/test/wsdl/sequence</TT>
    directory.</FONT></LI>

    <LI style="list-style: none"><BR></LI>

    <LI><FONT color="#000000">Created a <TT>SequenceTest.wsdl</TT>
    file defining the webservice.</FONT></LI>

    <LI style="list-style: none"><BR></LI>

    <LI><FONT color="#000000">Ran the Wsdl2java emitter to create
    Java files:</FONT></LI>

    <LI style="list-style: none">
      <P><TT><FONT color="#993366">java
      org.apache.axis.wsdl.Wsdl2java -t -s
      SequenceTest.wsdl</FONT></TT></P>

      <OL>
        <LI><FONT color="#000000">The -t option causes the emitter
        to generate a *TestCase.java file that hooks into the test
        harness. This file is operational without any additional
        changes.  Copy the *TestCase.java file into the same
        directory as your wsdl file.  (Ideally only the Java files
        that are changed need to be in your directory.) So this
        file is not needed, but please make sure to modify your
        &lt;wsdl2java ...&gt; clause (described below) to emit a
        testcase.</FONT></LI>

        <LI><FONT color="#000000">The -s option causes the emitter
        to generate a *SOAPBindingImpl.java file.  The Java file
        contains empty methods for the service.  You probably want
        to fill them in with your own logic.  Copy the
        *SOAPBindingImpl.java file into the same directory as your
        wsdl file.  (If no changes are needed in the Java file, you
        don't need to save it.  But you will need to make sure that
        your &lt;wsdl2java ...&gt; clause generates a
        skeleton).</FONT></LI>

        <LI><FONT color="#000000">Remove all of the Java files that
        don't require modification.  So you should have three files
        in your directory (wsdl file, *TestCase.java, and
        *SOAPBindingImpl.java).  My sequence test has an another
        file due to some additional logic that I
        needed.</FONT></LI>
      </OL><BR>
    </LI>

    <LI><FONT color="#000000">The
    <TT>test/wsdl/sequence/build.xml</TT> file controls the
    building of this test.  Locate the "compile" target.  Add a
    clause that runs the Wsdl2java code. I would recommend stealing
    something from the test/wsdl/roundtrip/build.xml file (it does
    a LOT of wsdl2java and java2wsdl calls). Here is the one for
    SequenceTest:</FONT></LI>

    <LI style="list-style: none">
      <P><TT><FONT color="#663366">   </FONT> <FONT color=
      "#993366">&lt;!-- Sequence Test --&gt;</FONT></TT><BR>
      <TT><FONT color="#993366">    &lt;wsdl2java
      url="${axis.home}/test/wsdl/sequence/SequenceTest.wsdl"</FONT></TT><BR>

      <TT><FONT color="#993366">              
      output="${axis.home}/build/work"</FONT></TT><BR>
      <TT><FONT color="#993366">              
      deployscope="session"</FONT></TT><BR>
      <TT><FONT color="#993366">              
      skeleton="yes"</FONT></TT><BR>
      <TT><FONT color="#993366">              
      messagecontext="no"</FONT></TT><BR>
      <TT><FONT color="#993366">              
      noimports="no"</FONT></TT><BR>
      <TT><FONT color="#993366">              
      verbose="no"</FONT></TT><BR>
      <TT><FONT color="#993366">              
      testcase="no"&gt;</FONT></TT><BR>
      <TT><FONT color="#993366">        &lt;mapping
      namespace="urn:SequenceTest2"
      package="test.wsdl.sequence"/&gt;</FONT></TT><BR>
      <TT><FONT color="#993366">   
      &lt;/wsdl2java&gt;</FONT></TT></P>
    </LI>

    <LI><FONT color="#000000">Enable the <FONT color=
    "#993366">run</FONT> <FONT color="#000000">target in the new
    build.xml file.</FONT> You need to choose from the
    execute-Component and the (soon to be introduced)
    execute-Simple-Test target. These control HOW the test is
    invoked when run as a single component. The <FONT color=
    "#993366">execute-Component</FONT> sets up the tcp-server and
    http-server prior to running the test, as well as handles
    deploying and services that may be needed. The <FONT color=
    "#993366">execute-Simple-test</FONT> simply invokes the raw
    test class file.<BR>
    <BR></FONT></LI>

    <LI><FONT color="#000000"><FONT color="#000000">Done. 
    Run</FONT> <TT><FONT color="#993366">ant
    functional-tests</FONT> </TT><FONT color="#000000">to verify. 
    Check in your test.</FONT></FONT></LI>

    <LI style="list-style: none"><BR>
     </LI>
  </OL>

  <H2><A name="TestStructure"></A>Test Structure</H2>

  <P><A href="AxisTestRedesign.html">The Test and Samples Redesign
  Document is here</A></P>

  <P>As of Axis 1.0, RC1, we have moved to a "componentized" test
  structure. Instead of having one high-level large recursive
  function, there are smaller, simple "component" build.xml files
  in the leaf level of the test/** and samples/** trees.</P>

  <P>These "component" files have a common layout. Their primary
  targets are:</P>

  <UL>
    <LI>clean - reset the build destination(s)</LI>

    <LI>compile - javac, wsdl2java, java2wsdl instructions</LI>

    <LI>run - "executes" the test</LI>
  </UL><BR>

  <P>A "sample" test xml file can be found in test/templateTest</P>

  <H2><A name="CodeChecks"></A>Adding Source Code Checks</H2>

  <P>The Axis build performs certain automated checks of the files
  in the source directory (java/src) to make sure certain
  conventions are followed such as using internationalised strings
  when issuing messages.</P>

  <P>If a convention can be reduced to a regular expression match,
  it can be enforced at build time by updating
  java/test/utils/TestSrcContent.java.</P>

  <P>All that is necessary is to add a pattern to the static
  FileNameContentPattern array. Each pattern has three
  parameters:</P>

  <OL>
    <LI>a pattern that matches filenames that are to be
    checked,</LI>

    <LI>a pattern to be searched for in the chosen files, and</LI>

    <LI>a boolean indicating whether the pattern is to be allowed
    (typically false indicating not allowed).</LI>
  </OL>

  <P>A reasonable summary of the regular expression notation is
  provided in the <A href=
  "http://jakarta.apache.org/oro/api/org/apache/oro/text/regex/package-summary.html">
  Jakarta ORO javadocs</A>.</P>

  <H2><A name="JUnit"></A>JUnit and Axis</H2>

  <P>You try to run some JUnit tests on an Axis client that invokes
  a web service, and you always get this exception:</P>
  <PRE>
<![CDATA[
java.lang.ExceptionInInitializerError 
at org.apache.axis.client.Service.<init>(Service.java:108) 
... 

Caused by: org.apache.commons.logging.LogConfigurationException: ... 
org.apache.commons.logging.impl.Jdk14Logger does not implement Log 
at org.apache.commons.logging.impl.LogFactoryImpl.newInstance
(LogFactoryImpl.java:555) 
...
]]>

</PRE>

  <P>Actually, the Jdk14Logger does implement Log. What you have is
  a JUnit classloading issue. JUnit's graphical TestRunner has a
  feature where it will dynamically reload modified classes every
  time the user presses the "Run" button. This way, the user
  doesn't need to relaunch the TestRunner after every edit. For
  this, JUnit uses its own classloader,
  junit.runner.TestCaseClassLoader. As of JUnit 3.8.1, confusion
  can arise between TestCaseClassLoader and the system class loader
  as to which loader did or should load which classes.</P>

  <P>There are two ways to avoid this problem.</P>

  <UL>
    <LI>Sure and simple fix. Turn off dynamic class reloading by
    running junit.swingui.TestRunner with the -noloading
    argument.</LI>

    <LI>Finicky and fancy fix, only necessary if you want dynamic
    class reloading. Tell TestCaseClassLoader to ignore certain
    packages and their sub-packages, deferring them to the system
    classloader. You can do this using a file located in junit.jar,
    junit/runner/excluded.properties. Its content appears as
    follows:
      <PRE>
#
# The list of excluded package paths for the TestCaseClassLoader
#
excluded.0=sun.*
excluded.1=com.sun.*
excluded.2=org.omg.*
excluded.3=javax.*
excluded.4=sunw.*
excluded.5=java.*
excluded.6=org.w3c.dom.*
excluded.7=org.xml.sax.*
excluded.8=net.jini.*
</PRE>
    </LI>
  </UL>

  <P>Copy this file, preserving the directory path, into another
  location, e.g. deployDir. So the copied properties file's path
  will be deployDir/junit/runner/excluded.properties. Add an extra
  entry to the end of this file:</P>
  <PRE>
excluded.9=org.apache.*
</PRE>

  <P>Edit your classpath so that deployDir appears before
  junit.jar. This way, the modified excluded.properties will be
  used, rather than the default. (Don't add the path to
  excluded.properties itself to the classpath.)</P>

  <P>This fix will prevent the commons-logging exception. However,
  other classloading problems might still arise. For example:</P>
  <PRE>
Dec 10, 2002 7:16:16 PM org.apache.axis.encoding.ser.BeanPropertyTarget set 
SEVERE: Could not convert [Lfoo.bar.Child; to bean field 'childrenAsArray', 
type [Lfoo.bar.Child; 
Dec 10, 2002 7:16:16 PM org.apache.axis.client.Call invoke 
SEVERE: Exception: 
java.lang.IllegalArgumentException: argument type mismatch 
at org.apache.axis.encoding.ser.BeanPropertyTarget.set
(BeanPropertyTarget.java:182) 
at org.apache.axis.encoding.DeserializerImpl.valueComplete
(DeserializerImpl.java:284) 
...
</PRE>

  <P>In this case, you have no choice but to give up on dynamic
  class reloading and use the -noloading argument.</P>

  <P>One other heads-up about JUnit testing of an Axis web service.
  Suppose you have run JUnit tests locally on the component that
  you want to expose as a web service. You press the "Run" button
  to initiate a series of tests. Between each test, all your data
  structures are re-initialized. Your tests produce a long green
  bar. Good.</P>

  <P>Suppose you now want to run JUnit tests on an Axis client that
  is connecting to an application server running the Axis web
  application and with it your web service. Between each test,
  JUnit will automatically re-initialize your client.</P>

  <P>Your server-side data structures are a different matter. If
  you're checking your server data at the end of each test (as you
  should be) and you run more than one test at a time, the second
  and later tests will fail because they are generating cumulative
  data on the Axis server based on preceding tests rather than
  fresh data based only on the current one.</P>

  <P>This means that, for each test, you must manually
  re-initialize your web service. One way to accomplish this is to
  add to your web service interface a re-initialize operation. Then
  have the client call that operation at the start of each
  test.</P>

  <H2><A name="Debugging"></A>Debugging</H2>

  <H4>Using <CODE>tcpmon</CODE> to Monitor Functional Tests.</H4>

  <P>Here is an easy way to monitor the messages while running
  <CODE>functional-tests</CODE> (or <CODE>all-tests</CODE>).<BR>
  Start up tcpmon listening on 8080 and forwarding to a different
  port:</P>

  <BLOCKQUOTE>
    <TT>java org.apache.axis.utils.tcpmon 8080 localhost 8011</TT>
  </BLOCKQUOTE>

  <P>Run your tests, but use the forwarded port for the
  SimpleAxisServer, and indicate that functional-tests should
  continue if a failure occurs.</P>

  <BLOCKQUOTE>
    <TT>ant functional-tests -Dtest.functional.SimpleAxisPort=8011
    -Dtest.functional.fail=no</TT>
  </BLOCKQUOTE>

  <P>The SOAP messages for all of the tests should appear in the
  tcpmon window.</P>

  <P><CODE>tcpmon</CODE> is described in more detail in the
  <A href="user-guide.html#tcpmon">Axis User's Guide</A>.</P>

  <H4>Using <CODE>SOAP Monitor</CODE> to Monitor Functional
  Tests.</H4>

  <P>If you are debugging code that is running as a web application
  using a web application server (such as Tomcat) then you may also
  use the SOAP Monitor utility to view the SOAP request and
  response messages.<BR>
  Start up the SOAP monitor utility by loading the SOAP monitor
  applet in your web browser window:</P>

  <BLOCKQUOTE>
    <TT>http://localhost:&lt;port&gt;/axis/SOAPMonitor</TT>
  </BLOCKQUOTE>

  <P>As you run your tests, the SOAP messages should appear in
  the SOAP monitor window.</P>

  <P><CODE>SOAP Monitor</CODE> is described in more detail in the
  <A href="user-guide.html#soapmon">Axis User's Guide</A>.</P>

  <H4>Running a Single Functional Test</H4>

  <P>In one window start the server:</P>

  <BLOCKQUOTE>
    <TT>java org.apache.axis.transport.http.SimpleAxisServer -p
    8080</TT>
  </BLOCKQUOTE>

  <P>In another window, first deploy the service you're
  testing:</P>

  <BLOCKQUOTE>
    <TT>java org.apache.axis.client.AdminClient deploy.wsdd</TT>
  </BLOCKQUOTE>

  <P>Then bring up the JUnit user interface with your test. For
  example, to run the the multithread test case:</P>

  <BLOCKQUOTE>
    <TT>java junit.swingui.TestRunner -noloading
    test.wsdl.multithread.MultithreadTestCase</TT>
  </BLOCKQUOTE>

  <H4>Turning on Debug Output</H4>

  <P>This section is oriented to the Axis default logger: Log4J.
  For additional information on Log4J, see the section <A href=
  "#Configuring%20the%20Logger">Configuring the Logger</A>.</P>

  <UL>
    <LI>
      <H5>Overriding Log4J properties</H5>
    </LI>

    <LI style="list-style: none">The <CODE>log4j.properties</CODE>
    file is packaged in <CODE>axis.jar</CODE> with reasonable
    default settings. Subsequent items presume changes to these
    settings. There are multiple options open to the developer,
    most of which involve extracting <CODE>log4j.properties</CODE>
    from <CODE>axis.jar</CODE> and modifying as appropriate.

      <UL>
        <LI>If you are building and executing <CODE>Java</CODE>
        programs from a command line or script file, include the
        JVM option
        <CODE>-Dlog4j.configuration=<I>yourConfigFile</I></CODE>.</LI>

        <LI>Set <CODE>CLASSPATH</CODE> such that your version of
        <CODE>log4j.properties</CODE> appears prior to
        <CODE>axis.jar</CODE> in the <CODE>CLASSPATH</CODE>.</LI>

        <LI>If you are building and executing your programs using
        <CODE>ant</CODE> (this includes building Axis and running
        it's tests), set the environment variable
        <CODE>ANT_OPTS</CODE> to
        <CODE>-Dlog4j.configuration=<I>yourConfigFile</I></CODE>.</LI>

        <LI>If you are building Axis, you can change
        <CODE>src/log4j.properties</CODE> directly. Be sure NOT to
        commit your change(s).</LI>
      </UL><BR>
    </LI>

    <LI>
      <H5>Turning on ALL DEBUG Output</H5>
    </LI>

    <LI style="list-style: none">
      <UL>
        <LI>Set the <CODE>log4j.rootCategory</CODE> <I>priority</I>
        to <CODE>DEBUG</CODE>.</LI>

        <LI>Set the <I>priority</I> threshold for an appender to
        <CODE>DEBUG</CODE> (The <CODE>log4j.properties</CODE> file
        in Axis defines two appenders: <CODE>CONSOLE</CODE> and
        <CODE>LOGFILE</CODE>).</LI>
      </UL><BR>
    </LI>

    <LI>
      <H5>Selective DEBUG Output</H5>
    </LI>

    <LI style="list-style: none">
      <UL>
        <LI>Set the <CODE>log4j.rootCategory</CODE> <I>priority</I>
        to <CODE>INFO</CODE> or higher.</LI>

        <LI>Set the <CODE>log4j.logger.<I>logger.name</I></CODE>
        <I>priority</I> to <CODE>DEBUG</CODE> for the loggers that
        you are interested in.</LI>

        <LI>Set the <I>priority</I> threshold for an appender to
        <CODE>DEBUG</CODE> (The <CODE>log4j.properties</CODE> file
        in Axis defines two appenders: <CODE>CONSOLE</CODE> and
        <CODE>LOGFILE</CODE>).</LI>

        <LI>If you are still seeing more than you want to see, you
        will need to use other tools to extract the information you
        are interested in from the log output. Use appropriate key
        words in log messages and use tools such as
        <CODE>grep</CODE> to search for them in log messages.</LI>
      </UL>
    </LI>
  </UL>

  <H4>Writing Temporary Output</H4>

  <P>Remember that Axis is targeted for use in a number of
  open-source and other web applications, and so it needs to be a
  good citizen. Writing output using
  <CODE>System.out.println</CODE> or
  <CODE>System.err.println</CODE> should be avoided.</P>

  <P>Developers may be tempted to use
  <CODE>System.out.println</CODE> while debugging or analyzing a
  system. If you choose to do this, you will need to disable the
  <CODE>util/TestSrcContent</CODE> test, which enforces avoidance
  of <CODE>System.out.println</CODE> and
  <CODE>System.err.println</CODE>. It follows that you will need to
  remove your statements before checking the code back in.</P>

  <P>As an alternative, we strongly encourage you to take a few
  moments and introduce debug statements:
  <CODE>log.debug("reasonably terse and meaningful
  message")</CODE>. If a debug message is useful for understanding
  a problem now, it may be useful again in the future to you or a
  peer.</P>

  <H2><A name="TCK"></A>Running the JAX-RPC Compatibility
  Tests</H2>

  <P>As well as a specification, JAX-RPC has a Technology
  Compatibility Kit (TCK) which is available to members of the
  JAX-RPC Expert Group (and others?).</P>

  <P>The kit comes as a zip file which you should unzip into a
  directory of your choosing. The installation instructions are in
  the JAX-RPC Release Notes document which is stored in the docs
  directory. If you open the index.html file in the docs directory
  using a web browser, you'll see a list of all the documents
  supplied with the kit.</P>

  <P>Note that the kit includes the JavaTest test harness which is
  used for running the compatibility tests.</P>

  <P>If any more information is needed about running these tests,
  please add it here!</P>
</BODY>
</HTML>
