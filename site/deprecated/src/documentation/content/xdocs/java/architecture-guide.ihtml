<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML>
<HEAD>
  <META name="generator" content=
  "HTML Tidy for Windows (vers 1st October 2003), see www.w3.org">
  <META http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">

  <TITLE>Axis Architecture Guide</TITLE>
  <LINK href="axis.css" rel="stylesheet" type="text/css">
</HEAD>

<BODY>
  <CENTER>
    <H1><IMG src="images/axis.jpg" height="96" width="176"></H1>
  </CENTER>

  <H1>Axis Architecture Guide</H1>

  <P><BR>
  <I>1.1 Version</I><BR>
  <I>Feedback: <A href=
  "mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</A></I></P>

  <H3>Contents</H3>

  <P><A href="#Introduction">Introduction</A><BR>
  <A href="#Overview">Architecture Overview</A><BR>
  <A href="#Subsystems">Subsystems</A><BR>
  <A href="#Message%20Flow">Message Flow Subsystem</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#Handlers">Handlers and
  Chains</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#Message%20Contexts">Message
  Contexts</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#Engine">Engine</A><BR>
  <A href="#Administration%20Subsystem">Administration
  Subsystem</A><BR>
  <A href="#Message%20Model%20Subsystem">Message Model
  Subsystem</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#SOAP%20message%20model">SOAP Message
  Model</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#Message%20elements">Message
  Elements</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#D13n">Deserialization</A><BR>
  <A href="#Encoding%20Subsystem">Encoding Subsystem</A><BR>
  <A href="#WSDL%20Subsystem">WSDL Tools Subsystem</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#WSDL2Java">WSDL2Java</A><BR>
  <A href="#Sequence%20Diagrams">Interaction Diagrams</A><BR>
  &nbsp;&nbsp;&nbsp; <A href="#Client%20Interaction">Client Side
  Processing</A><BR>
  <A href="#Pluggable-Component%20Discovery">Pluggable-Component
  Discovery</A><BR>
  <A href="#Open%20Issues">Open Issues</A></P>

  <H2><A name="Introduction"></A>Introduction</H2>

  <P>This guide records some of the rationale of the architecture
  and design of Axis.</P>

  <H2><A name="Overview"></A>Architectural Overview</H2>

  <P>Axis consists of several subsystems working together, as we
  shall see later. In this section we'll give you an overview of
  how the core of Axis works.</P>

  <H3>Handlers and the Message Path in Axis</H3>

  <P>Put simply, Axis is all about processing Messages. When the
  central Axis processing logic runs, a series of <B>Handlers</B>
  are each invoked in order. The particular order is determined by
  two factors - deployment configuration and whether the engine is
  a client or a server. The object which is passed to each Handler
  invocation is a <B>MessageContext</B>. A MessageContext is a
  structure which contains several important parts: 1) a "request"
  message, 2) a "response" message, and 3) a bag of properties.
  More on this in a bit.</P>

  <P>There are two basic ways in which Axis is invoked:</P>

  <OL>
    <LI>As a <B>server</B>, a <B>Transport Listener</B> will create
    a MessageContext and invoke the Axis processing framework.</LI>

    <LI>As a <B>client</B>, application code (usually aided by the
    client programming model of Axis) will generate a
    MessageContext and invoke the Axis processing framework.</LI>
  </OL>

  <P>In either case, the Axis framework's job is simply to pass the
  resulting MessageContext through the configured set of Handlers,
  each of which has an opportunity to do whatever it is designed to
  do with the MessageContext.</P>

  <H3>Message Path on the Server</H3>

  <P>The server side message path is shown in the following
  diagram. The small cylinders represent Handlers and the larger,
  enclosing cylinders represent <B>Chains</B> (ordered collections
  of Handlers which will be described shortly).<BR>
  <IMG src="images/ServerMessagePath.jpg" vspace="30" height="282"
  width="602"><BR>
  A message arrives (in some protocol-specific manner) at a
  Transport Listener. In this case, let's assume the Listener is a
  HTTP servlet. It's the Listener's job to package the
  protocol-specific data into a <B>Message</B> object
  (org.apache.axis.Message), and put the Message into a
  <B>MessageContext</B>. The MessageContext is also loaded with
  various <B>properties</B> by the Listener -&nbsp; in this example
  the property "http.SOAPAction" would be set to the value of the
  SOAPAction HTTP header. The Transport Listener also sets the
  <B>transportName</B> String on the MessageContext , in this case
  to "http". Once the MessageContext is ready to go, the Listener
  hands it to the AxisEngine.</P>

  <P>The AxisEngine's first job is to look up the transport by
  name. The transport is an object which contains a <B>request</B>
  Chain, a <B>response</B> Chain, or perhaps both. A <B>Chain</B>
  is a Handler consisting of a sequence of Handlers which are
  invoked in turn -- more on Chains later. If a transport request
  Chain exists, it will be invoked, passing the MessageContext into
  the invoke() method. This will result in calling all the Handlers
  specified in the request Chain configuration.</P>

  <P>After the transport request Handler, the engine locates a
  global request Chain, if configured, and then invokes any
  Handlers specified therein.</P>

  <P>At some point during the processing up until now, some Handler
  has hopefully set the <B>serviceHandler</B> field of the
  MessageContext (this is usually done in the HTTP transport by the
  "URLMapper" Handler, which maps a URL like
  "http://localhost/axis/services/AdminService" to the
  "AdminService" service). This field determines the Handler we'll
  invoke to execute service-specific functionality, such as making
  an RPC call on a back-end object. Services in Axis are typically
  instances of the "SOAPService" class
  (org.apache.axis.handlers.soap.SOAPService), which may contain
  <B>request</B> and <B>response</B> Chains (similar to what we saw
  at the transport and global levels), and must contain a
  <B>provider</B>, which is simply a Handler responsible for
  implementing the actual back end logic of the service.</P>

  <P>For RPC-style requests, the provider is the
  org.apache.axis.providers.java.RPCProvider class. This is just
  another Handler that, when invoked, attempts to call a backend
  Java object whose class is determined by the "className"
  parameter specified at deployment time. It uses the SOAP RPC
  convention for determining the method to call, and makes sure the
  types of the incoming XML-encoded arguments match the types of
  the required parameters of the resulting method.</P>

  <H3>The Message Path on the Client</H3>

  <P>The Message Path on the client side is similar to that on the
  server side, except the order of scoping is reversed, as shown
  below.<BR>
  <IMG src="images/ClientMessagePath.jpg" vspace="30" height="281"
  width="592"><BR>
  The <B>service</B> Handler, if any, is called first - on the
  client side, there is no "provider" since the service is being
  provided by a remote node, but there is still the possibility of
  request and response Chains. The service request and response
  Chains perform any service-specific processing of the request
  message on its way out of the system, and also of the response
  message on its way back to the caller.</P>

  <P>After the service request Chain, the global request Chain, if
  any, is invoked, followed by the transport. The <B>Transport
  Sender</B>, a special Handler whose job it is to actually perform
  whatever protocol-specific operations are necessary to get the
  message to and from the target SOAP server, is invoked to send
  the message. The response (if any) is placed into the
  responseMessage field of the MessageContext, and the
  MessageContext then propagates through the response Chains -
  first the transport, then the global, and finally the
  service.</P>

  <H2><A name="Subsystems"></A>Subsystems</H2>

  <P>Axis comprises several subsystems working together with the
  aim of separating responsibilities cleanly and making Axis
  modular. Subsystems which are properly layered enable parts of a
  system to be used without having to use the whole of it (or hack
  the code).</P>

  <P>The following diagram shows the layering of subsystems. The
  lower layers are independent of the higher layers. The 'stacked'
  boxes represent mutually independent, although not necessary
  mutually exclusive, alternatives. For example, the HTTP, SMTP,
  and JMS transports are independent of each other but may be used
  together.</P>

  <P><IMG src="images/subsystems.jpg"></P>

  <P>In fact, the Axis source code is not as cleanly separated into
  subsystems as the above diagram might imply. Some subsystems are
  spread over several packages and some packages overlap more than
  one subsystem. Proposals to improve the code structure and make
  it conform more accurately to the notional Axis subsystems will
  be considered when we get a chance.</P>

  <H2><A name="Message Flow"></A>Message Flow Subsystem</H2>

  <H3><A name="Handlers"></A>Handlers and Chains</H3>

  <P>Handlers are invoked in sequence to process messages. At some
  point in the sequence a Handler may send a request and receive a
  response or else process a request and produce a response. Such a
  Handler is known as the <I>pivot point</I> of the sequence. As
  described above, Handlers are either transport-specific,
  service-specific, or global. The Handlers of each of these three
  different kinds are combined together into Chains. So the overall
  sequence of Handlers comprises three Chains: transport, global,
  and service. The following diagram shows two sequences of
  handlers: the client-side sequence on the left and the
  server-side sequence on the right.<BR>
  <IMG src="images/pivots.jpg" height="240" width="403"></P>

  <P>A web service does not necessarily send a response message to
  each request message, although many do. However, response
  Handlers are still useful in the message path even when there
  isn't a response message, e.g. to stop timers, clean up
  resources, etc.</P>

  <P>A Chain is a composite Handler, i.e. it aggregates a
  collection of Handlers as well as implementing the Handler
  interface as shown in the following UML diagram:<BR>
  <IMG src="images/chainclasses.jpg"></P>

  <P>A Chain also has similarities to the Chain of Responsibility
  design pattern in which a request flows along a sequence of
  Handlers until it is processed. Although an Axis Chain may
  process a request in stages over a succession of Handlers, it has
  the same advantages as Chain of Responsibility: flexibility and
  the ease with which new function can be added.</P>

  <P>Back to message processing -- a message is processed by
  passing through the appropriate Chains. A message context is used
  to pass the message and associated environment through the
  sequence of Handlers. The model is that Axis Chains are
  constructed offline by having Handlers added to them one at a
  time. Then they are turned online and message contexts start to
  flow through the Chains. Multiple message contexts may flow
  through a single Chain concurrently. Handlers are never added to
  a Chain once it goes online. If a Handler needs to be added or
  removed, the Chain must be 'cloned', the modifications made to
  the clone, and then the clone made online and the old Chain
  retired when it is no longer in use. Message contexts that were
  using the old Chain continue to use it until they are finished.
  This means that Chains do not need to cope with the addition and
  removal of Handlers while the Chains are processing message
  contexts -- an important simplification.</P>

  <P>The deployment registry has factories for Handlers and Chains.
  Handlers and Chains can be defined to have 'per-access',
  'per-request', or 'singleton' scope although the registry
  currently only distinguishes between these by constructing
  non-singleton scope objects when requested and constructing
  singleton scope objects once and holding on to them for use on
  subsequent creation requests.</P>

  <H4>Targeted Chains</H4>

  <P>A <B>Targeted Chain</B> is a special kind of chain which may
  have any or all of: a request Handler, a pivot Handler, and a
  response Handler. The following class diagram shows how Targeted
  Chains relate to Chains. Note that a Targeted Chain is an
  aggregation of Handlers by virtue of extending the Chain
  interface which is an aggregation of Handlers.</P>

  <P><IMG src="images/targetedchainclasses.jpg"></P>

  <P>A service is a special kind of Targeted Chain in which the
  pivot Handler is known as a "provider".</P>

  <H4>Fault Processing</H4>

  <P>Now let's consider what happens when a fault occurs. The
  Handlers prior to the Handler that raised the fault are driven,
  in reverse order, for onFault (previously misnamed 'undo'). The
  scope of this backwards scan is interesting: all Handlers
  previously invoked for the current Message Context are
  driven.</P>

  <P><I>Need to explain how "FaultableHandlers" and "WSDD Fault
  Flows" fit in.</I></P>

  <H3><A name="Message Contexts"></A>Message Contexts</H3>

  <P>The current structure of a MessageContext is shown below. Each
  message context may be associated with a request Message and/or a
  response Message. Each Message has a SOAPPart and an Attachments
  object, both of which implement the Part interface.<BR>
  <IMG src="images/messagecontext.jpg"><BR>
  The typing of Message Contexts needs to be carefully considered
  in relation to the Axis architecture. Since a Message Context
  appears on the Handler interface, it should not be tied to or
  biassed in favour of&nbsp; SOAP. The current implementation is
  marginally biassed towards SOAP in that the setServiceHandler
  method narrows the specified Handler to a SOAPService.</P>

  <H3><A name="Engine"></A>Engine</H3>

  <P>Axis has an abstract AxisEngine class with two concrete
  subclasses: AxisClient drives the client side handler chains and
  AxisServer drives the server side handler chains. The
  relationships between these classes is fairly simple:<BR>
  <IMG src="images/engineclasses.jpg"></P>

  <H4>Engine Configuration</H4>

  <P>The EngineConfiguration interface is the means of configuring
  the Handler factories and global options of an engine instance.
  An instance of a concrete implementation of EngineConfiguration
  must be passed to the engine when it is created and the engine
  must be notified if the EngineConfiguration contents are
  modified. The engine keeps a reference to the EngineConfiguration
  and then uses it to obtain Handler factories and global
  options.</P>

  <P>The EngineConfiguration interface belongs to the Message Flow
  subsystem which means that the Message Flow subsystem does not
  depend on the Administration subsystem.</P>

  <H2><A name="Administration Subsystem"></A>Administration
  Subsystem</H2>

  <P>The Administration subsystem provides a way of configuring
  Axis engines. The configuration information an engine needs is a
  collection of factories for runtime artefacts such as Chains and
  SOAPServices and a set of global configuration options for the
  engine.</P>

  <P>The Message Flow subsystem's EngineConfiguration interface is
  implemented by the Administration subsystem. FileProvider enables
  an engine to be configured statically from a file containing a
  deployment descriptor which is understood by the WSDDDeployment
  class. SimpleProvider, on the other hand, enables an engine to be
  configured dynamically.<BR>
  <IMG src="images/engineconfig.jpg"></P>

  <H3>WSDD-Based Administration</H3>

  <P>WSDD is an XML grammer for deployment descriptors which are
  used to statically configure Axis engines. Each Handler needs
  configuration in terms of the concrete class name of a factory
  for the Handler, a set of options for the handler, and a
  lifecycle scope value which determines the scope of sharing of
  instances of the Handler.</P>

  <P>The structure of the WSDD grammar is mirrored by a class
  hierarchy of factories for runtime artefacts. The following
  diagram shows the classes and the types of runtime artefacts they
  produce (a dotted arrow means "instantiates").<BR>
  <IMG src="images/wsddclasses.jpg"></P>

  <H2><A name="Message Model Subsystem"></A>Message Model
  Subsystem</H2>

  <H3><A name="SOAP message model"></A>SOAP Message Model</H3>

  <P>The XML syntax of a SOAP message is fairly simple. A SOAP
  message consists of an <I>envelope</I> containing:</P>

  <UL>
    <LI>an optional <I>header</I> containing zero or more <I>header
    entries</I> (sometimes ambiguously referred to as
    <I>headers</I>),</LI>

    <LI>a <I>body</I> containing zero or more <I>body entries</I>,
    and</LI>

    <LI>zero or more additional, non-standard elements.</LI>
  </UL>

  <P>The only body entry defined by SOAP is a <I>SOAP fault</I>
  which is used for reporting errors.</P>

  <P>Some of the XML elements of a SOAP message define namespaces,
  each in terms of a URI and a local name, and encoding styles, a
  standard one of which is defined by SOAP.</P>

  <P>Header entries may be tagged with the following optional SOAP
  attributes:</P>

  <UL>
    <LI><I>actor</I> which specifies the intended recipient of the
    header entry in terms of a URI, and</LI>

    <LI><I>mustUnderstand</I> which specifies whether or not the
    intended recipient of the header entry is required to process
    the header entry.</LI>
  </UL>

  <P>So the SOAP message model looks like this:<BR>
  <IMG src="images/soapmessagemodel.jpg"></P>

  <H3><A name="Message elements"></A>Message Elements</H3>

  <P>The classes which represent SOAP messages form a class
  hierarchy based on the MessageElement class which takes care of
  namespaces and encodings. The SOAPHeaderElement class looks after
  the actor and mustUnderstand attributes.<BR>
  <IMG src="images/messagemodelclasses.jpg"> During
  deserialization, a parse tree is constructed consisting of
  instances of the above classes in parent-child relationships as
  shown below.<BR>
  <IMG src="images/messagetree.jpg"></P>

  <H3><A name="D13n"></A>Deserialization</H3>

  <P>The class mainly responsible for XML parsing, i.e.
  deserialization, is DeserializationContextImpl ('DCI') which
  inherits most of its methods from the DeserializationContext
  interface. DCI manages the construction of the parse tree and
  maintains a stack of SAX handlers, a reference to the
  MessageElement that is currently being deserialized, a stack of
  namespace mappings, a mapping from IDs to elements, a set of type
  mappings for deserialization (see <A href=
  "#Encoding%20Subsystem">Encoding Subsystem</A>) and a SAX event
  recorder.</P>

  <P>Elements that we scan over, or ones for which we don't have a
  particular deserializer, are recorded - in other words, the SAX
  events are placed into a queue which may be 'played back' at a
  later time to any SAX ContentHandler.</P>

  <P>Once a SOAPEnvelope has been built, either through a parse or
  manual construction by the user, it may be output using a
  SerializationContext (also see <A href=
  "#Encoding%20Subsystem">Encoding Subsystem</A>). MessageElements
  all have an output() method which lets them write out their
  contents.</P>

  <P>The SAX handlers form a class hierarchy:<BR>
  <IMG src="images/SAXHandlerClasses.jpg"></P>

  <P>and stack up as shown in the following diagram:<BR>
  <IMG src="images/SAXhandlers.jpg"></P>

  <P>Initially, the SAX handler stack just contains an instance of
  EnvelopeHandler which represents the fact that parsing of the
  SOAP envelope has not yet started. The EnvelopeHandler is
  constructed with a reference to an EnvelopeBuilder, which is the
  SAX handler responsible for parsing the SOAP envelope.</P>

  <P>During parsing, DCI receives the events from the SAX parser
  and notifies either the SAX handler on the top of its handler
  stack, the SAX event recorder, or both.</P>

  <P>On the start of an element, DCI calls the SAX handler on the
  top of its handler stack for onStartChild. This method returns a
  SAX handler to be used to parse the child, which DCI pushes on
  its SAX handler stack and calls for startElement. startElement,
  amongst other things, typically creates a new MessageElement of
  the appropriate class and calls DCI for pushNewElement. The
  latter action creates the parent-child relationships of the parse
  tree.</P>

  <P>On the end of an element, DCI pops the top SAX handler from
  its handler stack and calls it for endElement. It then drives SAX
  handler which is now on the top of the handler stack for
  onEndChild. Finally, it sets the MessageElement that is currently
  being deserialized to the parent of the current one.</P>

  <P>Elements which are not defined by SOAP are treated using a
  SOAPHandler as a SAX event handler and a MessageElement as a node
  in the parse tree.</P>

  <H2><A name="Encoding Subsystem"></A>Encoding Subsystem</H2>

  <P>Encoding is most easily understood from the bottom up. The
  basic requirement is to transform between values of programming
  language datatypes and their XML representations. In Axis, this
  means encoding (or 'serializing') Java objects and primitives
  into XML and decoding (or 'deserializing') XML into Java objects
  and primitives. The basic classes that implement these steps are
  <I>serializers</I> and <I>deserializers</I>.<BR>
  <IMG src="images/serclasses.jpg"></P>

  <P>Particular serializers and deserializers are written to
  support a specific XML processing mechanism such as DOM or SAX.
  So <I>serializer factories</I> and <I>deserializer factories</I>
  are introduced to construct serializers and deserializers for a
  XML processing mechanism which is specified as a parameter.<BR>
  <IMG src="images/serfactoryclasses.jpg"></P>

  <P>As is apparent from the above class diagrams, each pair of
  Java type and XML data type which needs encoding and decoding
  requires specific serializers and deserializers (actually one of
  each per XML processing mechanism). So we need to maintain a
  mapping from a pair of Java type and XML data type, identified by
  a QName, to a serializer factory and a deserializer factory. Such
  a mapping is known as a <I>type mapping</I>. The type mapping
  class hierarchy is shown below. Notice how the default type
  mapping instantiates the various serializer and deserialiser
  factories.<BR>
  <IMG src="images/typemappingclasses.jpg"></P>

  <P>There is one final level of indirection. How do we know which
  type mapping to use for a particular message? This is determined
  by the encoding which is specified in the message. A <I>type
  mapping registry</I> maintains a map from encoding name (URI) to
  type mapping. Note that the XML data type QNames are defined by
  the encoding.<BR>
  <IMG src="images/typemappingclasses.jpg"></P>

  <P>So, in summary, to encode a Java object or primitive data
  value to a XML datatype or to decode the latter to the former, we
  need to know:</P>

  <UL>
    <LI>the Java type we are dealing with,</LI>

    <LI>the QName of the XML data type we want to encode it
    as,</LI>

    <LI>the XML processing mechanism we are using, and</LI>

    <LI>the encoding name.</LI>
  </UL>

  <H2><A name="WSDL Subsystem"></A>WSDL Tools Subsystem</H2>

  <P>The WSDL Tools subsystem contains WSDL2Java and Java2WSDL. The
  Axis runtime does not depend on these tools -- they are just
  there to make life easier for the user. <A name=
  "WSDL2Java"></A></P>

  <H3>WSDL2Java</H3>

  <P>This tool takes a description of a web service written in WSDL
  and emits Java artefacts used to access the web service.</P>

  <P>There are three layers inside the tool:</P>

  <UL>
    <LI>framework: SymbolTable, Emitter, WriterFactory</LI>

    <LI>WSDL2Java plugin to the framework: WSDL2Java (the main),
    JavaWriterFactory, and all the WSDL-relative writers:
    JavaPortTypeWriter, JavaBindingWriter, etc.</LI>

    <LI>The actual WSDL2Java emitters, one for each file generated:
    JavaInterfaceWriter, JavaStubWriter, etc.</LI>
  </UL>

  <P><A name="Java2WSDL"></A></P>

  <H3>Java2WSDL</H3>

  <P>tbd.</P>

  <H2><A name="Sequence Diagrams"></A>Interaction Diagrams</H2>

  <H3><A name="Client Interaction"></A>Client Side Processing</H3>

  <P>The client side Axis processing constructs a Call object with
  associated Service, MessageContext, and request Message as shown
  below before invoking the AxisClient engine.</P>

  <P><IMG src="images/clientobjects.jpg" height="120" width=
  "349"><BR>
  An instance of&nbsp; Service and its related AxisClient instance
  are created before the Call object. The Call object is then
  created by invoking the Service.createCall <I>factory method</I>.
  Call.setOperation creates a Transport instance, if a suitable one
  is not already associated with the Call instance. Then
  Call.invoke creates a MessageContext and associated request
  Message, drives AxisClient.invoke, and processes the resultant
  MessageContext. This significant method calls in this sequence
  are shown in the following interaction diagram.<BR>
  <IMG src="images/clientinteraction.jpg" height="503" width=
  "731"></P>

  <H2><A name=
  "Pluggable-Component Discovery"></A>Pluggable-Component
  Discovery</H2>

  <P>While most pluggable components infrastructures (jaxp/xerces,
  commons-logging, etc) provide discovery features, it is foreseen
  that there are situations where these may evolve over time. For
  example, as leading-edge technologies are reworked and adopted as
  standards, discovery mechanisms are likely to change.</P>

  <P>Therefore, component discovery must be relegated to a
  <B>single</B> point of control within AXIS, typically an
  AXIS-specific factory method. These factory methods should
  conform to current standards, when available. As technologies
  evolve and/or are standardized, the factory methods should be
  kept up-to-date with appropriate discovery mechanisms.</P>

  <H2><A name="Open Issues"></A>Open Issues</H2>

  <OL>
    <LI>The relationship between the Axis subsystems needs to be
    documented and somewhat cleaned up as there is leakage of
    responsibilities between some of the subsystems. For example,
    there is some SOAP and HTTP bias in the basic MessageContext
    type and associated classes.</LI>

    <LI>What classes are included in the "encoding" subsystem? Are
    the encoding and message model subsystems independent of the
    other subsystems which depend on "message flow"?</LI>

    <LI>(Possibly related to the previous issue) How should we
    distribute the classes in the above diagram between the Axis
    subsystems taking into account&nbsp; SOAP-specific and
    HTTP-specific features?</LI>

    <LI>The Axis Engine currently knows about three layers of
    handlers: transport, global, and service. However,
    architecturally, this is rather odd. What "law" of web services
    ensures that there will always and only ever be <I>three</I>
    layers? It would be more natural to use Targeted Chains with
    their more primitive notion of request, pivot, and response
    Handlers. We would then implemented the Axis Engine as a
    Targeted Chain whose pivot Handler is itself a Targeted Chain
    with global request and response Handlers and a service pivot
    Handler (which is itself a Targeted Chain as we have just
    described). Such an Axis Engine architecture is shown in the
    diagram below.</LI>

    <LI style="list-style: none"><BR>
    <IMG src="images/stcengine.jpg" height="312" width="667"></LI>

    <LI>WSDDService.faultFlows is initialised to an empty Vector
    and there is no way of adding a fault flow to it. Is this dead
    code or is something else missing?</LI>

    <LI>If a fault occurs after the pivot Handler, should the
    backwards scan notify Handlers which were invoked prior to the
    pivot Handler? The current implementation does notify such
    Handlers. However, this is not consistent with the processing
    of faults raised in a downstream system and stored in the
    message context by the pivot Handler. These faults are passed
    through any response Handlers, but do not cause onFault to be
    driven in the local engine.</LI>

    <LI style="list-style: none">
      <BR>
      &nbsp;

      <P>&nbsp;<BR>
      &nbsp;<BR>
      &nbsp;</P>

      <P>We need to consider what's going on here. If you take a
      sequence of Handlers and then introduce a distribution
      boundary into the sequence, what effect should that have on
      the semantics of the sequence in terms of its effects on
      message contexts? The following diagram shows a client-side
      Handler sequence invoking a server-side Handler sequence. We
      need to consider how the semantics of this combined sequence
      compares with the sequence formed by omitting the
      transport-related Handlers.<BR>
      <IMG src="images/pivots2.jpg" height="413" width="658"></P>
    </LI>
  </OL>
</BODY>
</HTML>
